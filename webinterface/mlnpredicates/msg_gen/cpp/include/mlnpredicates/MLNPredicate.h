/* Auto-generated by genmsg_cpp for file /home/ai/rosbuild_ws/mlnpredicates/msg/MLNPredicate.msg */
#ifndef MLNPREDICATES_MESSAGE_MLNPREDICATE_H
#define MLNPREDICATES_MESSAGE_MLNPREDICATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace mlnpredicates
{
template <class ContainerAllocator>
struct MLNPredicate_ {
  typedef MLNPredicate_<ContainerAllocator> Type;

  MLNPredicate_()
  : name()
  , domain()
  {
  }

  MLNPredicate_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , domain(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _domain_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  domain;


  typedef boost::shared_ptr< ::mlnpredicates::MLNPredicate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mlnpredicates::MLNPredicate_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MLNPredicate
typedef  ::mlnpredicates::MLNPredicate_<std::allocator<void> > MLNPredicate;

typedef boost::shared_ptr< ::mlnpredicates::MLNPredicate> MLNPredicatePtr;
typedef boost::shared_ptr< ::mlnpredicates::MLNPredicate const> MLNPredicateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::mlnpredicates::MLNPredicate_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::mlnpredicates::MLNPredicate_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace mlnpredicates

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mlnpredicates::MLNPredicate_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mlnpredicates::MLNPredicate_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mlnpredicates::MLNPredicate_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9992c37cb772d59ee22a4bf22c84177b";
  }

  static const char* value(const  ::mlnpredicates::MLNPredicate_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9992c37cb772d59eULL;
  static const uint64_t static_value2 = 0xe22a4bf22c84177bULL;
};

template<class ContainerAllocator>
struct DataType< ::mlnpredicates::MLNPredicate_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mlnpredicates/MLNPredicate";
  }

  static const char* value(const  ::mlnpredicates::MLNPredicate_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mlnpredicates::MLNPredicate_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
string[] domain\n\
\n\
";
  }

  static const char* value(const  ::mlnpredicates::MLNPredicate_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mlnpredicates::MLNPredicate_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.domain);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MLNPredicate_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mlnpredicates::MLNPredicate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::mlnpredicates::MLNPredicate_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "domain[]" << std::endl;
    for (size_t i = 0; i < v.domain.size(); ++i)
    {
      s << indent << "  domain[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.domain[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // MLNPREDICATES_MESSAGE_MLNPREDICATE_H

