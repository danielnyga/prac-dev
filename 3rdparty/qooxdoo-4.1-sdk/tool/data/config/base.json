// base.json
{
  "name"    : "base.json",

  "let" :
  {
    "ROOT"         : ".",
    "QOOXDOO_PATH" : "../../..",
    "CACHE"        : "${TMPDIR}/qx${QOOXDOO_VERSION}/cache",
    "CACHE_KEY"    :
    {
      "compile"      : "${CACHE}",
      "downloads"    : "${CACHE}/downloads",
      "invalidate-on-tool-change" : true
    },
    "QXTHEME"      : "qx.theme.Modern",
    "QXICONTHEME"  : ["Tango"],
    "OPTIMIZE"     : [
       "basecalls",
       "comments",
       "privates",
       "strings",
       "variables",
       "variants",
       "whitespace"
    ],
    "LOCALES"      : [ "en" ],
    "APPLICATION_MAIN_CLASS" : "${APPLICATION}.Application",
    "ADD_NOCACHE_PARAM"      : false,
    "COMPILE_WITH_LINT"      : true,
    "SOURCE_PATH"  : "${ROOT}/source",
    "BUILD_PATH"   : "${ROOT}/build",
    "CONTRIB_CATALOG_BASEURL": "https://github.com/qooxdoo/contrib-catalog/raw/master/contributions"
  },


  "jobs" :
  {
    // the next one is needed wherever the local lib is to be scanned
    "scan-local-lib" :
    {
      "desc"    : "scan for classes and resources in the current library",

      "library" :
      [
        {
          "manifest" : "${ROOT}/Manifest.json"
        }
      ],

      "cache" : "${CACHE_KEY}"
    },


    "libraries" :
    {
      "desc" : "includer job, to hold the essential libraries for the compile jobs",

      "library" :
      [
        {
          "manifest" : "${QOOXDOO_PATH}/framework/Manifest.json"
        },

        {
          "manifest" : "${ROOT}/Manifest.json"
        }
      ]
    },

    "cache"  :
    {
      "cache"   : "${CACHE_KEY}"
    },

    "includes"  :
    {
      "include" :
      [
        "${APPLICATION_MAIN_CLASS}",
        "${QXTHEME}"
      ]
    },

    "common" :
    {
      "desc"    : "common settings for base.json jobs",

      "extend"  : ["libraries", "includes", "cache"],

      "environment" :
      {
        "qx.version"     : "${QOOXDOO_VERSION}",
        "qx.revision"    : "${QOOXDOO_REVISION}",
        "qx.theme"       : "${QXTHEME}",
        "qx.application" : "${APPLICATION_MAIN_CLASS}"
      },

      "asset-let" :
      {
        "qx.icontheme" : "${QXICONTHEME}"
      }
    },


    // -- source jobs --------------------------------------------------

    "source-script-compopts" :
    {
      "compile-options" :
      {
        "paths" :
        {
          "file" : "${SOURCE_PATH}/script/${APPLICATION}.js",
          "app-root" : "source"
        },
        "uris" :
        {
          "add-nocache-param" : "${ADD_NOCACHE_PARAM}"
        },
        "code" :
        {
          "locales"    : "${LOCALES}",
          "lint-check" : "${COMPILE_WITH_LINT}"
        }
      }
    },


    "source-script" :
    {
      "desc"    : "create a source loader (all classes as source files)",

      "extend" : ["common", "source-script-compopts"],

      "compile" : { "type" : "source" }
    },


    "source" :
    {
      "desc"    : "create source version of current application",

      "compile-options" :
      {
        "code" : { "except" : [ "*" ] }
      },


      "run" :
      [
        "source-script"
      ]
    },


    "source-all-script" :
    {
      "desc"    : "create includer script of current application",

      "extend" : ["common"],

      "config-warnings" :
      {
        "exclude" :
        [
          "qx.test.*",
          "${APPLICATION}.test.*",
          "${APPLICATION}.simulation.*"
        ],
        "environment" :
        [
          "non-literal-keys"
        ]
      },

      // include all (relevant) sources
      "include" :
      [
        "${APPLICATION}.*",
        "qx.*"
      ],
      "exclude" :
      [
        "qx.test.*",
        "${APPLICATION}.test.*",
        "${APPLICATION}.simulation.*"
      ],

      "compile-options" :
      {
        "paths" :
        {
          "file" : "${SOURCE_PATH}/script/${APPLICATION}.js",
          "app-root" : "source"
        },
        "uris" :
        {
          "add-nocache-param" : "${ADD_NOCACHE_PARAM}"
        },
        "code" :
        {
          "locales" : "${LOCALES}",
          "except"  : ["*"]
        }
      },

      "compile" : { "type" : "source" }
    },


    "source-all" :
    {
      "desc"    : "create source version of current application, with all classes",

      "run" :
      [
        "source-all-script"
      ]
    },

    "source-hybrid" :
    {
      "desc"    : "create a hybrid application (application classes as individual files, others catenated)",

      "compile-options" :
      {
        "code" : { "except" : [ "${APPLICATION}.*" ] }
      },

      "run" :
      [
        "source-script"
      ]

    },


    // -- build jobs ---------------------------------------------------

    "build-script" :
    {
      "desc"    : "create build script of current application",

      "extend" : ["common"],

      "environment" :
      {
        "qx.debug" : false,
        "qx.debug.databinding" : false,
        "qx.debug.dispose" : false,
        "qx.debug.ui.queue" : false,
        "qx.debug.io" : false
      },

      "compile-options" :
      {
        "paths"  :
        {
          "file" : "${BUILD_PATH}/script/${APPLICATION}.js",
          "app-root" : "${BUILD_PATH}"
        },
        "uris"   :
        {
          "script"   : "script",
          //"resource" : "resource",
          "add-nocache-param" : false
        },
        "code"   :
        {
          "format"   : false,
          "locales"  : "${LOCALES}",
          "except"   : [],
          "optimize" : "${OPTIMIZE}",
          "lint-check" : "${COMPILE_WITH_LINT}"
        }
      },

      "compile" : { "type" : "build" }
    },


    "build-files" :
    {
      "desc"    : "copy files of current application to build dir",

      "extend" : ["common"],

      "copy-files" :
      {
        "files" :
        [
          "index.html"
        ],

        "source" : "${SOURCE_PATH}",
        "target" : "${BUILD_PATH}"
      }
    },


    "build-resources":
    {
      "desc"    : "copy necessary resources for current application to build dir",

      "extend" : ["common"],

      "environment" :
      {
        "qx.debug" : false,
        "qx.debug.databinding" : false,
        "qx.debug.dispose" : false,
        "qx.debug.ui.queue" : false,
        "qx.debug.io" : false
      },

      "copy-resources" :
      {
        "target"          : "${BUILD_PATH}",
        "resource-filter" : true
      }
    },


    "build" :
    {
      "desc"    : "create build version of current application",

      "run" :
      [
        "build-resources",
        "build-script",
        "build-files"
      ]
    },

    // -- various jobs -------------------------------------------------


    "provider" :
    {
      "desc"   : "create a provider structure, with code, dependency info, etc.",

      "extend" : ["cache", "libraries"]

      ,"let" :
      {
        "PROVIDER_ROOT" : "./provider",
        "PROVIDER_OPTIMIZE" : ["variables", "basecalls", "strings", "whitespace"]
      }

      ,"run" : [
        "provider-classes",
        "provider-deps"
      ]

    },

    "provider-deps":
    {
      // will only run when invoked from "provider"
      "config-warnings" : {
        "exclude" : [ "${APPLICATION}.test.*", "${APPLICATION}.simulation.*" ]
      }
      ,"include" : [ "=${APPLICATION}.*" ]
      ,"exclude" : [ "${APPLICATION}.test.*", "${APPLICATION}.simulation.*" ]

      ,"log" :
      {
        "dependencies" :
        {
          "type" : "using",
          "format" : "provider",
          "json"   :
          {
            "pretty" : true,
            "file"   : "${PROVIDER_ROOT}/dependencies.json",
            "replace-dots-in" : [ "keys", "values"]
          }
        }
      }
    },

    "provider-classes" :
    {
      // will only run when invoked from "provider"
      "config-warnings" : {
        "exclude" : [ "${APPLICATION}.test.*", "${APPLICATION}.simulation.*" ]
      }
      ,"compile-options" :
      {
        "code" :
        {
          "locales"  : "${LOCALES}",
          "format"   : false,
          "optimize" : "${PROVIDER_OPTIMIZE}"
        }
      }

      ,"include" : [ "${APPLICATION}.*" ]
      ,"exclude" : [ "${APPLICATION}.test.*", "${APPLICATION}.simulation.*" ]

      ,"environment" :
      {
        "qx.debug" : false,
        "qx.debug.databinding" : false,
        "qx.debug.dispose" : false,
        "qx.debug.ui.queue" : false,
        "qx.debug.io" : false
      }

      ,"provider" :
      {
        "app-root" : "${PROVIDER_ROOT}",
        "include"  : ["${APPLICATION}.*"],
        "exclude"  : ["${APPLICATION}.test.*", "${APPLICATION}.simulation.*"],
        "compile"  : ["source", "build"]
      }
    },


    "dependencies" :
    {
      "desc"   : "create a dependencies.json file for the library"
      ,"extend" : ["cache", "libraries"]
      ,"config-warnings" : {
        "include" : false,
        "exclude" : [ "${APPLICATION}.test.*", "${APPLICATION}.simulation.*" ]
      }
      ,"include" : [ "=${APPLICATION}.*" ]
      ,"exclude" : [ "${APPLICATION}.test.*", "${APPLICATION}.simulation.*" ]

      ,"log" :
      {
        "dependencies" :
        {
          "type" : "using",
          "format" : "provider",
          "json"   :
          {
            "pretty" : true,
            "file"   : "${SOURCE_PATH}/script/dependencies.json"
          }
        }
      }
    },


    "source-server" :
    {
      "desc"  : "start a lightweight web server that exports the source version"
      ,"extend" : ["cache", "libraries", "source-script-compopts"]
      ,"let"  : {
        "SOURCE_SERVER_PORT" : 0
      }
      ,"web-server" :
      {
        "document-root" : ""   // calculate dynamically from libraries
        ,"server-port"  : "${SOURCE_SERVER_PORT}"
        ,"log-level"    : "error"  // use "info" for more console logging, "fatal" for none
        ,"allow-remote-access" : false
      }
    },

    "source-server-reload" :
    {
      "desc"  : "web server for source version, with active reload (requires running 'watch' job)"
      ,"extend" : [ "source-server" ]
      ,"web-server" :
      {
        "active-reload" : {
          "client-script" : "${QOOXDOO_PATH}/tool/data/generator/active_reload.js"
        }
      }
      // has an extra 'watch-files' key - 'web-server' needs to evaluate first in Generator!
      ,"watch-files" : {
        // watch the application script file
        "paths" : ["${SOURCE_PATH}/script/${APPLICATION}.js"]
        ,"check-interval" : 2
      }
    },

    "source-httpd-config":
    {
      "desc"  : "generate a httpd configuration for the source version"
      ,"extend" : ["cache", "libraries", "source-script-compopts"]
      ,"web-server-config" :
      {
        "output-dir" : "${ROOT}"
        ,"template-dir" : "${QOOXDOO_PATH}/tool/data/generator"
        ,"httpd-type" : "apache2"
        ,"httpd-host-url" : "http://localhost"
      }
    },


    "translation" :
    {
      "desc"    : "create .po files for current library",

      "extend" : ["scan-local-lib"],

      "translate" :
      {
        "locales": "${LOCALES}",
        "namespaces" : ["${APPLICATION}"]
      }
    },


    "pretty" :
    {
      "desc"    : "pretty-formatting of the source code of the current library",

      "extend" : [ "scan-local-lib" ],

      "config-warnings" : { "include" : false },

      "include" : [ "=${APPLICATION}.*" ],

      "pretty-print" : {}
    },


    "clean" :
    {
      "desc"    : "remove local cache and generated .js files (source/build)",

      "cache"   : "${CACHE_KEY}",

      "clean-files" :
      {
        "Cleaning up build" :
        [
          "${BUILD_PATH}/script/${APPLICATION}*.js"
        ],
        "Cleaning up source" :
        [
          "${SOURCE_PATH}/script/${APPLICATION}*.js"
        ]
        /*
        ,"Deleting local cache" :
        [
          "${ROOT}/cache"
        ]
        */
      }
    },


    "distclean" :
    {
      "desc"    : "remove the cache and all generated artefacts of this library (source, build, ...)",

      "cache"   : "${CACHE_KEY}",

      "clean-files" :
      {
        "Deleting build" :
        [
          "${BUILD_PATH}"
        ],
        "Cleaning up source" :
        [
          "${SOURCE_PATH}/script"
        ],
        "Deleting api folder" :
        [
          "${ROOT}/api"
        ],
        "Deleting test folder" :
        [
          "${ROOT}/test"
        ],
        "Deleting inspector folder" :
        [
          "${ROOT}/inspector"
        ],
        "Deleting simulator folder" :
        [
          "${ROOT}/simulator"
        ]
        /*
        ,"Deleting cache" :
        [
          "${CACHE}"
        ]
        */
      }
    },

    "clean-cache" :
    {
      "desc"    : "remove the cache files",

      "cache"   : "${CACHE_KEY}",

      "clean-files" : {}  // cache files are handled implicitly

    },


    "lint" :
    {
      "desc"    : "check the source code of the .js files of the current library",

      "extend" : [ "cache", "libraries" ],

      "include": ["${APPLICATION}.*"],

      "lint-check" :
      {
        "allowed-globals"   : [
          "q",
          "qxWeb",
          "qxsettings",
          "qxvariants",
          "simulator", "selenium"  // for skeletons that have simulation.* classes
        ]
        ,"ignore-catch-param"               : false
        ,"ignore-deprecated-symbols"        : false
        ,"ignore-environment-nonlit-key"    : false
        ,"ignore-multiple-mapkeys"          : false
        ,"ignore-multiple-vardecls"         : true
        ,"ignore-no-loop-block"             : false
        ,"ignore-reference-fields"          : false
        ,"ignore-undeclared-privates"       : false
        ,"ignore-undefined-globals"         : false
        ,"ignore-shadowing-locals"          : false
        ,"ignore-unused-parameter"          : true
        ,"ignore-unused-variables"          : false
        ,"run" : true
        ,"warn-unknown-jsdoc-keys"          : false
        ,"warn-jsdoc-key-syntax"            : true
      }
    },


    "migration" :
    {
      "desc"    : "migrate the .js files of the current library to the current qooxdoo version",

      "extend" : [ "scan-local-lib" ],

      "migrate-files" :
      {
        //"from-version" : "0.7",
        "migrate-html" : false
      }
    },


    "fix" :
    {
      "desc"    : "normalize whitespace in .js files of the current library (tabs, eol, ...)",

      "extend" : [ "scan-local-lib" ],

      "fix-files" : {}
    },


    "info" :
    {
      "desc" : "collects environment information like the qooxdoo version etc., and prints it out",

      "cache" : "${CACHE_KEY}",

      "collect-environment-info" : {}
    },

    "compile-framework-scss" :
    {
      "desc"   : "Compile the theme scss",
      "extend" : ["cache"],
      "let" :
      {
        "QX_MOBILE_THEME_PATH" : "$${QOOXDOO_PATH}/framework/source/resource/qx/mobile",
        "QX_SHARED_THEME_PATH" : "$${QOOXDOO_PATH}/framework/source/resource/qx/scss"
      },
      "shell" :
      {
        "command" : "sass -C -t compressed --load-path ${QX_SHARED_THEME_PATH} --update ${QX_MOBILE_THEME_PATH}/scss/:${QX_MOBILE_THEME_PATH}/css/",
        "command-not-found" : "It seems that Sass (http://sass-lang.com/) is not installed and/or executable, which is needed for the SCSS-compilation."
      }
    },

    // -- various includer jobs that can be used in "extend" key ---------------

    "profiling" :
    {
      "desc"    : "includer job, to activate profiling",
      "extend"  : [ "cache" ],

      "environment" :
      {
        "qx.aspects" : true
      },

      "require" :
      {
        "qx.Class" : [ "qx.core.Aspect", "qx.dev.Profile" ]
      }
    },


    "log-parts" :
    {
      "desc" : "includer job, to filter verbose messages for part building (with -v)",

      "log"  : { "filter" : { "debug" : [ "generator.code.PartBuilder.*" ] } }
    },


    "log-dependencies" :
    {
      "desc" : "includer job, to print dependency information with a job (use -v)",

      "log"  :
      {
        "filter" : { "debug" : [ "generator.code.DependencyLoader.*" ] },
        "dependencies" : { "type" : "using" }
      }
    },

    "log-dependencies-dot" :
    {
      "desc" : "includer job, to generate a dot file for dependencies",

      "log"  :
      {
        "dependencies" :
        {
          "type"   : "using"
          ,"phase" : "loadtime"
          ,"format" : "dot"
          ,"dot"    :
          {
            "root"   : "${APPLICATION}.Application"
            //,"radius" : 3
            //,"span-tree-only" : true
            ,"compiled-class-size" : false
          }
        }
      }
    },

    "watch" :
    {
      "desc" : "watch source files for changes and run the default job automatically",
      "extend" : ["cache"],

      "watch-files" :
      {
        "command" :
        {
          "line"     : "${PYTHON_CMD} generate.py -q -I",
          "per-file" : false,
          "exec-on-startup" : true,
          "exit-on-retcode" : false
        },
        "paths"    : ["${SOURCE_PATH}/class"],
        "include" : [ "*.js" ],
        "check-interval" : 2
      }
    },

    "validate-manifest" :
    {
      "extend" : ["cache", "scan-local-lib"],

      "desc" : "validates the given filepath as manifest (defaults to './Manifest.json')",
      "validation-manifest" : {}
    },

    "validate-config" :
    {
      "extend" : ["cache"],
      "desc" : "validates the 'config.json' itself - if jobname arg is given checks dedicated job only",
      "validation-config" : {}
    }
  }
}
