/* **************************************************************************** 
 * WIKIHOW.COM -- NATURAL-LANGUAGE INSTRUCTIONS
 * 
 * (C) 2011-2013 by Daniel Nyga (nyga@cs.uni-bremen.edu)
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
// sift in the cocoa_powder and add the orange_rind .
has_sense(sift-1,sift-1-sense)
is_a(sift-1-sense,sift.v.02)
has_sense(cocoa_powder-4,cocoa_powder-4-sense)
is_a(cocoa_powder-4-sense,cocoa_powder.n.01)
has_sense(add-6,add-6-sense)
is_a(add-6-sense,add.v.01)
has_sense(orange_rind-8,orange_rind-8-sense)
is_a(orange_rind-8-sense,orange_peel.n.01)
root(ROOT-0, sift-1)
det(cocoa_powder-4, the-3)
prep_in(sift-1, cocoa_powder-4)
conj_and(sift-1, add-6)
det(orange_rind-8, the-7)
dobj(add-6, orange_rind-8)
has_pos(sift-1,VB)
has_pos(the-3,DT)
has_pos(cocoa_powder-4,NN)
has_pos(add-6,VB)
has_pos(the-7,DT)
has_pos(orange_rind-8,NN)
has_sense(the-7, null)
has_sense(the-3, null)
---
// add meat to the grill .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(meat-2,meat-2-sense)
is_a(meat-2-sense,meat.n.01)
has_sense(grill-5,grill-5-sense)
is_a(grill-5-sense,grill.n.02)
root(ROOT-0, add-1)
dobj(add-1, meat-2)
det(grill-5, the-4)
prep_to(add-1, grill-5)
has_pos(add-1,VB)
has_pos(meat-2,NN)
has_pos(the-4,DT)
has_pos(grill-5,NN)
has_sense(the-4, null)
---
// continue to stir and add firm vegetable if you pick the capsicum or zucchini recipe .
has_sense(continue-1,continue-1-sense)
is_a(continue-1-sense,continue.v.01)
has_sense(stir-3,stir-3-sense)
is_a(stir-3-sense,stir.v.01)
has_sense(add-5,add-5-sense)
is_a(add-5-sense,add.v.01)
has_sense(vegetable-7,vegetable-7-sense)
is_a(vegetable-7-sense,vegetable.n.02)
has_sense(pick-10,pick-10-sense)
is_a(pick-10-sense,pick.v.01)
has_sense(capsicum-12,capsicum-12-sense)
is_a(capsicum-12-sense,capsicum.n.01)
has_sense(zucchini-14,zucchini-14-sense)
is_a(zucchini-14-sense,zucchini.n.02)
has_sense(recipe-15,recipe-15-sense)
is_a(recipe-15-sense,recipe.n.01)
root(ROOT-0, continue-1)
aux(stir-3, to-2)
xcomp(continue-1, stir-3)
conj_and(stir-3, add-5)
nn(vegetable-7, firm-6)
dobj(stir-3, vegetable-7)
mark(pick-10, if-8)
nsubj(pick-10, you-9)
advcl(continue-1, pick-10)
det(recipe-15, the-11)
nn(recipe-15, capsicum-12)
conj_or(capsicum-12, zucchini-14)
dobj(pick-10, recipe-15)
has_pos(continue-1,VB)
has_pos(to-2,TO)
has_pos(stir-3,VB)
has_pos(add-5,VB)
has_pos(firm-6,NN)
has_pos(vegetable-7,NN)
has_pos(if-8,IN)
has_pos(you-9,PRP)
has_pos(pick-10,VBP)
has_pos(the-11,DT)
has_pos(capsicum-12,NN)
has_pos(zucchini-14,NN)
has_pos(recipe-15,NN)
has_sense(to-2, null)
has_sense(you-9, null)
has_sense(if-8, null)
has_sense(firm-6, null)
has_sense(the-11, null)
---
// add nonfat dry_milk , if desire .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(nonfat-2,nonfat-2-sense)
is_a(nonfat-2-sense,nonfat.a.01)
has_sense(dry_milk-3,dry_milk-3-sense)
is_a(dry_milk-3-sense,powdered_milk.n.01)
has_sense(desire-6,desire-6-sense)
is_a(desire-6-sense,desire.v.01)
root(ROOT-0, add-1)
amod(dry_milk-3, nonfat-2)
dobj(add-1, dry_milk-3)
mark(desire-6, if-5)
dep(dry_milk-3, desire-6)
has_pos(add-1,VB)
has_pos(nonfat-2,JJ)
has_pos(dry_milk-3,NN)
has_pos(if-5,IN)
has_pos(desire-6,VBP)
has_sense(if-5, null)
---
// slowly add in the garlic olive_oil and mix together .
has_sense(slowly-1,slowly-1-sense)
is_a(slowly-1-sense,slowly.r.01)
has_sense(add-2,add-2-sense)
is_a(add-2-sense,add.v.01)
has_sense(garlic-5,garlic-5-sense)
is_a(garlic-5-sense,garlic.n.02)
has_sense(olive_oil-6,olive_oil-6-sense)
is_a(olive_oil-6-sense,olive_oil.n.01)
has_sense(mix-8,mix-8-sense)
is_a(mix-8-sense,mix.v.04)
has_sense(together-9,together-9-sense)
is_a(together-9-sense,together.r.01)
advmod(add-2, slowly-1)
root(ROOT-0, add-2)
det(olive_oil-6, the-4)
amod(olive_oil-6, garlic-5)
prep_in(add-2, olive_oil-6)
conj_and(add-2, mix-8)
advmod(mix-8, together-9)
has_pos(slowly-1,RB)
has_pos(add-2,VB)
has_pos(the-4,DT)
has_pos(garlic-5,JJ)
has_pos(olive_oil-6,NN)
has_pos(mix-8,VB)
has_pos(together-9,RB)
has_sense(the-4, null)
---
// add the scallop when the oil be heated .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(scallop-3,scallop-3-sense)
is_a(scallop-3-sense,scallop.n.02)
has_sense(oil-6,oil-6-sense)
is_a(oil-6-sense,vegetable_oil.n.01)
has_sense(be-7,be-7-sense)
is_a(be-7-sense,be.v.01)
has_sense(heated-8,heated-8-sense)
is_a(heated-8-sense,heated.s.01)
root(ROOT-0, add-1)
det(scallop-3, the-2)
dobj(add-1, scallop-3)
advmod(heated-8, when-4)
det(oil-6, the-5)
nsubjpass(heated-8, oil-6)
auxpass(heated-8, be-7)
advcl(add-1, heated-8)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(scallop-3,NN)
has_pos(when-4,WRB)
has_pos(the-5,DT)
has_pos(oil-6,NN)
has_pos(be-7,VB)
has_pos(heated-8,VBN)
has_sense(the-5, null)
has_sense(the-2, null)
has_sense(when-4, null)
---
// pour into a serving pitcher and add ginger_ale .
has_sense(pour-1,pour-1-sense)
is_a(pour-1-sense,pour.v.01)
has_sense(pitcher-5,pitcher-5-sense)
is_a(pitcher-5-sense,pitcher.n.02)
has_sense(add-7,add-7-sense)
is_a(add-7-sense,add.v.01)
has_sense(ginger_ale-8,ginger_ale-8-sense)
is_a(ginger_ale-8-sense,ginger_ale.n.01)
root(ROOT-0, pour-1)
det(pitcher-5, a-3)
amod(pitcher-5, serving-4)
prep_into(pour-1, pitcher-5)
conj_and(pour-1, add-7)
dobj(add-7, ginger_ale-8)
has_pos(pour-1,VB)
has_pos(a-3,DT)
has_pos(serving-4,JJ)
has_pos(pitcher-5,NN)
has_pos(add-7,VB)
has_pos(ginger_ale-8,NN)
has_sense(a-3, null)
has_sense(serving-4, null)
---
// You can also add spice .
has_sense(also-3,also-3-sense)
is_a(also-3-sense,besides.r.02)
has_sense(add-4,add-4-sense)
is_a(add-4-sense,add.v.01)
has_sense(spice-5,spice-5-sense)
is_a(spice-5-sense,spice.n.02)
nsubj(add-4, You-1)
aux(add-4, can-2)
advmod(add-4, also-3)
root(ROOT-0, add-4)
dobj(add-4, spice-5)
has_pos(You-1,PRP)
has_pos(can-2,MD)
has_pos(also-3,RB)
has_pos(add-4,VB)
has_pos(spice-5,NN)
has_sense(can-2, null)
has_sense(You-1, null)
---
// add the silver .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(silver-3,silver-3-sense)
is_a(silver-3-sense,silver.n.01)
root(ROOT-0, add-1)
det(silver-3, the-2)
dobj(add-1, silver-3)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(silver-3,NN)
has_sense(the-2, null)
---
// add your rib and cover .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(rib-3,rib-3-sense)
is_a(rib-3-sense,rib.n.03)
has_sense(cover-5,cover-5-sense)
is_a(cover-5-sense,cover.v.01)
root(ROOT-0, add-1)
poss(rib-3, your-2)
dobj(add-1, rib-3)
conj_and(add-1, cover-5)
has_pos(add-1,VB)
has_pos(your-2,PRP$)
has_pos(rib-3,NN)
has_pos(cover-5,VB)
has_sense(your-2, null)
---
// When finish , add the milk .
has_sense(finish-2,finish-2-sense)
is_a(finish-2-sense,complete.v.01)
has_sense(add-4,add-4-sense)
is_a(add-4-sense,add.v.01)
has_sense(milk-6,milk-6-sense)
is_a(milk-6-sense,milk.n.01)
advmod(finish-2, When-1)
advcl(add-4, finish-2)
root(ROOT-0, add-4)
det(milk-6, the-5)
dobj(add-4, milk-6)
has_pos(When-1,WRB)
has_pos(finish-2,VBP)
has_pos(add-4,VB)
has_pos(the-5,DT)
has_pos(milk-6,NN)
has_sense(When-1, null)
has_sense(the-5, null)
---
// add dry ingredient alternately with the milk .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(dry-2,dry-2-sense)
is_a(dry-2-sense,dry.a.01)
has_sense(ingredient-3,ingredient-3-sense)
is_a(ingredient-3-sense,ingredient.n.03)
has_sense(alternately-4,alternately-4-sense)
is_a(alternately-4-sense,alternately.r.01)
has_sense(milk-7,milk-7-sense)
is_a(milk-7-sense,milk.n.01)
root(ROOT-0, add-1)
amod(alternately-4, dry-2)
nn(alternately-4, ingredient-3)
dobj(add-1, alternately-4)
det(milk-7, the-6)
prep_with(add-1, milk-7)
has_pos(add-1,VB)
has_pos(dry-2,JJ)
has_pos(ingredient-3,NN)
has_pos(alternately-4,NN)
has_pos(the-6,DT)
has_pos(milk-7,NN)
has_sense(the-6, null)
---
// add the butter , brown_sugar , white sugar , spice , and vanilla .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(butter-3,butter-3-sense)
is_a(butter-3-sense,butter.n.01)
has_sense(brown_sugar-5,brown_sugar-5-sense)
is_a(brown_sugar-5-sense,brown_sugar.n.01)
has_sense(white-7,white-7-sense)
is_a(white-7-sense,white.a.01)
has_sense(sugar-8,sugar-8-sense)
is_a(sugar-8-sense,sugar.n.01)
has_sense(spice-10,spice-10-sense)
is_a(spice-10-sense,spice.n.02)
has_sense(vanilla-13,vanilla-13-sense)
is_a(vanilla-13-sense,vanilla.n.02)
root(ROOT-0, add-1)
det(butter-3, the-2)
dobj(add-1, butter-3)
conj_and(butter-3, brown_sugar-5)
amod(sugar-8, white-7)
conj_and(butter-3, sugar-8)
conj_and(butter-3, spice-10)
conj_and(butter-3, vanilla-13)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(butter-3,NN)
has_pos(brown_sugar-5,NN)
has_pos(white-7,JJ)
has_pos(sugar-8,NN)
has_pos(spice-10,NN)
has_pos(vanilla-13,NN)
has_sense(the-2, null)
---
// add the vanilla , vinegar , cooking_oil , and water to the mix .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(vanilla-3,vanilla-3-sense)
is_a(vanilla-3-sense,vanilla.n.02)
has_sense(vinegar-5,vinegar-5-sense)
is_a(vinegar-5-sense,vinegar.n.01)
has_sense(cooking_oil-7,cooking_oil-7-sense)
is_a(cooking_oil-7-sense,cooking_oil.n.01)
has_sense(water-10,water-10-sense)
is_a(water-10-sense,water.n.06)
root(ROOT-0, add-1)
det(water-10, the-2)
nn(water-10, vanilla-3)
conj_and(water-10, vinegar-5)
conj_and(water-10, cooking_oil-7)
dobj(add-1, water-10)
det(mix-13, the-12)
prep_to(water-10, mix-13)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(vanilla-3,NN)
has_pos(vinegar-5,NN)
has_pos(cooking_oil-7,NN)
has_pos(water-10,NN)
has_pos(the-12,DT)
has_pos(mix-13,NN)
has_sense(the-2, null)
has_sense(mix-13, null)
has_sense(the-12, null)
---
// You can add cinnamon , vanilla or almond_extract for some flavor .
has_sense(add-3,add-3-sense)
is_a(add-3-sense,add.v.01)
has_sense(cinnamon-4,cinnamon-4-sense)
is_a(cinnamon-4-sense,cinnamon.n.03)
has_sense(vanilla-6,vanilla-6-sense)
is_a(vanilla-6-sense,vanilla.n.02)
has_sense(almond_extract-8,almond_extract-8-sense)
is_a(almond_extract-8-sense,almond_extract.n.01)
has_sense(flavor-11,flavor-11-sense)
is_a(flavor-11-sense,relish.n.03)
nsubj(add-3, You-1)
aux(add-3, can-2)
root(ROOT-0, add-3)
dobj(add-3, cinnamon-4)
amod(cinnamon-4, vanilla-6)
conj_or(vanilla-6, almond_extract-8)
det(flavor-11, some-10)
prep_for(add-3, flavor-11)
has_pos(You-1,PRP)
has_pos(can-2,MD)
has_pos(add-3,VB)
has_pos(cinnamon-4,NNP)
has_pos(vanilla-6,NN)
has_pos(almond_extract-8,JJ)
has_pos(some-10,DT)
has_pos(flavor-11,NN)
has_sense(You-1, null)
has_sense(can-2, null)
has_sense(some-10, null)
---
// put the beaten eggs into a separate bowl and add the vanilla and oil .
has_sense(put-1,put-1-sense)
is_a(put-1-sense,put.v.01)
has_sense(eggs-4,eggs-4-sense)
is_a(eggs-4-sense,egg.n.02)
has_sense(separate-7,separate-7-sense)
is_a(separate-7-sense,freestanding.s.01)
has_sense(bowl-8,bowl-8-sense)
is_a(bowl-8-sense,bowl.n.01)
has_sense(add-10,add-10-sense)
is_a(add-10-sense,add.v.01)
has_sense(vanilla-12,vanilla-12-sense)
is_a(vanilla-12-sense,vanilla.n.02)
has_sense(oil-14,oil-14-sense)
is_a(oil-14-sense,vegetable_oil.n.01)
root(ROOT-0, put-1)
det(eggs-4, the-2)
amod(eggs-4, beaten-3)
dobj(put-1, eggs-4)
det(bowl-8, a-6)
amod(bowl-8, separate-7)
prep_into(put-1, bowl-8)
conj_and(put-1, add-10)
det(vanilla-12, the-11)
dobj(add-10, vanilla-12)
conj_and(vanilla-12, oil-14)
has_pos(put-1,VB)
has_pos(the-2,DT)
has_pos(beaten-3,JJ)
has_pos(eggs-4,NNS)
has_pos(a-6,DT)
has_pos(separate-7,JJ)
has_pos(bowl-8,NN)
has_pos(add-10,VB)
has_pos(the-11,DT)
has_pos(vanilla-12,NN)
has_pos(oil-14,NN)
has_sense(beaten-3, null)
has_sense(the-2, null)
has_sense(the-11, null)
has_sense(a-6, null)
---
// add your wood .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(wood-3,wood-3-sense)
is_a(wood-3-sense,wood.n.01)
root(ROOT-0, add-1)
poss(wood-3, your-2)
dobj(add-1, wood-3)
has_pos(add-1,VB)
has_pos(your-2,PRP$)
has_pos(wood-3,NN)
has_sense(your-2, null)
---
// You may also add some oil if you like .
has_sense(also-3,also-3-sense)
is_a(also-3-sense,besides.r.02)
has_sense(add-4,add-4-sense)
is_a(add-4-sense,add.v.01)
has_sense(oil-6,oil-6-sense)
is_a(oil-6-sense,vegetable_oil.n.01)
has_sense(like-9,like-9-sense)
is_a(like-9-sense,wish.v.02)
nsubj(add-4, You-1)
aux(add-4, may-2)
advmod(add-4, also-3)
root(ROOT-0, add-4)
det(oil-6, some-5)
dobj(add-4, oil-6)
mark(like-9, if-7)
nsubj(like-9, you-8)
advcl(add-4, like-9)
has_pos(You-1,PRP)
has_pos(may-2,MD)
has_pos(also-3,RB)
has_pos(add-4,VB)
has_pos(some-5,DT)
has_pos(oil-6,NN)
has_pos(if-7,IN)
has_pos(you-8,PRP)
has_pos(like-9,VBP)
has_sense(You-1, null)
has_sense(some-5, null)
has_sense(you-8, null)
has_sense(may-2, null)
has_sense(if-7, null)
---
// add baking_powder and then flour .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(baking_powder-2,baking_powder-2-sense)
is_a(baking_powder-2-sense,baking_powder.n.01)
has_sense(then-4,then-4-sense)
is_a(then-4-sense,then.r.01)
has_sense(flour-5,flour-5-sense)
is_a(flour-5-sense,flour.n.01)
root(ROOT-0, add-1)
tmod(add-1, baking_powder-2)
advmod(baking_powder-2, then-4)
conj_and(baking_powder-2, flour-5)
has_pos(add-1,VB)
has_pos(baking_powder-2,NN)
has_pos(then-4,RB)
has_pos(flour-5,NN)
---
// add sugar and butter to mixing_bowl and beat well .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(sugar-2,sugar-2-sense)
is_a(sugar-2-sense,sugar.n.01)
has_sense(butter-4,butter-4-sense)
is_a(butter-4-sense,butter.n.01)
has_sense(mixing_bowl-6,mixing_bowl-6-sense)
is_a(mixing_bowl-6-sense,mixing_bowl.n.01)
has_sense(beat-8,beat-8-sense)
is_a(beat-8-sense,beat.v.10)
has_sense(well-9,well-9-sense)
is_a(well-9-sense,well.r.02)
root(ROOT-0, add-1)
dobj(add-1, sugar-2)
conj_and(sugar-2, butter-4)
aux(mixing_bowl-6, to-5)
xcomp(add-1, mixing_bowl-6)
conj_and(mixing_bowl-6, beat-8)
advmod(mixing_bowl-6, well-9)
has_pos(add-1,VB)
has_pos(sugar-2,NN)
has_pos(butter-4,NN)
has_pos(to-5,TO)
has_pos(mixing_bowl-6,VB)
has_pos(beat-8,VB)
has_pos(well-9,RB)
has_sense(to-5, null)
---
// gradually add sugar and continue to mix .
has_sense(gradually-1,gradually-1-sense)
is_a(gradually-1-sense,gradually.r.01)
has_sense(add-2,add-2-sense)
is_a(add-2-sense,add.v.01)
has_sense(sugar-3,sugar-3-sense)
is_a(sugar-3-sense,sugar.n.01)
has_sense(continue-5,continue-5-sense)
is_a(continue-5-sense,continue.v.01)
has_sense(mix-7,mix-7-sense)
is_a(mix-7-sense,blend.v.03)
advmod(add-2, gradually-1)
root(ROOT-0, add-2)
dobj(add-2, sugar-3)
conj_and(add-2, continue-5)
aux(mix-7, to-6)
xcomp(continue-5, mix-7)
has_pos(gradually-1,RB)
has_pos(add-2,VB)
has_pos(sugar-3,NN)
has_pos(continue-5,VB)
has_pos(to-6,TO)
has_pos(mix-7,VB)
has_sense(to-6, null)
---
// Remove pan from the burner and add the butter and vanilla .
has_sense(burner-5,burner-5-sense)
is_a(burner-5-sense,burner.n.02)
has_sense(add-7,add-7-sense)
is_a(add-7-sense,add.v.01)
has_sense(butter-9,butter-9-sense)
is_a(butter-9-sense,butter.n.01)
has_sense(vanilla-11,vanilla-11-sense)
is_a(vanilla-11-sense,vanilla.n.02)
root(ROOT-0, Remove-1)
dep(Remove-1, pan-2)
det(burner-5, the-4)
prep_from(pan-2, burner-5)
conj_and(pan-2, add-7)
det(butter-9, the-8)
dobj(add-7, butter-9)
conj_and(butter-9, vanilla-11)
has_pos(Remove-1,VB)
has_pos(pan-2,VB)
has_pos(the-4,DT)
has_pos(burner-5,NN)
has_pos(add-7,VB)
has_pos(the-8,DT)
has_pos(butter-9,NN)
has_pos(vanilla-11,NN)
has_sense(the-4, null)
has_sense(Remove-1, null)
has_sense(the-8, null)
has_sense(pan-2, null)
---
// curing be when you add salt , sodium_nitrate or saltpetre , nitrite and sometimes sugar , seasoning , phosphate and ascorbates to pork for preservation , color development and flavor enhancement .
has_sense(curing-1,curing-1-sense)
is_a(curing-1-sense,hardening.n.02)
has_sense(be-2,be-2-sense)
is_a(be-2-sense,be.v.01)
has_sense(add-5,add-5-sense)
is_a(add-5-sense,add.v.01)
has_sense(salt-6,salt-6-sense)
is_a(salt-6-sense,salt.n.02)
has_sense(sodium_nitrate-8,sodium_nitrate-8-sense)
is_a(sodium_nitrate-8-sense,sodium_nitrate.n.01)
has_sense(saltpetre-10,saltpetre-10-sense)
is_a(saltpetre-10-sense,potassium_nitrate.n.01)
has_sense(nitrite-12,nitrite-12-sense)
is_a(nitrite-12-sense,nitrite.n.01)
has_sense(sometimes-14,sometimes-14-sense)
is_a(sometimes-14-sense,sometimes.r.01)
has_sense(sugar-15,sugar-15-sense)
is_a(sugar-15-sense,sugar.n.01)
has_sense(seasoning-17,seasoning-17-sense)
is_a(seasoning-17-sense,flavorer.n.01)
has_sense(phosphate-19,phosphate-19-sense)
is_a(phosphate-19-sense,phosphate.n.01)
has_sense(pork-23,pork-23-sense)
is_a(pork-23-sense,pork.n.01)
has_sense(preservation-25,preservation-25-sense)
is_a(preservation-25-sense,preservation.n.03)
has_sense(flavor-30,flavor-30-sense)
is_a(flavor-30-sense,relish.n.03)
has_sense(enhancement-31,enhancement-31-sense)
is_a(enhancement-31-sense,enhancement.n.01)
root(ROOT-0, curing-1)
dep(curing-1, be-2)
advmod(add-5, when-3)
nsubj(add-5, you-4)
advcl(be-2, add-5)
nsubj(seasoning-17, salt-6)
conj_or(salt-6, sodium_nitrate-8)
conj_or(salt-6, saltpetre-10)
amod(sugar-15, nitrite-12)
cc(nitrite-12, and-13)
advmod(nitrite-12, sometimes-14)
appos(salt-6, sugar-15)
xcomp(add-5, seasoning-17)
conj_and(seasoning-17, phosphate-19)
conj_and(seasoning-17, ascorbates-21)
prep_to(add-5, pork-23)
prep_for(pork-23, preservation-25)
nn(development-28, color-27)
conj_and(preservation-25, development-28)
nn(enhancement-31, flavor-30)
conj_and(preservation-25, enhancement-31)
has_pos(curing-1,VB)
has_pos(be-2,VB)
has_pos(when-3,WRB)
has_pos(you-4,PRP)
has_pos(add-5,VBP)
has_pos(salt-6,NN)
has_pos(sodium_nitrate-8,NN)
has_pos(saltpetre-10,NN)
has_pos(nitrite-12,JJ)
has_pos(and-13,CC)
has_pos(sometimes-14,RB)
has_pos(sugar-15,NN)
has_pos(seasoning-17,JJ)
has_pos(phosphate-19,JJ)
has_pos(ascorbates-21,JJ)
has_pos(pork-23,NN)
has_pos(preservation-25,NN)
has_pos(color-27,NN)
has_pos(development-28,NN)
has_pos(flavor-30,NN)
has_pos(enhancement-31,NN)
has_sense(and-13, null)
has_sense(you-4, null)
has_sense(ascorbates-21, null)
has_sense(when-3, null)
has_sense(development-28, null)
has_sense(color-27, null)
---
// heat oil in a saucepan and add the onion .
has_sense(heat-1,heat-1-sense)
is_a(heat-1-sense,heat.v.01)
has_sense(oil-2,oil-2-sense)
is_a(oil-2-sense,vegetable_oil.n.01)
has_sense(saucepan-5,saucepan-5-sense)
is_a(saucepan-5-sense,saucepan.n.01)
has_sense(add-7,add-7-sense)
is_a(add-7-sense,add.v.01)
has_sense(onion-9,onion-9-sense)
is_a(onion-9-sense,onion.n.03)
root(ROOT-0, heat-1)
dobj(heat-1, oil-2)
det(saucepan-5, a-4)
prep_in(heat-1, saucepan-5)
conj_and(heat-1, add-7)
det(onion-9, the-8)
dobj(add-7, onion-9)
has_pos(heat-1,VB)
has_pos(oil-2,NN)
has_pos(a-4,DT)
has_pos(saucepan-5,NN)
has_pos(add-7,VB)
has_pos(the-8,DT)
has_pos(onion-9,NN)
has_sense(the-8, null)
has_sense(a-4, null)
---
// then add the top slice right away .
has_sense(then-1,then-1-sense)
is_a(then-1-sense,then.r.01)
has_sense(add-2,add-2-sense)
is_a(add-2-sense,add.v.01)
has_sense(top-4,top-4-sense)
is_a(top-4-sense,top.a.01)
has_sense(slice-5,slice-5-sense)
is_a(slice-5-sense,piece.n.08)
has_sense(right-6,right-6-sense)
is_a(right-6-sense,right.r.02)
advmod(add-2, then-1)
root(ROOT-0, add-2)
det(slice-5, the-3)
amod(slice-5, top-4)
dobj(add-2, slice-5)
advmod(away-7, right-6)
advmod(add-2, away-7)
has_pos(then-1,RB)
has_pos(add-2,VB)
has_pos(the-3,DT)
has_pos(top-4,JJ)
has_pos(slice-5,NN)
has_pos(right-6,RB)
has_pos(away-7,RB)
has_sense(away-7, null)
has_sense(the-3, null)
---
// When this be absorb , add the next cup of stock .
has_sense(be-3,be-3-sense)
is_a(be-3-sense,be.v.01)
has_sense(absorb-4,absorb-4-sense)
is_a(absorb-4-sense,absorb.v.06)
has_sense(add-6,add-6-sense)
is_a(add-6-sense,add.v.01)
has_sense(next-8,next-8-sense)
is_a(next-8-sense,following.s.02)
has_sense(cup-9,cup-9-sense)
is_a(cup-9-sense,cup.n.04)
has_sense(stock-11,stock-11-sense)
is_a(stock-11-sense,broth.n.01)
advmod(absorb-4, When-1)
nsubjpass(absorb-4, this-2)
auxpass(absorb-4, be-3)
advcl(add-6, absorb-4)
root(ROOT-0, add-6)
det(cup-9, the-7)
amod(cup-9, next-8)
dobj(add-6, cup-9)
prep_of(cup-9, stock-11)
has_pos(When-1,WRB)
has_pos(this-2,DT)
has_pos(be-3,VB)
has_pos(absorb-4,VBN)
has_pos(add-6,VB)
has_pos(the-7,DT)
has_pos(next-8,JJ)
has_pos(cup-9,NN)
has_pos(stock-11,NN)
has_sense(the-7, null)
has_sense(When-1, null)
has_sense(this-2, null)
---
// add the flour approximately 1 tablespoonful at a time .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(flour-3,flour-3-sense)
is_a(flour-3-sense,flour.n.01)
has_sense(approximately-4,approximately-4-sense)
is_a(approximately-4-sense,approximately.r.01)
has_sense(tablespoonful-6,tablespoonful-6-sense)
is_a(tablespoonful-6-sense,tablespoon.n.01)
has_sense(time-9,time-9-sense)
is_a(time-9-sense,time.n.01)
root(ROOT-0, add-1)
det(flour-3, the-2)
dobj(add-1, flour-3)
quantmod(1-5, approximately-4)
num(tablespoonful-6, 1-5)
npadvmod(at-7, tablespoonful-6)
advmod(add-1, at-7)
det(time-9, a-8)
pobj(at-7, time-9)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(flour-3,NN)
has_pos(approximately-4,RB)
has_pos(1-5,CD)
has_pos(tablespoonful-6,NN)
has_pos(at-7,IN)
has_pos(a-8,DT)
has_pos(time-9,NN)
has_sense(a-8, null)
has_sense(at-7, null)
has_sense(1-5, null)
has_sense(the-2, null)
---
// add the remaining components and whisk until smooth .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(whisk-6,whisk-6-sense)
is_a(whisk-6-sense,whisk.v.04)
has_sense(smooth-8,smooth-8-sense)
is_a(smooth-8-sense,smooth.a.01)
root(ROOT-0, add-1)
det(components-4, the-2)
amod(components-4, remaining-3)
dobj(add-1, components-4)
conj_and(add-1, whisk-6)
prep_until(whisk-6, smooth-8)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(remaining-3,VBG)
has_pos(components-4,NNS)
has_pos(whisk-6,VB)
has_pos(smooth-8,JJ)
has_sense(the-2, null)
has_sense(remaining-3, null)
has_sense(components-4, null)
---
// turn the heat down to medium , and add the butter .
has_sense(turn-1,turn-1-sense)
is_a(turn-1-sense,turn.v.22)
has_sense(heat-3,heat-3-sense)
is_a(heat-3-sense,hotness.n.01)
has_sense(add-9,add-9-sense)
is_a(add-9-sense,add.v.01)
has_sense(butter-11,butter-11-sense)
is_a(butter-11-sense,butter.n.01)
root(ROOT-0, turn-1)
det(heat-3, the-2)
dobj(turn-1, heat-3)
prt(turn-1, down-4)
prep_to(turn-1, medium-6)
conj_and(turn-1, add-9)
det(butter-11, the-10)
dobj(add-9, butter-11)
has_pos(turn-1,VB)
has_pos(the-2,DT)
has_pos(heat-3,NN)
has_pos(down-4,RP)
has_pos(medium-6,NN)
has_pos(add-9,VB)
has_pos(the-10,DT)
has_pos(butter-11,NN)
has_sense(down-4, null)
has_sense(the-2, null)
has_sense(medium-6, null)
has_sense(the-10, null)
---
// just add 1 cup of flour to start .
has_sense(just-1,just-1-sense)
is_a(just-1-sense,merely.r.01)
has_sense(add-2,add-2-sense)
is_a(add-2-sense,add.v.01)
has_sense(flour-6,flour-6-sense)
is_a(flour-6-sense,flour.n.01)
has_sense(start-8,start-8-sense)
is_a(start-8-sense,get_down.v.07)
advmod(add-2, just-1)
root(ROOT-0, add-2)
num(cup-4, 1-3)
dobj(add-2, cup-4)
prep_of(cup-4, flour-6)
aux(start-8, to-7)
xcomp(add-2, start-8)
has_pos(just-1,RB)
has_pos(add-2,VB)
has_pos(1-3,CD)
has_pos(cup-4,NN)
has_pos(flour-6,NN)
has_pos(to-7,TO)
has_pos(start-8,VB)
has_sense(1-3, null)
has_sense(to-7, null)
has_sense(cup-4, null)
---
// add half the crumb mixture to filling .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(crumb-4,crumb-4-sense)
is_a(crumb-4-sense,crumb.n.03)
has_sense(mixture-5,mixture-5-sense)
is_a(mixture-5-sense,concoction.n.01)
has_sense(filling-7,filling-7-sense)
is_a(filling-7-sense,filling.n.03)
root(ROOT-0, add-1)
predet(mixture-5, half-2)
det(mixture-5, the-3)
amod(mixture-5, crumb-4)
dobj(add-1, mixture-5)
prep_to(add-1, filling-7)
has_pos(add-1,VB)
has_pos(half-2,PDT)
has_pos(the-3,DT)
has_pos(crumb-4,JJ)
has_pos(mixture-5,NN)
has_pos(filling-7,NN)
has_sense(half-2, null)
has_sense(the-3, null)
---
// add salt and pepper to taste .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(salt-2,salt-2-sense)
is_a(salt-2-sense,salt.n.02)
has_sense(pepper-4,pepper-4-sense)
is_a(pepper-4-sense,pepper.n.03)
has_sense(taste-6,taste-6-sense)
is_a(taste-6-sense,preference.n.01)
root(ROOT-0, add-1)
dobj(add-1, salt-2)
conj_and(salt-2, pepper-4)
prep_to(add-1, taste-6)
has_pos(add-1,VB)
has_pos(salt-2,NN)
has_pos(pepper-4,NN)
has_pos(taste-6,NN)
---
// Some people choose to add salt to the water .
has_sense(people-2,people-2-sense)
is_a(people-2-sense,people.n.01)
has_sense(choose-3,choose-3-sense)
is_a(choose-3-sense,choose.v.02)
has_sense(add-5,add-5-sense)
is_a(add-5-sense,add.v.01)
has_sense(salt-6,salt-6-sense)
is_a(salt-6-sense,salt.n.02)
has_sense(water-9,water-9-sense)
is_a(water-9-sense,water.n.06)
det(people-2, Some-1)
nsubj(choose-3, people-2)
root(ROOT-0, choose-3)
aux(add-5, to-4)
xcomp(choose-3, add-5)
dobj(add-5, salt-6)
det(water-9, the-8)
prep_to(add-5, water-9)
has_pos(Some-1,DT)
has_pos(people-2,NNS)
has_pos(choose-3,VBP)
has_pos(to-4,TO)
has_pos(add-5,VB)
has_pos(salt-6,NN)
has_pos(the-8,DT)
has_pos(water-9,NN)
has_sense(Some-1, null)
has_sense(the-8, null)
has_sense(to-4, null)
---
// sift the flour and baking_powder together and add to the creamed butter mixture .
has_sense(sift-1,sift-1-sense)
is_a(sift-1-sense,sift.v.02)
has_sense(flour-3,flour-3-sense)
is_a(flour-3-sense,flour.n.01)
has_sense(baking_powder-5,baking_powder-5-sense)
is_a(baking_powder-5-sense,baking_powder.n.01)
has_sense(together-6,together-6-sense)
is_a(together-6-sense,together.r.01)
has_sense(add-8,add-8-sense)
is_a(add-8-sense,add.v.01)
has_sense(butter-12,butter-12-sense)
is_a(butter-12-sense,butter.n.01)
has_sense(mixture-13,mixture-13-sense)
is_a(mixture-13-sense,concoction.n.01)
root(ROOT-0, sift-1)
det(flour-3, the-2)
dobj(sift-1, flour-3)
conj_and(flour-3, baking_powder-5)
advmod(sift-1, together-6)
conj_and(sift-1, add-8)
det(mixture-13, the-10)
amod(mixture-13, creamed-11)
nn(mixture-13, butter-12)
prep_to(add-8, mixture-13)
has_pos(sift-1,VB)
has_pos(the-2,DT)
has_pos(flour-3,NN)
has_pos(baking_powder-5,NN)
has_pos(together-6,RB)
has_pos(add-8,VB)
has_pos(the-10,DT)
has_pos(creamed-11,JJ)
has_pos(butter-12,NN)
has_pos(mixture-13,NN)
has_sense(the-2, null)
has_sense(creamed-11, null)
has_sense(the-10, null)
---
// When water be boil , add pasta to the water and turn the heat up high .
has_sense(water-2,water-2-sense)
is_a(water-2-sense,water.n.01)
has_sense(be-3,be-3-sense)
is_a(be-3-sense,be.v.01)
has_sense(boil-4,boil-4-sense)
is_a(boil-4-sense,boil.v.03)
has_sense(add-6,add-6-sense)
is_a(add-6-sense,add.v.01)
has_sense(pasta-7,pasta-7-sense)
is_a(pasta-7-sense,pasta.n.02)
has_sense(water-10,water-10-sense)
is_a(water-10-sense,water.n.06)
has_sense(turn-12,turn-12-sense)
is_a(turn-12-sense,turn.v.22)
has_sense(up-15,up-15-sense)
is_a(up-15-sense,up.r.02)
has_sense(high-16,high-16-sense)
is_a(high-16-sense,high.a.01)
advmod(boil-4, When-1)
nsubjpass(boil-4, water-2)
auxpass(boil-4, be-3)
advcl(add-6, boil-4)
root(ROOT-0, add-6)
dobj(add-6, pasta-7)
det(water-10, the-9)
prep_to(add-6, water-10)
conj_and(add-6, turn-12)
det(heat-14, the-13)
dobj(turn-12, heat-14)
advmod(high-16, up-15)
advmod(turn-12, high-16)
has_pos(When-1,WRB)
has_pos(water-2,NN)
has_pos(be-3,VB)
has_pos(boil-4,VBN)
has_pos(add-6,VB)
has_pos(pasta-7,NN)
has_pos(the-9,DT)
has_pos(water-10,NN)
has_pos(turn-12,VB)
has_pos(the-13,DT)
has_pos(heat-14,NN)
has_pos(up-15,RB)
has_pos(high-16,JJ)
has_sense(heat-14, null)
has_sense(When-1, null)
has_sense(the-9, null)
has_sense(the-13, null)
---
// You can add whip cream at this step .
has_sense(add-3,add-3-sense)
is_a(add-3-sense,add.v.01)
has_sense(cream-5,cream-5-sense)
is_a(cream-5-sense,cream.n.02)
has_sense(step-8,step-8-sense)
is_a(step-8-sense,measure.n.01)
nsubj(add-3, You-1)
aux(add-3, can-2)
root(ROOT-0, add-3)
nn(cream-5, whip-4)
dobj(add-3, cream-5)
det(step-8, this-7)
prep_at(add-3, step-8)
has_pos(You-1,PRP)
has_pos(can-2,MD)
has_pos(add-3,VB)
has_pos(whip-4,NN)
has_pos(cream-5,NN)
has_pos(this-7,DT)
has_pos(step-8,NN)
has_sense(You-1, null)
has_sense(this-7, null)
has_sense(can-2, null)
has_sense(whip-4, null)
---
// add the water , beer , and vinegar .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(water-3,water-3-sense)
is_a(water-3-sense,water.n.06)
has_sense(beer-5,beer-5-sense)
is_a(beer-5-sense,beer.n.01)
has_sense(vinegar-8,vinegar-8-sense)
is_a(vinegar-8-sense,vinegar.n.01)
root(ROOT-0, add-1)
det(water-3, the-2)
dobj(add-1, water-3)
conj_and(water-3, beer-5)
conj_and(water-3, vinegar-8)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(water-3,NN)
has_pos(beer-5,NN)
has_pos(vinegar-8,NN)
has_sense(the-2, null)
---
// add 2 tablespoon of the exist yogurt , or add the freeze-dried bacteria .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(tablespoon-3,tablespoon-3-sense)
is_a(tablespoon-3-sense,tablespoon.n.01)
has_sense(exist-6,exist-6-sense)
is_a(exist-6-sense,exist.v.01)
has_sense(yogurt-7,yogurt-7-sense)
is_a(yogurt-7-sense,yogurt.n.01)
has_sense(add-10,add-10-sense)
is_a(add-10-sense,add.v.01)
has_sense(freeze-dried-12,freeze-dried-12-sense)
is_a(freeze-dried-12-sense,freeze-dried.s.02)
has_sense(bacteria-13,bacteria-13-sense)
is_a(bacteria-13-sense,bacteria.n.01)
root(ROOT-0, add-1)
num(tablespoon-3, 2-2)
dobj(add-1, tablespoon-3)
det(yogurt-7, the-5)
amod(yogurt-7, exist-6)
prep_of(tablespoon-3, yogurt-7)
conj_or(add-1, add-10)
det(bacteria-13, the-11)
amod(bacteria-13, freeze-dried-12)
dobj(add-10, bacteria-13)
has_pos(add-1,VB)
has_pos(2-2,CD)
has_pos(tablespoon-3,NN)
has_pos(the-5,DT)
has_pos(exist-6,JJ)
has_pos(yogurt-7,NN)
has_pos(add-10,VB)
has_pos(the-11,DT)
has_pos(freeze-dried-12,JJ)
has_pos(bacteria-13,NNS)
has_sense(2-2, null)
has_sense(the-5, null)
has_sense(the-11, null)
---
// add more charcoal , wood chips or water as need .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(more-2,more-2-sense)
is_a(more-2-sense,more.a.01)
has_sense(charcoal-3,charcoal-3-sense)
is_a(charcoal-3-sense,charcoal.n.01)
has_sense(wood-5,wood-5-sense)
is_a(wood-5-sense,wood.n.01)
has_sense(water-8,water-8-sense)
is_a(water-8-sense,water.n.06)
has_sense(as-9,as-9-sense)
is_a(as-9-sense,equally.r.01)
has_sense(need-10,need-10-sense)
is_a(need-10-sense,necessitate.v.01)
root(ROOT-0, add-1)
amod(charcoal-3, more-2)
dobj(add-1, charcoal-3)
nn(chips-6, wood-5)
conj_or(charcoal-3, chips-6)
conj_or(charcoal-3, water-8)
prep_as(add-1, need-10)
has_pos(add-1,VB)
has_pos(more-2,JJR)
has_pos(charcoal-3,NN)
has_pos(wood-5,NN)
has_pos(chips-6,NNS)
has_pos(water-8,NN)
has_pos(need-10,NN)
has_sense(chips-6, null)
---
// add any fruit or chocolate chips you 'd like to add at this time .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(fruit-3,fruit-3-sense)
is_a(fruit-3-sense,fruit.n.01)
has_sense(chocolate-5,chocolate-5-sense)
is_a(chocolate-5-sense,chocolate.n.02)
has_sense(like-9,like-9-sense)
is_a(like-9-sense,wish.v.02)
has_sense(add-11,add-11-sense)
is_a(add-11-sense,add.v.01)
has_sense(time-14,time-14-sense)
is_a(time-14-sense,time.n.04)
root(ROOT-0, add-1)
det(chips-6, any-2)
nn(chips-6, fruit-3)
conj_or(fruit-3, chocolate-5)
dobj(add-1, chips-6)
nsubj(like-9, you-7)
aux(like-9, 'd-8)
dep(add-1, like-9)
aux(add-11, to-10)
xcomp(like-9, add-11)
det(time-14, this-13)
prep_at(add-11, time-14)
has_pos(add-1,VB)
has_pos(any-2,DT)
has_pos(fruit-3,NN)
has_pos(chocolate-5,NN)
has_pos(chips-6,NNS)
has_pos(you-7,PRP)
has_pos('d-8,MD)
has_pos(like-9,VB)
has_pos(to-10,TO)
has_pos(add-11,VB)
has_pos(this-13,DT)
has_pos(time-14,NN)
has_sense(you-7, null)
has_sense(chips-6, null)
has_sense('d-8, null)
has_sense(this-13, null)
has_sense(to-10, null)
has_sense(any-2, null)
---
// add salt to the water , then add the pasta , and stir .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(salt-2,salt-2-sense)
is_a(salt-2-sense,salt.n.02)
has_sense(water-5,water-5-sense)
is_a(water-5-sense,water.n.06)
has_sense(then-7,then-7-sense)
is_a(then-7-sense,then.r.01)
has_sense(add-8,add-8-sense)
is_a(add-8-sense,add.v.01)
has_sense(pasta-10,pasta-10-sense)
is_a(pasta-10-sense,pasta.n.02)
has_sense(stir-13,stir-13-sense)
is_a(stir-13-sense,stir.v.01)
root(ROOT-0, add-1)
dobj(add-1, salt-2)
det(water-5, the-4)
prep_to(add-1, water-5)
advmod(add-8, then-7)
conj_and(add-1, add-8)
det(pasta-10, the-9)
dobj(add-8, pasta-10)
conj_and(add-1, stir-13)
has_pos(add-1,VB)
has_pos(salt-2,NN)
has_pos(the-4,DT)
has_pos(water-5,NN)
has_pos(then-7,RB)
has_pos(add-8,VB)
has_pos(the-9,DT)
has_pos(pasta-10,NN)
has_pos(stir-13,VB)
has_sense(the-9, null)
has_sense(the-4, null)
---
// open and drain water from a can of pea and add pea to a bowl .
has_sense(open-1,open-1-sense)
is_a(open-1-sense,open.v.01)
has_sense(drain-3,drain-3-sense)
is_a(drain-3-sense,drain.v.03)
has_sense(water-4,water-4-sense)
is_a(water-4-sense,water.n.06)
has_sense(can-7,can-7-sense)
is_a(can-7-sense,can.n.01)
has_sense(pea-9,pea-9-sense)
is_a(pea-9-sense,pea.n.01)
has_sense(add-11,add-11-sense)
is_a(add-11-sense,add.v.01)
has_sense(pea-12,pea-12-sense)
is_a(pea-12-sense,pea.n.01)
has_sense(bowl-15,bowl-15-sense)
is_a(bowl-15-sense,bowl.n.01)
root(ROOT-0, open-1)
conj_and(open-1, drain-3)
dobj(open-1, water-4)
det(can-7, a-6)
prep_from(open-1, can-7)
prep_of(can-7, pea-9)
conj_and(open-1, add-11)
dobj(add-11, pea-12)
det(bowl-15, a-14)
prep_to(add-11, bowl-15)
has_pos(open-1,VB)
has_pos(drain-3,VB)
has_pos(water-4,NN)
has_pos(a-6,DT)
has_pos(can-7,NN)
has_pos(pea-9,NN)
has_pos(add-11,VB)
has_pos(pea-12,NN)
has_pos(a-14,DT)
has_pos(bowl-15,NN)
has_sense(a-14, null)
has_sense(a-6, null)
---
// chop chicken into appropriate size and add into finished corn .
has_sense(chop-1,chop-1-sense)
is_a(chop-1-sense,chop.v.01)
has_sense(chicken-2,chicken-2-sense)
is_a(chicken-2-sense,chicken.n.01)
has_sense(appropriate-4,appropriate-4-sense)
is_a(appropriate-4-sense,appropriate.a.01)
has_sense(size-5,size-5-sense)
is_a(size-5-sense,size.n.01)
has_sense(add-7,add-7-sense)
is_a(add-7-sense,add.v.01)
has_sense(finished-9,finished-9-sense)
is_a(finished-9-sense,finished.a.01)
has_sense(corn-10,corn-10-sense)
is_a(corn-10-sense,corn.n.02)
root(ROOT-0, chop-1)
dobj(chop-1, chicken-2)
amod(size-5, appropriate-4)
prep_into(chop-1, size-5)
conj_and(chop-1, add-7)
amod(corn-10, finished-9)
prep_into(add-7, corn-10)
has_pos(chop-1,VB)
has_pos(chicken-2,NN)
has_pos(appropriate-4,JJ)
has_pos(size-5,NN)
has_pos(add-7,VB)
has_pos(finished-9,JJ)
has_pos(corn-10,NN)
---
// When warm enough to saute , add the chopped onion , garlic and rice .
has_sense(warm-2,warm-2-sense)
is_a(warm-2-sense,warm.a.01)
has_sense(enough-3,enough-3-sense)
is_a(enough-3-sense,enough.n.01)
has_sense(saute-5,saute-5-sense)
is_a(saute-5-sense,saute.v.01)
has_sense(add-7,add-7-sense)
is_a(add-7-sense,add.v.01)
has_sense(chopped-9,chopped-9-sense)
is_a(chopped-9-sense,chopped.s.01)
has_sense(onion-10,onion-10-sense)
is_a(onion-10-sense,onion.n.03)
has_sense(garlic-12,garlic-12-sense)
is_a(garlic-12-sense,garlic.n.02)
has_sense(rice-14,rice-14-sense)
is_a(rice-14-sense,rice.n.01)
advmod(saute-5, When-1)
amod(enough-3, warm-2)
nsubj(saute-5, enough-3)
aux(saute-5, to-4)
dep(add-7, saute-5)
root(ROOT-0, add-7)
det(onion-10, the-8)
amod(onion-10, chopped-9)
dobj(add-7, onion-10)
conj_and(onion-10, garlic-12)
conj_and(onion-10, rice-14)
has_pos(When-1,WRB)
has_pos(warm-2,JJ)
has_pos(enough-3,NN)
has_pos(to-4,TO)
has_pos(saute-5,VB)
has_pos(add-7,VB)
has_pos(the-8,DT)
has_pos(chopped-9,JJ)
has_pos(onion-10,NN)
has_pos(garlic-12,NN)
has_pos(rice-14,NN)
has_sense(When-1, null)
has_sense(to-4, null)
has_sense(the-8, null)
---
// When the pan be warm enough , add a little oil .
has_sense(pan-3,pan-3-sense)
is_a(pan-3-sense,pan.n.01)
has_sense(be-4,be-4-sense)
is_a(be-4-sense,be.v.01)
has_sense(warm-5,warm-5-sense)
is_a(warm-5-sense,warm.a.01)
has_sense(enough-6,enough-6-sense)
is_a(enough-6-sense,enough.r.01)
has_sense(add-8,add-8-sense)
is_a(add-8-sense,add.v.01)
has_sense(little-10,little-10-sense)
is_a(little-10-sense,small.a.01)
has_sense(oil-11,oil-11-sense)
is_a(oil-11-sense,vegetable_oil.n.01)
advmod(warm-5, When-1)
det(pan-3, the-2)
nsubj(warm-5, pan-3)
cop(warm-5, be-4)
advcl(add-8, warm-5)
advmod(warm-5, enough-6)
root(ROOT-0, add-8)
det(oil-11, a-9)
amod(oil-11, little-10)
dobj(add-8, oil-11)
has_pos(When-1,WRB)
has_pos(the-2,DT)
has_pos(pan-3,NN)
has_pos(be-4,VB)
has_pos(warm-5,JJ)
has_pos(enough-6,RB)
has_pos(add-8,VB)
has_pos(a-9,DT)
has_pos(little-10,JJ)
has_pos(oil-11,NN)
has_sense(When-1, null)
has_sense(a-9, null)
has_sense(the-2, null)
---
// add about four tablespoon of sauce .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(about-2,about-2-sense)
is_a(about-2-sense,approximately.r.01)
has_sense(tablespoon-4,tablespoon-4-sense)
is_a(tablespoon-4-sense,tablespoon.n.01)
has_sense(sauce-6,sauce-6-sense)
is_a(sauce-6-sense,sauce.n.01)
root(ROOT-0, add-1)
quantmod(four-3, about-2)
num(tablespoon-4, four-3)
dobj(add-1, tablespoon-4)
prep_of(tablespoon-4, sauce-6)
has_pos(add-1,VB)
has_pos(about-2,RB)
has_pos(four-3,CD)
has_pos(tablespoon-4,NN)
has_pos(sauce-6,NN)
has_sense(four-3, null)
---
// add the starter .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
root(ROOT-0, add-1)
det(starter-3, the-2)
dobj(add-1, starter-3)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(starter-3,JJ)
has_sense(starter-3, null)
has_sense(the-2, null)
---
// You can now add salt or any other spice of your liking .
has_sense(now-3,now-3-sense)
is_a(now-3-sense,now.r.04)
has_sense(add-4,add-4-sense)
is_a(add-4-sense,add.v.01)
has_sense(salt-5,salt-5-sense)
is_a(salt-5-sense,salt.n.02)
has_sense(other-8,other-8-sense)
is_a(other-8-sense,other.a.01)
has_sense(spice-9,spice-9-sense)
is_a(spice-9-sense,spice.n.02)
has_sense(liking-12,liking-12-sense)
is_a(liking-12-sense,liking.n.01)
nsubj(add-4, You-1)
aux(add-4, can-2)
advmod(add-4, now-3)
root(ROOT-0, add-4)
dobj(add-4, salt-5)
det(spice-9, any-7)
amod(spice-9, other-8)
conj_or(salt-5, spice-9)
poss(liking-12, your-11)
prep_of(spice-9, liking-12)
has_pos(You-1,PRP)
has_pos(can-2,MD)
has_pos(now-3,RB)
has_pos(add-4,VB)
has_pos(salt-5,NN)
has_pos(any-7,DT)
has_pos(other-8,JJ)
has_pos(spice-9,NN)
has_pos(your-11,PRP$)
has_pos(liking-12,NN)
has_sense(You-1, null)
has_sense(any-7, null)
has_sense(can-2, null)
has_sense(your-11, null)
---
// Juice lemon and add to mixture .
has_sense(lemon-2,lemon-2-sense)
is_a(lemon-2-sense,lemon.n.01)
has_sense(add-4,add-4-sense)
is_a(add-4-sense,add.v.01)
has_sense(mixture-6,mixture-6-sense)
is_a(mixture-6-sense,concoction.n.01)
nsubj(lemon-2, Juice-1)
root(ROOT-0, lemon-2)
conj_and(lemon-2, add-4)
prep_to(lemon-2, mixture-6)
has_pos(Juice-1,NNP)
has_pos(lemon-2,VBP)
has_pos(add-4,VBP)
has_pos(mixture-6,NN)
has_sense(Juice-1, null)
---
// add the steak to the hot pan and quickly brown it on both side .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(steak-3,steak-3-sense)
is_a(steak-3-sense,steak.n.01)
has_sense(hot-6,hot-6-sense)
is_a(hot-6-sense,hot.a.01)
has_sense(pan-7,pan-7-sense)
is_a(pan-7-sense,pan.n.01)
has_sense(quickly-9,quickly-9-sense)
is_a(quickly-9-sense,promptly.r.01)
has_sense(brown-10,brown-10-sense)
is_a(brown-10-sense,brown.v.01)
has_sense(side-14,side-14-sense)
is_a(side-14-sense,side.n.04)
root(ROOT-0, add-1)
det(steak-3, the-2)
dobj(add-1, steak-3)
det(pan-7, the-5)
amod(pan-7, hot-6)
prep_to(add-1, pan-7)
advmod(brown-10, quickly-9)
conj_and(add-1, brown-10)
dobj(brown-10, it-11)
det(side-14, both-13)
prep_on(brown-10, side-14)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(steak-3,NN)
has_pos(the-5,DT)
has_pos(hot-6,JJ)
has_pos(pan-7,NN)
has_pos(quickly-9,RB)
has_pos(brown-10,VBG)
has_pos(it-11,PRP)
has_pos(both-13,DT)
has_pos(side-14,NN)
has_sense(the-5, null)
has_sense(the-2, null)
has_sense(it-11, null)
has_sense(both-13, null)
---
// If you prefer a thick smoothie , just add more banana .
has_sense(prefer-3,prefer-3-sense)
is_a(prefer-3-sense,prefer.v.01)
has_sense(thick-5,thick-5-sense)
is_a(thick-5-sense,thick.a.03)
has_sense(smoothie-6,smoothie-6-sense)
is_a(smoothie-6-sense,smoothie.n.02)
has_sense(just-8,just-8-sense)
is_a(just-8-sense,merely.r.01)
has_sense(add-9,add-9-sense)
is_a(add-9-sense,add.v.01)
has_sense(more-10,more-10-sense)
is_a(more-10-sense,more.a.02)
has_sense(banana-11,banana-11-sense)
is_a(banana-11-sense,banana.n.02)
mark(prefer-3, If-1)
nsubj(prefer-3, you-2)
advcl(add-9, prefer-3)
det(smoothie-6, a-4)
amod(smoothie-6, thick-5)
dobj(prefer-3, smoothie-6)
advmod(add-9, just-8)
root(ROOT-0, add-9)
amod(banana-11, more-10)
dobj(add-9, banana-11)
has_pos(If-1,IN)
has_pos(you-2,PRP)
has_pos(prefer-3,VBP)
has_pos(a-4,DT)
has_pos(thick-5,JJ)
has_pos(smoothie-6,NN)
has_pos(just-8,RB)
has_pos(add-9,VB)
has_pos(more-10,JJR)
has_pos(banana-11,NN)
has_sense(If-1, null)
has_sense(you-2, null)
has_sense(a-4, null)
---
// sift in the flour and add the remaining dry ingredient .
has_sense(sift-1,sift-1-sense)
is_a(sift-1-sense,sift.v.02)
has_sense(flour-4,flour-4-sense)
is_a(flour-4-sense,flour.n.01)
has_sense(add-6,add-6-sense)
is_a(add-6-sense,add.v.01)
has_sense(remaining-8,remaining-8-sense)
is_a(remaining-8-sense,leftover.s.01)
has_sense(dry-9,dry-9-sense)
is_a(dry-9-sense,dry.a.01)
has_sense(ingredient-10,ingredient-10-sense)
is_a(ingredient-10-sense,ingredient.n.03)
root(ROOT-0, sift-1)
det(flour-4, the-3)
prep_in(sift-1, flour-4)
conj_and(sift-1, add-6)
det(ingredient-10, the-7)
amod(ingredient-10, remaining-8)
amod(ingredient-10, dry-9)
dobj(add-6, ingredient-10)
has_pos(sift-1,VB)
has_pos(the-3,DT)
has_pos(flour-4,NN)
has_pos(add-6,VB)
has_pos(the-7,DT)
has_pos(remaining-8,VBG)
has_pos(dry-9,JJ)
has_pos(ingredient-10,NN)
has_sense(the-7, null)
has_sense(the-3, null)
---
// You can add asparagus at this stage as it does n't take as long to cook .
has_sense(add-3,add-3-sense)
is_a(add-3-sense,add.v.01)
has_sense(asparagus-4,asparagus-4-sense)
is_a(asparagus-4-sense,asparagus.n.02)
has_sense(stage-7,stage-7-sense)
is_a(stage-7-sense,phase.n.01)
has_sense(take-12,take-12-sense)
is_a(take-12-sense,take.v.02)
has_sense(as-13,as-13-sense)
is_a(as-13-sense,equally.r.01)
has_sense(long-14,long-14-sense)
is_a(long-14-sense,long.r.01)
has_sense(cook-16,cook-16-sense)
is_a(cook-16-sense,cook.v.02)
nsubj(add-3, You-1)
aux(add-3, can-2)
root(ROOT-0, add-3)
dobj(add-3, asparagus-4)
det(stage-7, this-6)
prep_at(add-3, stage-7)
mark(take-12, as-8)
nsubj(take-12, it-9)
aux(take-12, does-10)
neg(take-12, n't-11)
advcl(add-3, take-12)
advmod(long-14, as-13)
advmod(take-12, long-14)
aux(cook-16, to-15)
xcomp(take-12, cook-16)
has_pos(You-1,PRP)
has_pos(can-2,MD)
has_pos(add-3,VB)
has_pos(asparagus-4,NNS)
has_pos(this-6,DT)
has_pos(stage-7,NN)
has_pos(as-8,IN)
has_pos(it-9,PRP)
has_pos(does-10,VBZ)
has_pos(n't-11,RB)
has_pos(take-12,VB)
has_pos(as-13,RB)
has_pos(long-14,RB)
has_pos(to-15,TO)
has_pos(cook-16,VB)
has_sense(as-8, null)
has_sense(You-1, null)
has_sense(this-6, null)
has_sense(does-10, null)
has_sense(n't-11, null)
has_sense(to-15, null)
has_sense(can-2, null)
has_sense(it-9, null)
---
// add mayonnaise and gently stir salad until mixed .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(mayonnaise-2,mayonnaise-2-sense)
is_a(mayonnaise-2-sense,mayonnaise.n.01)
has_sense(gently-4,gently-4-sense)
is_a(gently-4-sense,lightly.r.03)
has_sense(stir-5,stir-5-sense)
is_a(stir-5-sense,stir.v.01)
has_sense(salad-6,salad-6-sense)
is_a(salad-6-sense,salad.n.01)
root(ROOT-0, add-1)
dobj(add-1, mayonnaise-2)
advmod(stir-5, gently-4)
conj_and(add-1, stir-5)
dobj(stir-5, salad-6)
prep_until(stir-5, mixed-8)
has_pos(add-1,VB)
has_pos(mayonnaise-2,NN)
has_pos(gently-4,RB)
has_pos(stir-5,VB)
has_pos(salad-6,NN)
has_pos(mixed-8,JJ)
has_sense(mixed-8, null)
---
// do n't add oil to a cold pan .
has_sense(do-1,do-1-sense)
is_a(do-1-sense,perform.v.01)
has_sense(add-3,add-3-sense)
is_a(add-3-sense,add.v.01)
has_sense(oil-4,oil-4-sense)
is_a(oil-4-sense,vegetable_oil.n.01)
has_sense(cold-7,cold-7-sense)
is_a(cold-7-sense,cold.a.01)
has_sense(pan-8,pan-8-sense)
is_a(pan-8-sense,pan.n.01)
aux(add-3, do-1)
neg(add-3, n't-2)
root(ROOT-0, add-3)
dobj(add-3, oil-4)
det(pan-8, a-6)
amod(pan-8, cold-7)
prep_to(add-3, pan-8)
has_pos(do-1,VB)
has_pos(n't-2,RB)
has_pos(add-3,VB)
has_pos(oil-4,NN)
has_pos(a-6,DT)
has_pos(cold-7,JJ)
has_pos(pan-8,NN)
has_sense(n't-2, null)
has_sense(a-6, null)
---
// It 's not necessary to add more milk .
has_sense(not-3,not-3-sense)
is_a(not-3-sense,not.r.01)
has_sense(necessary-4,necessary-4-sense)
is_a(necessary-4-sense,necessary.a.01)
has_sense(add-6,add-6-sense)
is_a(add-6-sense,add.v.01)
has_sense(more-7,more-7-sense)
is_a(more-7-sense,more.a.01)
has_sense(milk-8,milk-8-sense)
is_a(milk-8-sense,milk.n.01)
nsubj(necessary-4, It-1)
cop(necessary-4, 's-2)
neg(necessary-4, not-3)
root(ROOT-0, necessary-4)
aux(add-6, to-5)
xcomp(necessary-4, add-6)
amod(milk-8, more-7)
dobj(add-6, milk-8)
has_pos(It-1,PRP)
has_pos('s-2,VBZ)
has_pos(not-3,RB)
has_pos(necessary-4,JJ)
has_pos(to-5,TO)
has_pos(add-6,VB)
has_pos(more-7,JJR)
has_pos(milk-8,NN)
has_sense('s-2, null)
has_sense(It-1, null)
has_sense(to-5, null)
---
// add this liquid mix to the stirred dry mix .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(liquid-3,liquid-3-sense)
is_a(liquid-3-sense,liquid.a.01)
has_sense(stirred-7,stirred-7-sense)
is_a(stirred-7-sense,stirred.s.03)
has_sense(dry-8,dry-8-sense)
is_a(dry-8-sense,dry.a.01)
has_sense(mix-9,mix-9-sense)
is_a(mix-9-sense,mix.n.01)
root(ROOT-0, add-1)
det(mix-4, this-2)
amod(mix-4, liquid-3)
dobj(add-1, mix-4)
det(mix-9, the-6)
amod(mix-9, stirred-7)
amod(mix-9, dry-8)
prep_to(add-1, mix-9)
has_pos(add-1,VB)
has_pos(this-2,DT)
has_pos(liquid-3,JJ)
has_pos(mix-4,NN)
has_pos(the-6,DT)
has_pos(stirred-7,JJ)
has_pos(dry-8,JJ)
has_pos(mix-9,NN)
has_sense(mix-4, null)
has_sense(the-6, null)
has_sense(this-2, null)
---
// add 1 cup sugar .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(cup-3,cup-3-sense)
is_a(cup-3-sense,cup.n.04)
has_sense(sugar-4,sugar-4-sense)
is_a(sugar-4-sense,sugar.n.01)
root(ROOT-0, add-1)
num(sugar-4, 1-2)
nn(sugar-4, cup-3)
dobj(add-1, sugar-4)
has_pos(add-1,VB)
has_pos(1-2,CD)
has_pos(cup-3,NN)
has_pos(sugar-4,NN)
has_sense(1-2, null)
---
// add your topping .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(topping-3,topping-3-sense)
is_a(topping-3-sense,topping.n.01)
root(ROOT-0, add-1)
poss(topping-3, your-2)
dobj(add-1, topping-3)
has_pos(add-1,VB)
has_pos(your-2,PRP$)
has_pos(topping-3,NN)
has_sense(your-2, null)
---
// add 15 briquette to the fire each hour of cooking .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(briquette-3,briquette-3-sense)
is_a(briquette-3-sense,briquette.n.01)
has_sense(fire-6,fire-6-sense)
is_a(fire-6-sense,fire.n.07)
has_sense(hour-8,hour-8-sense)
is_a(hour-8-sense,hour.n.01)
has_sense(cooking-10,cooking-10-sense)
is_a(cooking-10-sense,cooking.n.01)
root(ROOT-0, add-1)
num(briquette-3, 15-2)
dobj(add-1, briquette-3)
det(fire-6, the-5)
prep_to(briquette-3, fire-6)
det(hour-8, each-7)
dep(fire-6, hour-8)
prep_of(briquette-3, cooking-10)
has_pos(add-1,VB)
has_pos(15-2,CD)
has_pos(briquette-3,NN)
has_pos(the-5,DT)
has_pos(fire-6,NN)
has_pos(each-7,DT)
has_pos(hour-8,NN)
has_pos(cooking-10,NN)
has_sense(the-5, null)
has_sense(15-2, null)
has_sense(each-7, null)
---
// do not add fat to the pan .
has_sense(do-1,do-1-sense)
is_a(do-1-sense,make.v.01)
has_sense(not-2,not-2-sense)
is_a(not-2-sense,not.r.01)
has_sense(add-3,add-3-sense)
is_a(add-3-sense,add.v.01)
has_sense(pan-7,pan-7-sense)
is_a(pan-7-sense,pan.n.01)
aux(add-3, do-1)
neg(add-3, not-2)
root(ROOT-0, add-3)
acomp(add-3, fat-4)
det(pan-7, the-6)
prep_to(fat-4, pan-7)
has_pos(do-1,VB)
has_pos(not-2,RB)
has_pos(add-3,VB)
has_pos(fat-4,JJ)
has_pos(the-6,DT)
has_pos(pan-7,NN)
has_sense(the-6, null)
has_sense(fat-4, null)
---
// add the cleaned potato .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(potato-4,potato-4-sense)
is_a(potato-4-sense,potato.n.01)
root(ROOT-0, add-1)
det(potato-4, the-2)
amod(potato-4, cleaned-3)
dobj(add-1, potato-4)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(cleaned-3,JJ)
has_pos(potato-4,NN)
has_sense(the-2, null)
has_sense(cleaned-3, null)
---
// add some salt and season to taste with favorite herb .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(salt-3,salt-3-sense)
is_a(salt-3-sense,salt.n.02)
has_sense(favorite-9,favorite-9-sense)
is_a(favorite-9-sense,favored.s.01)
has_sense(herb-10,herb-10-sense)
is_a(herb-10-sense,herb.n.02)
root(ROOT-0, add-1)
det(salt-3, some-2)
dobj(add-1, salt-3)
conj_and(salt-3, season-5)
aux(taste-7, to-6)
xcomp(add-1, taste-7)
amod(herb-10, favorite-9)
prep_with(taste-7, herb-10)
has_pos(add-1,VB)
has_pos(some-2,DT)
has_pos(salt-3,NN)
has_pos(season-5,NN)
has_pos(to-6,TO)
has_pos(taste-7,VB)
has_pos(favorite-9,JJ)
has_pos(herb-10,NN)
has_sense(some-2, null)
has_sense(taste-7, null)
has_sense(season-5, null)
has_sense(to-6, null)
---
// boil the water and add the sugar .
has_sense(boil-1,boil-1-sense)
is_a(boil-1-sense,boil.v.03)
has_sense(water-3,water-3-sense)
is_a(water-3-sense,water.n.06)
has_sense(add-5,add-5-sense)
is_a(add-5-sense,add.v.01)
has_sense(sugar-7,sugar-7-sense)
is_a(sugar-7-sense,sugar.n.01)
root(ROOT-0, boil-1)
det(water-3, the-2)
dobj(boil-1, water-3)
conj_and(boil-1, add-5)
det(sugar-7, the-6)
dobj(add-5, sugar-7)
has_pos(boil-1,VB)
has_pos(the-2,DT)
has_pos(water-3,NN)
has_pos(add-5,VB)
has_pos(the-6,DT)
has_pos(sugar-7,NN)
has_sense(the-6, null)
has_sense(the-2, null)
---
// remove from the heat and add a tablespoon of water at a time .
has_sense(remove-1,remove-1-sense)
is_a(remove-1-sense,remove.v.01)
has_sense(heat-4,heat-4-sense)
is_a(heat-4-sense,heat.n.01)
has_sense(add-6,add-6-sense)
is_a(add-6-sense,add.v.01)
has_sense(tablespoon-8,tablespoon-8-sense)
is_a(tablespoon-8-sense,tablespoon.n.01)
has_sense(water-10,water-10-sense)
is_a(water-10-sense,water.n.06)
has_sense(time-13,time-13-sense)
is_a(time-13-sense,time.n.01)
root(ROOT-0, remove-1)
det(heat-4, the-3)
prep_from(remove-1, heat-4)
conj_and(remove-1, add-6)
det(tablespoon-8, a-7)
dobj(add-6, tablespoon-8)
prep_of(tablespoon-8, water-10)
det(time-13, a-12)
prep_at(add-6, time-13)
has_pos(remove-1,VB)
has_pos(the-3,DT)
has_pos(heat-4,NN)
has_pos(add-6,VB)
has_pos(a-7,DT)
has_pos(tablespoon-8,NN)
has_pos(water-10,NN)
has_pos(a-12,DT)
has_pos(time-13,NN)
has_sense(the-3, null)
has_sense(a-12, null)
has_sense(a-7, null)
---
// Chop slice of onion and add to bowl .
has_sense(slice-2,slice-2-sense)
is_a(slice-2-sense,slice.v.03)
has_sense(onion-4,onion-4-sense)
is_a(onion-4-sense,onion.n.01)
has_sense(add-6,add-6-sense)
is_a(add-6-sense,add.v.01)
has_sense(bowl-8,bowl-8-sense)
is_a(bowl-8-sense,bowl.n.01)
nsubj(slice-2, Chop-1)
root(ROOT-0, slice-2)
prep_of(slice-2, onion-4)
conj_and(slice-2, add-6)
prep_to(add-6, bowl-8)
has_pos(Chop-1,NNP)
has_pos(slice-2,VBP)
has_pos(onion-4,NN)
has_pos(add-6,VBP)
has_pos(bowl-8,NN)
has_sense(Chop-1, null)
---
// When the pan be hot , add your sliced vegetable .
has_sense(pan-3,pan-3-sense)
is_a(pan-3-sense,pan.n.01)
has_sense(be-4,be-4-sense)
is_a(be-4-sense,be.v.01)
has_sense(hot-5,hot-5-sense)
is_a(hot-5-sense,hot.a.01)
has_sense(add-7,add-7-sense)
is_a(add-7-sense,add.v.01)
has_sense(sliced-9,sliced-9-sense)
is_a(sliced-9-sense,chopped.s.01)
has_sense(vegetable-10,vegetable-10-sense)
is_a(vegetable-10-sense,vegetable.n.01)
advmod(hot-5, When-1)
det(pan-3, the-2)
nsubj(hot-5, pan-3)
cop(hot-5, be-4)
advcl(add-7, hot-5)
root(ROOT-0, add-7)
poss(vegetable-10, your-8)
amod(vegetable-10, sliced-9)
dobj(add-7, vegetable-10)
has_pos(When-1,WRB)
has_pos(the-2,DT)
has_pos(pan-3,NN)
has_pos(be-4,VB)
has_pos(hot-5,JJ)
has_pos(add-7,VB)
has_pos(your-8,PRP$)
has_pos(sliced-9,JJ)
has_pos(vegetable-10,NN)
has_sense(When-1, null)
has_sense(your-8, null)
has_sense(the-2, null)
---
// Sift dry ingredient then add milk .
has_sense(dry-2,dry-2-sense)
is_a(dry-2-sense,dry.a.01)
has_sense(ingredient-3,ingredient-3-sense)
is_a(ingredient-3-sense,ingredient.n.03)
has_sense(then-4,then-4-sense)
is_a(then-4-sense,then.r.01)
has_sense(add-5,add-5-sense)
is_a(add-5-sense,add.v.01)
has_sense(milk-6,milk-6-sense)
is_a(milk-6-sense,milk.n.01)
amod(ingredient-3, Sift-1)
amod(ingredient-3, dry-2)
nsubj(add-5, ingredient-3)
advmod(add-5, then-4)
root(ROOT-0, add-5)
dobj(add-5, milk-6)
has_pos(Sift-1,JJ)
has_pos(dry-2,JJ)
has_pos(ingredient-3,NN)
has_pos(then-4,RB)
has_pos(add-5,VBP)
has_pos(milk-6,NN)
has_sense(Sift-1, null)
---
// add the vanilla .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(vanilla-3,vanilla-3-sense)
is_a(vanilla-3-sense,vanilla.n.02)
root(ROOT-0, add-1)
det(vanilla-3, the-2)
dobj(add-1, vanilla-3)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(vanilla-3,NN)
has_sense(the-2, null)
---
// keep stir and add the next cup .
has_sense(keep-1,keep-1-sense)
is_a(keep-1-sense,continue.v.01)
has_sense(stir-2,stir-2-sense)
is_a(stir-2-sense,stir.v.01)
has_sense(add-4,add-4-sense)
is_a(add-4-sense,add.v.01)
has_sense(next-6,next-6-sense)
is_a(next-6-sense,following.s.02)
has_sense(cup-7,cup-7-sense)
is_a(cup-7-sense,cup.n.04)
root(ROOT-0, keep-1)
xcomp(keep-1, stir-2)
conj_and(stir-2, add-4)
det(cup-7, the-5)
amod(cup-7, next-6)
dobj(stir-2, cup-7)
has_pos(keep-1,VB)
has_pos(stir-2,VB)
has_pos(add-4,VB)
has_pos(the-5,DT)
has_pos(next-6,JJ)
has_pos(cup-7,NN)
has_sense(the-5, null)
---
// add vanilla then beat well .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(vanilla-2,vanilla-2-sense)
is_a(vanilla-2-sense,vanilla.n.02)
has_sense(then-3,then-3-sense)
is_a(then-3-sense,then.r.01)
has_sense(beat-4,beat-4-sense)
is_a(beat-4-sense,beat.v.10)
has_sense(well-5,well-5-sense)
is_a(well-5-sense,well.r.01)
root(ROOT-0, add-1)
dobj(add-1, vanilla-2)
advmod(add-1, then-3)
dep(add-1, beat-4)
advmod(beat-4, well-5)
has_pos(add-1,VB)
has_pos(vanilla-2,NN)
has_pos(then-3,RB)
has_pos(beat-4,VB)
has_pos(well-5,RB)
---
// finally add in two-thirds of the Parmesan cheese .
has_sense(finally-1,finally-1-sense)
is_a(finally-1-sense,ultimately.r.01)
has_sense(add-2,add-2-sense)
is_a(add-2-sense,add.v.01)
has_sense(two-thirds-4,two-thirds-4-sense)
is_a(two-thirds-4-sense,two-thirds.n.01)
has_sense(Parmesan-7,Parmesan-7-sense)
is_a(Parmesan-7-sense,parmesan.n.01)
has_sense(cheese-8,cheese-8-sense)
is_a(cheese-8-sense,cheese.n.01)
advmod(add-2, finally-1)
root(ROOT-0, add-2)
prep_in(add-2, two-thirds-4)
det(cheese-8, the-6)
nn(cheese-8, Parmesan-7)
prep_of(two-thirds-4, cheese-8)
has_pos(finally-1,RB)
has_pos(add-2,VB)
has_pos(two-thirds-4,NNS)
has_pos(the-6,DT)
has_pos(Parmesan-7,NNP)
has_pos(cheese-8,NN)
has_sense(the-6, null)
---
// add optional flavoring .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(optional-2,optional-2-sense)
is_a(optional-2-sense,optional.a.01)
has_sense(flavoring-3,flavoring-3-sense)
is_a(flavoring-3-sense,flavorer.n.01)
root(ROOT-0, add-1)
amod(flavoring-3, optional-2)
dobj(add-1, flavoring-3)
has_pos(add-1,VB)
has_pos(optional-2,JJ)
has_pos(flavoring-3,NN)
---
// add egg_white and beat well .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(egg_white-2,egg_white-2-sense)
is_a(egg_white-2-sense,egg_white.n.01)
has_sense(beat-4,beat-4-sense)
is_a(beat-4-sense,beat.v.10)
has_sense(well-5,well-5-sense)
is_a(well-5-sense,well.r.02)
root(ROOT-0, add-1)
dobj(add-1, egg_white-2)
conj_and(add-1, beat-4)
advmod(beat-4, well-5)
has_pos(add-1,VB)
has_pos(egg_white-2,NN)
has_pos(beat-4,VB)
has_pos(well-5,RB)
---
// add the sugar , the milk , and the melted chocolate to the bowl with the egg .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(sugar-3,sugar-3-sense)
is_a(sugar-3-sense,sugar.n.01)
has_sense(milk-6,milk-6-sense)
is_a(milk-6-sense,milk.n.01)
has_sense(melted-10,melted-10-sense)
is_a(melted-10-sense,melted.a.01)
has_sense(chocolate-11,chocolate-11-sense)
is_a(chocolate-11-sense,chocolate.n.02)
has_sense(bowl-14,bowl-14-sense)
is_a(bowl-14-sense,bowl.n.01)
has_sense(egg-17,egg-17-sense)
is_a(egg-17-sense,egg.n.02)
root(ROOT-0, add-1)
det(sugar-3, the-2)
dobj(add-1, sugar-3)
det(milk-6, the-5)
conj_and(sugar-3, milk-6)
det(chocolate-11, the-9)
amod(chocolate-11, melted-10)
conj_and(sugar-3, chocolate-11)
det(bowl-14, the-13)
prep_to(add-1, bowl-14)
det(egg-17, the-16)
prep_with(bowl-14, egg-17)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(sugar-3,NN)
has_pos(the-5,DT)
has_pos(milk-6,NN)
has_pos(the-9,DT)
has_pos(melted-10,JJ)
has_pos(chocolate-11,NN)
has_pos(the-13,DT)
has_pos(bowl-14,NN)
has_pos(the-16,DT)
has_pos(egg-17,NN)
has_sense(the-5, null)
has_sense(the-2, null)
has_sense(the-9, null)
has_sense(the-16, null)
has_sense(the-13, null)
---
// add 2 cup of crushed ice .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(cup-3,cup-3-sense)
is_a(cup-3-sense,cup.n.02)
has_sense(ice-6,ice-6-sense)
is_a(ice-6-sense,ice.n.01)
root(ROOT-0, add-1)
num(cup-3, 2-2)
dobj(add-1, cup-3)
amod(ice-6, crushed-5)
prep_of(cup-3, ice-6)
has_pos(add-1,VB)
has_pos(2-2,CD)
has_pos(cup-3,NN)
has_pos(crushed-5,JJ)
has_pos(ice-6,NN)
has_sense(2-2, null)
has_sense(crushed-5, null)
---
// One way to do this be to add the salt , sugar , and baking_powder to the flour as you sift .
has_sense(way-2,way-2-sense)
is_a(way-2-sense,manner.n.01)
has_sense(do-4,do-4-sense)
is_a(do-4-sense,perform.v.01)
has_sense(be-6,be-6-sense)
is_a(be-6-sense,be.v.01)
has_sense(add-8,add-8-sense)
is_a(add-8-sense,add.v.01)
has_sense(salt-10,salt-10-sense)
is_a(salt-10-sense,salt.n.02)
has_sense(sugar-12,sugar-12-sense)
is_a(sugar-12-sense,sugar.n.01)
has_sense(baking_powder-15,baking_powder-15-sense)
is_a(baking_powder-15-sense,baking_powder.n.01)
has_sense(flour-18,flour-18-sense)
is_a(flour-18-sense,flour.n.01)
has_sense(sift-21,sift-21-sense)
is_a(sift-21-sense,sift.v.02)
num(way-2, One-1)
nsubj(do-4, way-2)
aux(do-4, to-3)
root(ROOT-0, do-4)
nsubj(be-6, this-5)
ccomp(do-4, be-6)
aux(add-8, to-7)
xcomp(be-6, add-8)
det(baking_powder-15, the-9)
nn(baking_powder-15, salt-10)
conj_and(baking_powder-15, sugar-12)
dobj(add-8, baking_powder-15)
det(flour-18, the-17)
prep_to(baking_powder-15, flour-18)
mark(sift-21, as-19)
nsubj(sift-21, you-20)
advcl(add-8, sift-21)
has_pos(One-1,CD)
has_pos(way-2,NN)
has_pos(to-3,TO)
has_pos(do-4,VB)
has_pos(this-5,DT)
has_pos(be-6,VB)
has_pos(to-7,TO)
has_pos(add-8,VB)
has_pos(the-9,DT)
has_pos(salt-10,NN)
has_pos(sugar-12,NN)
has_pos(baking_powder-15,NN)
has_pos(the-17,DT)
has_pos(flour-18,NN)
has_pos(as-19,IN)
has_pos(you-20,PRP)
has_pos(sift-21,VBP)
has_sense(to-3, null)
has_sense(this-5, null)
has_sense(the-9, null)
has_sense(to-7, null)
has_sense(as-19, null)
has_sense(you-20, null)
has_sense(the-17, null)
has_sense(One-1, null)
---
// add the boiling water , cocoa and baking_soda in a separate mixing_bowl .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(water-4,water-4-sense)
is_a(water-4-sense,water.n.06)
has_sense(cocoa-6,cocoa-6-sense)
is_a(cocoa-6-sense,cocoa.n.02)
has_sense(baking_soda-8,baking_soda-8-sense)
is_a(baking_soda-8-sense,bicarbonate_of_soda.n.01)
has_sense(mixing_bowl-12,mixing_bowl-12-sense)
is_a(mixing_bowl-12-sense,mixing_bowl.n.01)
root(ROOT-0, add-1)
det(water-4, the-2)
amod(water-4, boiling-3)
dobj(add-1, water-4)
conj_and(water-4, cocoa-6)
conj_and(water-4, baking_soda-8)
det(mixing_bowl-12, a-10)
amod(mixing_bowl-12, separate-11)
prep_in(add-1, mixing_bowl-12)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(boiling-3,JJ)
has_pos(water-4,NN)
has_pos(cocoa-6,NN)
has_pos(baking_soda-8,NN)
has_pos(a-10,DT)
has_pos(separate-11,JJ)
has_pos(mixing_bowl-12,NN)
has_sense(a-10, null)
has_sense(separate-11, null)
has_sense(boiling-3, null)
has_sense(the-2, null)
---
// add the peel at this stage also .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(peel-3,peel-3-sense)
is_a(peel-3-sense,peel.n.02)
has_sense(stage-6,stage-6-sense)
is_a(stage-6-sense,phase.n.01)
has_sense(also-7,also-7-sense)
is_a(also-7-sense,besides.r.02)
root(ROOT-0, add-1)
det(peel-3, the-2)
dobj(add-1, peel-3)
det(stage-6, this-5)
prep_at(add-1, stage-6)
advmod(stage-6, also-7)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(peel-3,NN)
has_pos(this-5,DT)
has_pos(stage-6,NN)
has_pos(also-7,RB)
has_sense(this-5, null)
has_sense(the-2, null)
---
// add blueberries with juice and pineapple .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(juice-4,juice-4-sense)
is_a(juice-4-sense,juice.n.01)
has_sense(pineapple-6,pineapple-6-sense)
is_a(pineapple-6-sense,pineapple.n.02)
root(ROOT-0, add-1)
dobj(add-1, blueberries-2)
prep_with(add-1, juice-4)
conj_and(juice-4, pineapple-6)
has_pos(add-1,VB)
has_pos(blueberries-2,NNS)
has_pos(juice-4,NN)
has_pos(pineapple-6,NN)
has_sense(blueberries-2, null)
---
// Beat butter till soft then add sugar and mix .
has_sense(butter-2,butter-2-sense)
is_a(butter-2-sense,butter.n.01)
has_sense(soft-4,soft-4-sense)
is_a(soft-4-sense,soft.a.01)
has_sense(then-5,then-5-sense)
is_a(then-5-sense,then.r.01)
has_sense(add-6,add-6-sense)
is_a(add-6-sense,add.v.01)
has_sense(sugar-7,sugar-7-sense)
is_a(sugar-7-sense,sugar.n.01)
amod(butter-2, Beat-1)
nsubj(add-6, butter-2)
prep_till(add-6, soft-4)
advmod(add-6, then-5)
root(ROOT-0, add-6)
dobj(add-6, sugar-7)
conj_and(sugar-7, mix-9)
has_pos(Beat-1,JJ)
has_pos(butter-2,NN)
has_pos(soft-4,JJ)
has_pos(then-5,RB)
has_pos(add-6,VBP)
has_pos(sugar-7,NN)
has_pos(mix-9,NN)
has_sense(Beat-1, null)
has_sense(mix-9, null)
---
// When the rice be opaque , add 1 cup of stock and stir well .
has_sense(rice-3,rice-3-sense)
is_a(rice-3-sense,rice.n.01)
has_sense(be-4,be-4-sense)
is_a(be-4-sense,be.v.01)
has_sense(add-7,add-7-sense)
is_a(add-7-sense,add.v.01)
has_sense(cup-9,cup-9-sense)
is_a(cup-9-sense,cup.n.02)
has_sense(stock-11,stock-11-sense)
is_a(stock-11-sense,broth.n.01)
has_sense(stir-13,stir-13-sense)
is_a(stir-13-sense,stir.v.01)
has_sense(well-14,well-14-sense)
is_a(well-14-sense,well.r.02)
advmod(opaque-5, When-1)
det(rice-3, the-2)
nsubj(opaque-5, rice-3)
cop(opaque-5, be-4)
advcl(add-7, opaque-5)
root(ROOT-0, add-7)
num(cup-9, 1-8)
dobj(add-7, cup-9)
prep_of(cup-9, stock-11)
conj_and(add-7, stir-13)
advmod(stir-13, well-14)
has_pos(When-1,WRB)
has_pos(the-2,DT)
has_pos(rice-3,NN)
has_pos(be-4,VB)
has_pos(opaque-5,JJ)
has_pos(add-7,VB)
has_pos(1-8,CD)
has_pos(cup-9,NN)
has_pos(stock-11,NN)
has_pos(stir-13,VB)
has_pos(well-14,RB)
has_sense(1-8, null)
has_sense(the-2, null)
has_sense(When-1, null)
has_sense(opaque-5, null)
---
// add sugar and vanilla .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(sugar-2,sugar-2-sense)
is_a(sugar-2-sense,sugar.n.01)
has_sense(vanilla-4,vanilla-4-sense)
is_a(vanilla-4-sense,vanilla.n.02)
root(ROOT-0, add-1)
dobj(add-1, sugar-2)
conj_and(sugar-2, vanilla-4)
has_pos(add-1,VB)
has_pos(sugar-2,NN)
has_pos(vanilla-4,NN)
---
// add 3\/4 cup sugar and beat until stiff peaks form .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(cup-3,cup-3-sense)
is_a(cup-3-sense,cup.n.04)
has_sense(sugar-4,sugar-4-sense)
is_a(sugar-4-sense,sugar.n.01)
has_sense(beat-6,beat-6-sense)
is_a(beat-6-sense,beat.v.10)
has_sense(stiff-8,stiff-8-sense)
is_a(stiff-8-sense,stiff.s.01)
has_sense(form-10,form-10-sense)
is_a(form-10-sense,form.v.07)
root(ROOT-0, add-1)
num(sugar-4, 3\/4-2)
nn(sugar-4, cup-3)
dobj(add-1, sugar-4)
conj_and(add-1, beat-6)
mark(form-10, until-7)
amod(peaks-9, stiff-8)
nsubj(form-10, peaks-9)
advcl(beat-6, form-10)
has_pos(add-1,VB)
has_pos(3\/4-2,CD)
has_pos(cup-3,NN)
has_pos(sugar-4,NN)
has_pos(beat-6,VB)
has_pos(until-7,IN)
has_pos(stiff-8,JJ)
has_pos(peaks-9,NNS)
has_pos(form-10,VBP)
has_sense(peaks-9, null)
has_sense(until-7, null)
has_sense(3\/4-2, null)
---
// add to batter in bowl .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(bowl-5,bowl-5-sense)
is_a(bowl-5-sense,bowl.n.01)
root(ROOT-0, add-1)
aux(batter-3, to-2)
xcomp(add-1, batter-3)
prep_in(batter-3, bowl-5)
has_pos(add-1,VB)
has_pos(to-2,TO)
has_pos(batter-3,VB)
has_pos(bowl-5,NN)
has_sense(to-2, null)
has_sense(batter-3, null)
---
// add some of the flour and one of the eggs .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(flour-5,flour-5-sense)
is_a(flour-5-sense,flour.n.01)
has_sense(eggs-10,eggs-10-sense)
is_a(eggs-10-sense,egg.n.02)
root(ROOT-0, add-1)
dobj(add-1, some-2)
det(flour-5, the-4)
prep_of(some-2, flour-5)
conj_and(some-2, one-7)
det(eggs-10, the-9)
prep_of(one-7, eggs-10)
has_pos(add-1,VB)
has_pos(some-2,DT)
has_pos(the-4,DT)
has_pos(flour-5,NN)
has_pos(one-7,CD)
has_pos(the-9,DT)
has_pos(eggs-10,NNS)
has_sense(the-4, null)
has_sense(one-7, null)
has_sense(some-2, null)
has_sense(the-9, null)
---
// add cream of tartar and beat egg_white until stiff .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(cream-2,cream-2-sense)
is_a(cream-2-sense,cream.n.02)
has_sense(tartar-4,tartar-4-sense)
is_a(tartar-4-sense,cream_of_tartar.n.01)
has_sense(beat-6,beat-6-sense)
is_a(beat-6-sense,beat.v.10)
has_sense(egg_white-7,egg_white-7-sense)
is_a(egg_white-7-sense,egg_white.n.01)
has_sense(stiff-9,stiff-9-sense)
is_a(stiff-9-sense,stiff.s.01)
root(ROOT-0, add-1)
dobj(add-1, cream-2)
prep_of(cream-2, tartar-4)
conj_and(add-1, beat-6)
acomp(beat-6, egg_white-7)
prep_until(egg_white-7, stiff-9)
has_pos(add-1,VB)
has_pos(cream-2,NN)
has_pos(tartar-4,NN)
has_pos(beat-6,VB)
has_pos(egg_white-7,JJ)
has_pos(stiff-9,JJ)
---
// add corn meal , salt and pepper to a resealable plastic food storage bag .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(meal-3,meal-3-sense)
is_a(meal-3-sense,meal.n.03)
has_sense(salt-5,salt-5-sense)
is_a(salt-5-sense,salt.n.02)
has_sense(pepper-7,pepper-7-sense)
is_a(pepper-7-sense,pepper.n.03)
has_sense(food-12,food-12-sense)
is_a(food-12-sense,food.n.02)
has_sense(bag-14,bag-14-sense)
is_a(bag-14-sense,bag.n.01)
root(ROOT-0, add-1)
nn(meal-3, corn-2)
dobj(add-1, meal-3)
conj_and(meal-3, salt-5)
conj_and(meal-3, pepper-7)
det(bag-14, a-9)
amod(bag-14, resealable-10)
amod(bag-14, plastic-11)
nn(bag-14, food-12)
nn(bag-14, storage-13)
prep_to(add-1, bag-14)
has_pos(add-1,VB)
has_pos(corn-2,NN)
has_pos(meal-3,NN)
has_pos(salt-5,NN)
has_pos(pepper-7,NN)
has_pos(a-9,DT)
has_pos(resealable-10,JJ)
has_pos(plastic-11,JJ)
has_pos(food-12,NN)
has_pos(storage-13,NN)
has_pos(bag-14,NN)
has_sense(corn-2, null)
has_sense(storage-13, null)
has_sense(a-9, null)
has_sense(plastic-11, null)
has_sense(resealable-10, null)
---
// add egg_white one at a time , beat well after each addition .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(egg_white-2,egg_white-2-sense)
is_a(egg_white-2-sense,egg_white.n.01)
has_sense(time-6,time-6-sense)
is_a(time-6-sense,time.n.01)
has_sense(beat-8,beat-8-sense)
is_a(beat-8-sense,beat.v.10)
has_sense(well-9,well-9-sense)
is_a(well-9-sense,well.r.02)
root(ROOT-0, add-1)
amod(one-3, egg_white-2)
dobj(add-1, one-3)
det(time-6, a-5)
prep_at(add-1, time-6)
dep(add-1, beat-8)
advmod(beat-8, well-9)
det(addition-12, each-11)
prep_after(beat-8, addition-12)
has_pos(add-1,VB)
has_pos(egg_white-2,JJ)
has_pos(one-3,NN)
has_pos(a-5,DT)
has_pos(time-6,NN)
has_pos(beat-8,VB)
has_pos(well-9,RB)
has_pos(each-11,DT)
has_pos(addition-12,NN)
has_sense(one-3, null)
has_sense(each-11, null)
has_sense(addition-12, null)
has_sense(a-5, null)
---
// This will prevent it from be too cold when you add it in .
has_sense(prevent-3,prevent-3-sense)
is_a(prevent-3-sense,prevent.v.01)
has_sense(be-6,be-6-sense)
is_a(be-6-sense,be.v.01)
has_sense(too-7,too-7-sense)
is_a(too-7-sense,excessively.r.01)
has_sense(cold-8,cold-8-sense)
is_a(cold-8-sense,cold.a.01)
has_sense(add-11,add-11-sense)
is_a(add-11-sense,add.v.01)
nsubj(prevent-3, This-1)
aux(prevent-3, will-2)
root(ROOT-0, prevent-3)
dobj(prevent-3, it-4)
cop(cold-8, be-6)
advmod(cold-8, too-7)
prep_from(prevent-3, cold-8)
advmod(add-11, when-9)
nsubj(add-11, you-10)
advcl(cold-8, add-11)
dobj(add-11, it-12)
prt(add-11, in-13)
has_pos(This-1,DT)
has_pos(will-2,MD)
has_pos(prevent-3,VB)
has_pos(it-4,PRP)
has_pos(be-6,VB)
has_pos(too-7,RB)
has_pos(cold-8,JJ)
has_pos(when-9,WRB)
has_pos(you-10,PRP)
has_pos(add-11,VBP)
has_pos(it-12,PRP)
has_pos(in-13,RP)
has_sense(when-9, null)
has_sense(in-13, null)
has_sense(it-12, null)
has_sense(will-2, null)
has_sense(This-1, null)
has_sense(it-4, null)
has_sense(you-10, null)
---
// add your seasoning .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(seasoning-3,seasoning-3-sense)
is_a(seasoning-3-sense,flavorer.n.01)
root(ROOT-0, add-1)
poss(seasoning-3, your-2)
dobj(add-1, seasoning-3)
has_pos(add-1,VB)
has_pos(your-2,PRP$)
has_pos(seasoning-3,NN)
has_sense(your-2, null)
---
// Mince garlic_clove and add to salad .
has_sense(garlic_clove-2,garlic_clove-2-sense)
is_a(garlic_clove-2-sense,clove.n.03)
has_sense(add-4,add-4-sense)
is_a(add-4-sense,add.v.01)
has_sense(salad-6,salad-6-sense)
is_a(salad-6-sense,salad.n.01)
nsubj(garlic_clove-2, Mince-1)
root(ROOT-0, garlic_clove-2)
conj_and(garlic_clove-2, add-4)
prep_to(garlic_clove-2, salad-6)
has_pos(Mince-1,NNP)
has_pos(garlic_clove-2,VBP)
has_pos(add-4,VBP)
has_pos(salad-6,NN)
has_sense(Mince-1, null)
---
// add the fruit to the blender .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(fruit-3,fruit-3-sense)
is_a(fruit-3-sense,fruit.n.01)
has_sense(blender-6,blender-6-sense)
is_a(blender-6-sense,blender.n.01)
root(ROOT-0, add-1)
det(fruit-3, the-2)
dobj(add-1, fruit-3)
det(blender-6, the-5)
prep_to(add-1, blender-6)
has_pos(add-1,VB)
has_pos(the-2,DT)
has_pos(fruit-3,NN)
has_pos(the-5,DT)
has_pos(blender-6,NN)
has_sense(the-5, null)
has_sense(the-2, null)
---
// add about 1\/2 cup of woodchips , as desire .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(about-2,about-2-sense)
is_a(about-2-sense,approximately.r.01)
has_sense(cup-4,cup-4-sense)
is_a(cup-4-sense,cup.n.02)
has_sense(as-8,as-8-sense)
is_a(as-8-sense,equally.r.01)
has_sense(desire-9,desire-9-sense)
is_a(desire-9-sense,desire.v.01)
root(ROOT-0, add-1)
quantmod(1\/2-3, about-2)
num(cup-4, 1\/2-3)
dobj(add-1, cup-4)
prep_of(cup-4, woodchips-6)
prep_as(add-1, desire-9)
has_pos(add-1,VB)
has_pos(about-2,RB)
has_pos(1\/2-3,CD)
has_pos(cup-4,NN)
has_pos(woodchips-6,NNS)
has_pos(desire-9,NN)
has_sense(woodchips-6, null)
has_sense(1\/2-3, null)
---
// add charcoal around the drip_pan .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(charcoal-2,charcoal-2-sense)
is_a(charcoal-2-sense,charcoal.n.01)
has_sense(drip_pan-5,drip_pan-5-sense)
is_a(drip_pan-5-sense,dripping_pan.n.01)
root(ROOT-0, add-1)
dobj(add-1, charcoal-2)
det(drip_pan-5, the-4)
prep_around(add-1, drip_pan-5)
has_pos(add-1,VB)
has_pos(charcoal-2,NN)
has_pos(the-4,DT)
has_pos(drip_pan-5,NN)
has_sense(the-4, null)
---
// add them to the pile later when the chips burn out or stop smoking .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(pile-5,pile-5-sense)
is_a(pile-5-sense,pile.n.01)
has_sense(later-6,later-6-sense)
is_a(later-6-sense,subsequently.r.01)
has_sense(burn-10,burn-10-sense)
is_a(burn-10-sense,burn.v.15)
has_sense(stop-13,stop-13-sense)
is_a(stop-13-sense,stop.v.01)
root(ROOT-0, add-1)
dobj(add-1, them-2)
det(pile-5, the-4)
prep_to(add-1, pile-5)
advmod(add-1, later-6)
advmod(burn-10, when-7)
det(chips-9, the-8)
nsubj(burn-10, chips-9)
dep(later-6, burn-10)
prt(burn-10, out-11)
conj_or(add-1, stop-13)
dobj(stop-13, smoking-14)
has_pos(add-1,VB)
has_pos(them-2,PRP)
has_pos(the-4,DT)
has_pos(pile-5,NN)
has_pos(later-6,RBR)
has_pos(when-7,WRB)
has_pos(the-8,DT)
has_pos(chips-9,NNS)
has_pos(burn-10,VBP)
has_pos(out-11,RP)
has_pos(stop-13,VB)
has_pos(smoking-14,NN)
has_sense(smoking-14, null)
has_sense(the-4, null)
has_sense(them-2, null)
has_sense(chips-9, null)
has_sense(when-7, null)
has_sense(the-8, null)
has_sense(out-11, null)
---
// add some ice_cream on top when serving for an even more delicious taste .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(ice_cream-3,ice_cream-3-sense)
is_a(ice_cream-3-sense,ice_cream.n.01)
has_sense(even-10,even-10-sense)
is_a(even-10-sense,even.r.03)
has_sense(more-11,more-11-sense)
is_a(more-11-sense,more.r.01)
has_sense(delicious-12,delicious-12-sense)
is_a(delicious-12-sense,delectable.s.01)
has_sense(taste-13,taste-13-sense)
is_a(taste-13-sense,taste.n.01)
root(ROOT-0, add-1)
det(ice_cream-3, some-2)
dobj(add-1, ice_cream-3)
prep_on(ice_cream-3, top-5)
advmod(serving-7, when-6)
advcl(add-1, serving-7)
det(taste-13, an-9)
advmod(delicious-12, even-10)
advmod(delicious-12, more-11)
amod(taste-13, delicious-12)
prep_for(serving-7, taste-13)
has_pos(add-1,VB)
has_pos(some-2,DT)
has_pos(ice_cream-3,NN)
has_pos(top-5,NN)
has_pos(when-6,WRB)
has_pos(serving-7,VBG)
has_pos(an-9,DT)
has_pos(even-10,RB)
has_pos(more-11,RBR)
has_pos(delicious-12,JJ)
has_pos(taste-13,NN)
has_sense(an-9, null)
has_sense(some-2, null)
has_sense(when-6, null)
has_sense(top-5, null)
has_sense(serving-7, null)
---
// open your can of tuna , drain the oil or water out and add the tuna to the bowl .
has_sense(open-1,open-1-sense)
is_a(open-1-sense,open.v.01)
has_sense(can-3,can-3-sense)
is_a(can-3-sense,can.n.01)
has_sense(tuna-5,tuna-5-sense)
is_a(tuna-5-sense,tuna.n.02)
has_sense(drain-7,drain-7-sense)
is_a(drain-7-sense,drain.v.03)
has_sense(oil-9,oil-9-sense)
is_a(oil-9-sense,vegetable_oil.n.01)
has_sense(water-11,water-11-sense)
is_a(water-11-sense,water.n.06)
has_sense(add-14,add-14-sense)
is_a(add-14-sense,add.v.01)
has_sense(tuna-16,tuna-16-sense)
is_a(tuna-16-sense,tuna.n.02)
has_sense(bowl-19,bowl-19-sense)
is_a(bowl-19-sense,bowl.n.01)
root(ROOT-0, open-1)
poss(can-3, your-2)
dobj(open-1, can-3)
prep_of(can-3, tuna-5)
conj_and(open-1, drain-7)
det(oil-9, the-8)
dobj(drain-7, oil-9)
conj_or(oil-9, water-11)
prt(drain-7, out-12)
conj_and(open-1, add-14)
det(tuna-16, the-15)
dobj(add-14, tuna-16)
det(bowl-19, the-18)
prep_to(add-14, bowl-19)
has_pos(open-1,VB)
has_pos(your-2,PRP$)
has_pos(can-3,NN)
has_pos(tuna-5,NN)
has_pos(drain-7,VB)
has_pos(the-8,DT)
has_pos(oil-9,NN)
has_pos(water-11,NN)
has_pos(out-12,RP)
has_pos(add-14,VB)
has_pos(the-15,DT)
has_pos(tuna-16,NN)
has_pos(the-18,DT)
has_pos(bowl-19,NN)
has_sense(your-2, null)
has_sense(the-8, null)
has_sense(the-18, null)
has_sense(out-12, null)
has_sense(the-15, null)