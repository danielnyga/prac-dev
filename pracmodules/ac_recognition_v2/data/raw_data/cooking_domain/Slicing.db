/* **************************************************************************** 
 * WIKIHOW.COM -- NATURAL-LANGUAGE INSTRUCTIONS
 * 
 * (C) 2011-2013 by Daniel Nyga (nyga@cs.uni-bremen.edu)
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ******************************************************************************/


// Peel cucumber and slice longwise .
has_sense(cucumber-2,cucumber-2-sense)
is_a(cucumber-2-sense,cucumber.n.02)
has_sense(slice-4,slice-4-sense)
is_a(slice-4-sense,slice.v.03)
has_sense(longwise-5,longwise-5-sense)
is_a(longwise-5-sense,lengthways.r.01)
nn(cucumber-2, Peel-1)
nsubj(longwise-5, cucumber-2)
conj_and(cucumber-2, slice-4)
root(ROOT-0, longwise-5)
has_pos(Peel-1,NNP)
has_pos(cucumber-2,NN)
has_pos(slice-4,NN)
has_pos(longwise-5,VBP)
has_sense(Peel-1, null)
---
// slice the pizza into eight separate slice .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(pizza-3,pizza-3-sense)
is_a(pizza-3-sense,pizza.n.01)
action_role(pizza-3,Item)
has_sense(separate-6,separate-6-sense)
is_a(separate-6-sense,separate.a.01)
has_sense(slice-7,slice-7-sense)
is_a(slice-7-sense,piece.n.08)
action_role(slice-7,Pieces)
root(ROOT-0, slice-1)
det(pizza-3, the-2)
dobj(slice-1, pizza-3)
num(slice-7, eight-5)
amod(slice-7, separate-6)
prep_into(slice-1, slice-7)
has_pos(slice-1,VBP)
has_pos(the-2,DT)
has_pos(pizza-3,NN)
has_pos(eight-5,CD)
has_pos(separate-6,JJ)
has_pos(slice-7,NN)
has_sense(eight-5, null)
has_sense(the-2, null)
---
// finish with a slice of tomato , onion and mustard and ketchup .
has_sense(finish-1,finish-1-sense)
is_a(finish-1-sense,complete.v.01)
has_sense(slice-4,slice-4-sense)
is_a(slice-4-sense,piece.n.08)
has_sense(tomato-6,tomato-6-sense)
is_a(tomato-6-sense,tomato.n.01)
action_role(tomato-6,Item)
has_sense(onion-8,onion-8-sense)
is_a(onion-8-sense,onion.n.03)
action_role(onion-8,Item)
has_sense(mustard-10,mustard-10-sense)
is_a(mustard-10-sense,mustard.n.02)
has_sense(ketchup-12,ketchup-12-sense)
is_a(ketchup-12-sense,catsup.n.01)
root(ROOT-0, finish-1)
det(slice-4, a-3)
prep_with(finish-1, slice-4)
prep_of(slice-4, tomato-6)
conj_and(tomato-6, onion-8)
conj_and(tomato-6, mustard-10)
conj_and(finish-1, ketchup-12)
has_pos(finish-1,VB)
has_pos(a-3,DT)
has_pos(slice-4,NN)
has_pos(tomato-6,NN)
has_pos(onion-8,NN)
has_pos(mustard-10,NN)
has_pos(ketchup-12,VB)
has_sense(a-3, null)
---
// slice each cheese thinly .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(cheese-3,cheese-3-sense)
is_a(cheese-3-sense,cheese.n.01)
action_role(cheese-3,Item)
has_sense(thinly-4,thinly-4-sense)
is_a(thinly-4-sense,thinly.r.03)
action_role(thinly-4,Manner)
root(ROOT-0, slice-1)
det(cheese-3, each-2)
dobj(slice-1, cheese-3)
advmod(cheese-3, thinly-4)
has_pos(slice-1,VBP)
has_pos(each-2,DT)
has_pos(cheese-3,NN)
has_pos(thinly-4,RB)
has_sense(each-2, null)
---
// slice the banana use a small knife .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(banana-3,banana-3-sense)
is_a(banana-3-sense,banana.n.02)
action_role(banana-3,Item)
has_sense(use-4,use-4-sense)
is_a(use-4-sense,use.v.01)
has_sense(small-6,small-6-sense)
is_a(small-6-sense,minor.s.10)
has_sense(knife-7,knife-7-sense)
is_a(knife-7-sense,knife.n.01)
action_role(knife-7,Instrument)
nsubj(use-4, slice-1)
det(banana-3, the-2)
dep(slice-1, banana-3)
root(ROOT-0, use-4)
det(knife-7, a-5)
amod(knife-7, small-6)
dobj(use-4, knife-7)
has_pos(slice-1,NN)
has_pos(the-2,DT)
has_pos(banana-3,NN)
has_pos(use-4,VBP)
has_pos(a-5,DT)
has_pos(small-6,JJ)
has_pos(knife-7,NN)
has_sense(a-5, null)
has_sense(the-2, null)
---
// slice the chicken into thin slice of 3 centimeter long .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(chicken-3,chicken-3-sense)
is_a(chicken-3-sense,chicken.n.01)
action_role(chicken-3,Item)
has_sense(thin-5,thin-5-sense)
is_a(thin-5-sense,thin.a.01)
has_sense(slice-6,slice-6-sense)
is_a(slice-6-sense,piece.n.08)
action_role(slice-6,Pieces)
has_sense(centimeter-9,centimeter-9-sense)
is_a(centimeter-9-sense,centimeter.n.01)
has_sense(long-10,long-10-sense)
is_a(long-10-sense,long.r.02)
root(ROOT-0, slice-1)
det(chicken-3, the-2)
dobj(slice-1, chicken-3)
amod(slice-6, thin-5)
prep_into(slice-1, slice-6)
num(centimeter-9, 3-8)
prep_of(slice-6, centimeter-9)
advmod(slice-1, long-10)
has_pos(slice-1,VBP)
has_pos(the-2,DT)
has_pos(chicken-3,NN)
has_pos(thin-5,JJ)
has_pos(slice-6,NN)
has_pos(3-8,CD)
has_pos(centimeter-9,NN)
has_pos(long-10,RB)
has_sense(3-8, null)
has_sense(the-2, null)
---
// add a slice of cheese to your burger .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(slice-3,slice-3-sense)
is_a(slice-3-sense,piece.n.08)
has_sense(cheese-5,cheese-5-sense)
is_a(cheese-5-sense,cheese.n.01)
action_role(cheese-5,Item)
has_sense(burger-8,burger-8-sense)
is_a(burger-8-sense,hamburger.n.01)
root(ROOT-0, add-1)
det(slice-3, a-2)
dobj(add-1, slice-3)
prep_of(slice-3, cheese-5)
poss(burger-8, your-7)
prep_to(add-1, burger-8)
has_pos(add-1,VB)
has_pos(a-2,DT)
has_pos(slice-3,NN)
has_pos(cheese-5,NN)
has_pos(your-7,PRP$)
has_pos(burger-8,NN)
has_sense(your-7, null)
has_sense(a-2, null)
---
// slice some tomato and place them on bagel .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(tomato-3,tomato-3-sense)
is_a(tomato-3-sense,tomato.n.01)
action_role(tomato-3,Item)
has_sense(place-5,place-5-sense)
is_a(place-5-sense,put.v.01)
has_sense(bagel-8,bagel-8-sense)
is_a(bagel-8-sense,bagel.n.01)
root(ROOT-0, slice-1)
det(tomato-3, some-2)
dobj(slice-1, tomato-3)
conj_and(slice-1, place-5)
dobj(place-5, them-6)
prep_on(place-5, bagel-8)
has_pos(slice-1,VB)
has_pos(some-2,DT)
has_pos(tomato-3,NN)
has_pos(place-5,VB)
has_pos(them-6,PRP)
has_pos(bagel-8,NN)
has_sense(some-2, null)
has_sense(them-6, null)
---
// take one slice of the mozzarella cheese and lay it on top of the turkey .
has_sense(take-1,take-1-sense)
is_a(take-1-sense,take.v.04)
has_sense(slice-3,slice-3-sense)
is_a(slice-3-sense,piece.n.08)
has_sense(mozzarella-6,mozzarella-6-sense)
is_a(mozzarella-6-sense,mozzarella.n.01)
action_role(mozzarella-6,Item)
has_sense(cheese-7,cheese-7-sense)
is_a(cheese-7-sense,cheese.n.01)
action_role(cheese-7,Item)
has_sense(lay-9,lay-9-sense)
is_a(lay-9-sense,put.v.01)
has_sense(top-12,top-12-sense)
is_a(top-12-sense,top.n.02)
has_sense(turkey-15,turkey-15-sense)
is_a(turkey-15-sense,turkey.n.04)
root(ROOT-0, take-1)
num(slice-3, one-2)
dobj(take-1, slice-3)
det(cheese-7, the-5)
nn(cheese-7, mozzarella-6)
prep_of(slice-3, cheese-7)
conj_and(take-1, lay-9)
dobj(lay-9, it-10)
det(turkey-15, the-14)
prep_on_top_of(lay-9, turkey-15)
has_pos(take-1,VB)
has_pos(one-2,CD)
has_pos(slice-3,NN)
has_pos(the-5,DT)
has_pos(mozzarella-6,NN)
has_pos(cheese-7,NN)
has_pos(lay-9,VB)
has_pos(it-10,PRP)
has_pos(the-14,DT)
has_pos(turkey-15,NN)
has_sense(the-5, null)
has_sense(it-10, null)
has_sense(one-2, null)
has_sense(the-14, null)
---
// Slice apple as needed for recipe .
has_sense(Slice-1,Slice-1-sense)
is_a(Slice-1-sense,slice.v.03)
has_sense(apple-2,apple-2-sense)
is_a(apple-2-sense,apple.n.01)
action_role(apple-2,Item)
has_sense(recipe-6,recipe-6-sense)
is_a(recipe-6-sense,recipe.n.01)
action_role(recipe-6,Manner)
amod(apple-2, Slice-1)
root(ROOT-0, apple-2)
advmod(needed-4, as-3)
amod(apple-2, needed-4)
prep_for(needed-4, recipe-6)
has_pos(Slice-1,JJ)
has_pos(apple-2,NN)
has_pos(as-3,RB)
has_pos(needed-4,VBN)
has_pos(recipe-6,NN)
has_sense(as-3, null)
has_sense(needed-4, null)
---
// cover each with a good slice of cheese .
has_sense(slice-6,slice-6-sense)
is_a(slice-6-sense,piece.n.08)
has_sense(cheese-8,cheese-8-sense)
is_a(cheese-8-sense,cheese.n.01)
action_role(cheese-8,Item)
root(ROOT-0, cover-1)
dobj(cover-1, each-2)
det(slice-6, a-4)
amod(slice-6, good-5)
prep_with(cover-1, slice-6)
prep_of(slice-6, cheese-8)
has_pos(cover-1,VB)
has_pos(each-2,DT)
has_pos(a-4,DT)
has_pos(good-5,JJ)
has_pos(slice-6,NN)
has_pos(cheese-8,NN)
has_sense(each-2, null)
has_sense(cover-1, null)
has_sense(good-5, null)
has_sense(a-4, null)
---
// slice pita lengthwise and toast lightly .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(lengthwise-3,lengthwise-3-sense)
is_a(lengthwise-3-sense,lengthways.r.01)
action_role(lengthwise-3,Manner)
has_sense(toast-5,toast-5-sense)
is_a(toast-5-sense,crispen.v.01)
has_sense(lightly-6,lightly-6-sense)
is_a(lightly-6-sense,lightly.r.07)
nsubj(pita-2, slice-1)
root(ROOT-0, pita-2)
dobj(pita-2, lengthwise-3)
conj_and(lengthwise-3, toast-5)
advmod(pita-2, lightly-6)
has_pos(slice-1,NN)
has_pos(pita-2,VBZ)
has_pos(lengthwise-3,NN)
has_pos(toast-5,NN)
has_pos(lightly-6,RB)
has_sense(pita-2, null)
---
// slice the sweet_potato into even sized portion .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(sweet_potato-3,sweet_potato-3-sense)
is_a(sweet_potato-3-sense,sweet_potato.n.02)
action_role(sweet_potato-3,Item)
has_sense(portion-7,portion-7-sense)
is_a(portion-7-sense,helping.n.01)
action_role(portion-7,Pieces)
root(ROOT-0, slice-1)
det(sweet_potato-3, the-2)
dobj(slice-1, sweet_potato-3)
advmod(portion-7, even-5)
amod(portion-7, sized-6)
prep_into(slice-1, portion-7)
has_pos(slice-1,VBP)
has_pos(the-2,DT)
has_pos(sweet_potato-3,NN)
has_pos(even-5,RB)
has_pos(sized-6,JJ)
has_pos(portion-7,NN)
has_sense(even-5, null)
has_sense(sized-6, null)
has_sense(the-2, null)
---
// Cut the slice of bread in half with a knife .
has_sense(slice-3,slice-3-sense)
is_a(slice-3-sense,piece.n.08)
has_sense(bread-5,bread-5-sense)
is_a(bread-5-sense,bread.n.01)
action_role(bread-5,Item)
has_sense(half-7,half-7-sense)
is_a(half-7-sense,one-half.n.01)
action_role(half-7,Pieces)
has_sense(knife-10,knife-10-sense)
is_a(knife-10-sense,knife.n.01)
action_role(knife-10,Instrument)
root(ROOT-0, Cut-1)
det(slice-3, the-2)
dep(Cut-1, slice-3)
prep_of(slice-3, bread-5)
prep_in(bread-5, half-7)
det(knife-10, a-9)
prep_with(half-7, knife-10)
has_pos(Cut-1,NNP)
has_pos(the-2,DT)
has_pos(slice-3,NN)
has_pos(bread-5,NN)
has_pos(half-7,NN)
has_pos(a-9,DT)
has_pos(knife-10,NN)
has_sense(the-2, null)
has_sense(a-9, null)
has_sense(Cut-1, null)
---
// put 1 slice of butter on the pan for each egg .
has_sense(put-1,put-1-sense)
is_a(put-1-sense,put.v.01)
has_sense(slice-3,slice-3-sense)
is_a(slice-3-sense,piece.n.08)
has_sense(butter-5,butter-5-sense)
is_a(butter-5-sense,butter.n.01)
action_role(butter-5,Item)
has_sense(pan-8,pan-8-sense)
is_a(pan-8-sense,pan.n.01)
has_sense(egg-11,egg-11-sense)
is_a(egg-11-sense,egg.n.02)
root(ROOT-0, put-1)
num(slice-3, 1-2)
dobj(put-1, slice-3)
prep_of(slice-3, butter-5)
det(pan-8, the-7)
prep_on(put-1, pan-8)
det(egg-11, each-10)
prep_for(pan-8, egg-11)
has_pos(put-1,VB)
has_pos(1-2,CD)
has_pos(slice-3,NN)
has_pos(butter-5,NN)
has_pos(the-7,DT)
has_pos(pan-8,NN)
has_pos(each-10,DT)
has_pos(egg-11,NN)
has_sense(the-7, null)
has_sense(1-2, null)
has_sense(each-10, null)
---
// Cover each with a slice of cooked bacon .
has_sense(slice-5,slice-5-sense)
is_a(slice-5-sense,piece.n.08)
has_sense(cooked-7,cooked-7-sense)
is_a(cooked-7-sense,cooked.a.01)
has_sense(bacon-8,bacon-8-sense)
is_a(bacon-8-sense,bacon.n.01)
action_role(bacon-8,Item)
root(ROOT-0, Cover-1)
dep(Cover-1, each-2)
det(slice-5, a-4)
prep_with(each-2, slice-5)
amod(bacon-8, cooked-7)
prep_of(slice-5, bacon-8)
has_pos(Cover-1,NNP)
has_pos(each-2,DT)
has_pos(a-4,DT)
has_pos(slice-5,NN)
has_pos(cooked-7,JJ)
has_pos(bacon-8,NN)
has_sense(each-2, null)
has_sense(Cover-1, null)
has_sense(a-4, null)
---
// slice the polenta and put it in the pan cover the bottom .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(polenta-3,polenta-3-sense)
is_a(polenta-3-sense,polenta.n.01)
action_role(polenta-3,Item)
has_sense(put-5,put-5-sense)
is_a(put-5-sense,put.v.01)
has_sense(pan-9,pan-9-sense)
is_a(pan-9-sense,pan.n.01)
has_sense(cover-10,cover-10-sense)
is_a(cover-10-sense,cover.v.01)
has_sense(bottom-12,bottom-12-sense)
is_a(bottom-12-sense,bottom.n.02)
csubj(cover-10, slice-1)
det(polenta-3, the-2)
dobj(slice-1, polenta-3)
conj_and(slice-1, put-5)
dobj(put-5, it-6)
det(pan-9, the-8)
prep_in(put-5, pan-9)
root(ROOT-0, cover-10)
det(bottom-12, the-11)
dobj(cover-10, bottom-12)
has_pos(slice-1,VBP)
has_pos(the-2,DT)
has_pos(polenta-3,NN)
has_pos(put-5,VBD)
has_pos(it-6,PRP)
has_pos(the-8,DT)
has_pos(pan-9,NN)
has_pos(cover-10,VBP)
has_pos(the-11,DT)
has_pos(bottom-12,NN)
has_sense(the-8, null)
has_sense(it-6, null)
has_sense(the-11, null)
has_sense(the-2, null)
---
// lay the other slice of bread over the rest of the sandwich .
has_sense(lay-1,lay-1-sense)
is_a(lay-1-sense,lay.v.02)
has_sense(other-3,other-3-sense)
is_a(other-3-sense,other.a.01)
has_sense(slice-4,slice-4-sense)
is_a(slice-4-sense,piece.n.08)
has_sense(bread-6,bread-6-sense)
is_a(bread-6-sense,bread.n.01)
action_role(bread-6,Item)
has_sense(rest-9,rest-9-sense)
is_a(rest-9-sense,remainder.n.01)
has_sense(sandwich-12,sandwich-12-sense)
is_a(sandwich-12-sense,sandwich.n.01)
root(ROOT-0, lay-1)
det(slice-4, the-2)
amod(slice-4, other-3)
dobj(lay-1, slice-4)
prep_of(slice-4, bread-6)
det(rest-9, the-8)
prep_over(lay-1, rest-9)
det(sandwich-12, the-11)
prep_of(rest-9, sandwich-12)
has_pos(lay-1,VB)
has_pos(the-2,DT)
has_pos(other-3,JJ)
has_pos(slice-4,NN)
has_pos(bread-6,NN)
has_pos(the-8,DT)
has_pos(rest-9,NN)
has_pos(the-11,DT)
has_pos(sandwich-12,NN)
has_sense(the-2, null)
has_sense(the-8, null)
has_sense(the-11, null)
---
// slice the leek and carrot into small chunk .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(leek-3,leek-3-sense)
is_a(leek-3-sense,leek.n.01)
action_role(leek-3,Item)
has_sense(carrot-5,carrot-5-sense)
is_a(carrot-5-sense,carrot.n.01)
action_role(carrot-5,Item)
has_sense(small-7,small-7-sense)
is_a(small-7-sense,small.a.01)
has_sense(chunk-8,chunk-8-sense)
is_a(chunk-8-sense,ball.n.08)
action_role(chunk-8,Pieces)
root(ROOT-0, slice-1)
det(leek-3, the-2)
dobj(slice-1, leek-3)
conj_and(leek-3, carrot-5)
amod(chunk-8, small-7)
prep_into(slice-1, chunk-8)
has_pos(slice-1,VBP)
has_pos(the-2,DT)
has_pos(leek-3,NN)
has_pos(carrot-5,NN)
has_pos(small-7,JJ)
has_pos(chunk-8,NN)
has_sense(the-2, null)
---
// slice 500g of onion .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(onion-4,onion-4-sense)
is_a(onion-4-sense,onion.n.01)
action_role(onion-4,Item)
nn(500g-2, slice-1)
root(ROOT-0, 500g-2)
prep_of(500g-2, onion-4)
has_pos(slice-1,NN)
has_pos(500g-2,NNS)
has_pos(onion-4,NN)
has_sense(500g-2, null)
---
// place a toasted bread slice in each bowl so as it float .
has_sense(place-1,place-1-sense)
is_a(place-1-sense,put.v.01)
has_sense(toasted-3,toasted-3-sense)
is_a(toasted-3-sense,toasted.s.01)
has_sense(bread-4,bread-4-sense)
is_a(bread-4-sense,bread.n.01)
action_role(bread-4,Item)
has_sense(slice-5,slice-5-sense)
is_a(slice-5-sense,piece.n.08)
has_sense(bowl-8,bowl-8-sense)
is_a(bowl-8-sense,bowl.n.01)
has_sense(so-9,so-9-sense)
is_a(so-9-sense,so.r.03)
has_sense(float-12,float-12-sense)
is_a(float-12-sense,float.v.02)
root(ROOT-0, place-1)
det(slice-5, a-2)
amod(slice-5, toasted-3)
nn(slice-5, bread-4)
dobj(place-1, slice-5)
det(bowl-8, each-7)
prep_in(slice-5, bowl-8)
advmod(float-12, so-9)
dep(float-12, as-10)
nsubj(float-12, it-11)
dep(place-1, float-12)
has_pos(place-1,VB)
has_pos(a-2,DT)
has_pos(toasted-3,JJ)
has_pos(bread-4,NN)
has_pos(slice-5,NN)
has_pos(each-7,DT)
has_pos(bowl-8,NN)
has_pos(so-9,RB)
has_pos(as-10,IN)
has_pos(it-11,PRP)
has_pos(float-12,VBP)
has_sense(it-11, null)
has_sense(as-10, null)
has_sense(each-7, null)
has_sense(a-2, null)
---
// slice mushroom .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(mushroom-2,mushroom-2-sense)
is_a(mushroom-2-sense,mushroom.n.05)
action_role(mushroom-2,Item)
nsubj(mushroom-2, slice-1)
root(ROOT-0, mushroom-2)
has_pos(slice-1,NN)
has_pos(mushroom-2,VBZ)
---
// Cut a slice of butter .
has_sense(slice-3,slice-3-sense)
is_a(slice-3-sense,piece.n.08)
has_sense(butter-5,butter-5-sense)
is_a(butter-5-sense,butter.n.01)
action_role(butter-5,Item)
root(ROOT-0, Cut-1)
det(slice-3, a-2)
dep(Cut-1, slice-3)
prep_of(slice-3, butter-5)
has_pos(Cut-1,NNP)
has_pos(a-2,DT)
has_pos(slice-3,NN)
has_pos(butter-5,NN)
has_sense(Cut-1, null)
has_sense(a-2, null)
---
// halve or slice strawberries into a bowl .
has_sense(halve-1,halve-1-sense)
is_a(halve-1-sense,halve.v.01)
has_sense(slice-3,slice-3-sense)
is_a(slice-3-sense,slice.v.03)
has_sense(strawberries-4,strawberries-4-sense)
is_a(strawberries-4-sense,strawberry.n.01)
action_role(strawberries-4,Item)
has_sense(bowl-7,bowl-7-sense)
is_a(bowl-7-sense,bowl.n.01)
action_role(bowl-7,Place)
root(ROOT-0, halve-1)
conj_or(halve-1, slice-3)
dobj(halve-1, strawberries-4)
det(bowl-7, a-6)
prep_into(halve-1, bowl-7)
has_pos(halve-1,VB)
has_pos(slice-3,VB)
has_pos(strawberries-4,NNS)
has_pos(a-6,DT)
has_pos(bowl-7,NN)
has_sense(a-6, null)
---
// On top of the tomato , put a slice of one cheese .
has_sense(top-2,top-2-sense)
is_a(top-2-sense,top.n.02)
has_sense(tomato-5,tomato-5-sense)
is_a(tomato-5-sense,tomato.n.01)
has_sense(put-7,put-7-sense)
is_a(put-7-sense,put.v.01)
has_sense(slice-9,slice-9-sense)
is_a(slice-9-sense,piece.n.08)
has_sense(cheese-12,cheese-12-sense)
is_a(cheese-12-sense,cheese.n.01)
action_role(cheese-12,Item)
det(tomato-5, the-4)
prep_on_top_of(put-7, tomato-5)
root(ROOT-0, put-7)
det(slice-9, a-8)
dobj(put-7, slice-9)
num(cheese-12, one-11)
prep_of(slice-9, cheese-12)
has_pos(the-4,DT)
has_pos(tomato-5,NN)
has_pos(put-7,VB)
has_pos(a-8,DT)
has_pos(slice-9,NN)
has_pos(one-11,CD)
has_pos(cheese-12,NN)
has_sense(the-4, null)
has_sense(one-11, null)
has_sense(a-8, null)
---
// break up the bread slice into piece and layer it onto the mixture .
has_sense(break-1,break-1-sense)
is_a(break-1-sense,break.v.02)
has_sense(bread-4,bread-4-sense)
is_a(bread-4-sense,bread.n.01)
action_role(bread-4,Item)
has_sense(slice-5,slice-5-sense)
is_a(slice-5-sense,piece.n.08)
has_sense(piece-7,piece-7-sense)
is_a(piece-7-sense,piece.n.08)
action_role(piece-7,Pieces)
has_sense(layer-9,layer-9-sense)
is_a(layer-9-sense,layer.v.01)
has_sense(mixture-13,mixture-13-sense)
is_a(mixture-13-sense,concoction.n.01)
root(ROOT-0, break-1)
prt(break-1, up-2)
det(slice-5, the-3)
nn(slice-5, bread-4)
dobj(break-1, slice-5)
prep_into(break-1, piece-7)
conj_and(break-1, layer-9)
dobj(layer-9, it-10)
det(mixture-13, the-12)
prep_onto(layer-9, mixture-13)
has_pos(break-1,VB)
has_pos(up-2,RP)
has_pos(the-3,DT)
has_pos(bread-4,NN)
has_pos(slice-5,NN)
has_pos(piece-7,NN)
has_pos(layer-9,VB)
has_pos(it-10,PRP)
has_pos(the-12,DT)
has_pos(mixture-13,NN)
has_sense(the-3, null)
has_sense(it-10, null)
has_sense(up-2, null)
has_sense(the-12, null)
---
// slice pepperoni into tiny piece .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(pepperoni-2,pepperoni-2-sense)
is_a(pepperoni-2-sense,pepperoni.n.01)
action_role(pepperoni-2,Item)
has_sense(tiny-4,tiny-4-sense)
is_a(tiny-4-sense,bantam.s.01)
has_sense(piece-5,piece-5-sense)
is_a(piece-5-sense,piece.n.08)
action_role(piece-5,Pieces)
nn(pepperoni-2, slice-1)
root(ROOT-0, pepperoni-2)
amod(piece-5, tiny-4)
prep_into(pepperoni-2, piece-5)
has_pos(slice-1,NN)
has_pos(pepperoni-2,NNS)
has_pos(tiny-4,JJ)
has_pos(piece-5,NN)
---
// Slice 6-7 medium sized potato into thin slice .
has_sense(Slice-1,Slice-1-sense)
is_a(Slice-1-sense,slice.v.03)
has_sense(potato-5,potato-5-sense)
is_a(potato-5-sense,potato.n.01)
action_role(potato-5,Item)
has_sense(slice-8,slice-8-sense)
is_a(slice-8-sense,piece.n.08)
action_role(slice-8,Pieces)
amod(medium-3, Slice-1)
num(medium-3, 6-7-2)
nsubj(sized-4, medium-3)
root(ROOT-0, sized-4)
dobj(sized-4, potato-5)
amod(slice-8, thin-7)
prep_into(sized-4, slice-8)
has_pos(Slice-1,JJ)
has_pos(6-7-2,CD)
has_pos(medium-3,NN)
has_pos(sized-4,VBD)
has_pos(potato-5,NN)
has_pos(thin-7,JJ)
has_pos(slice-8,NN)
has_sense(thin-7, null)
has_sense(medium-3, null)
has_sense(6-7-2, null)
has_sense(sized-4, null)
---
// If the green_onion be a thick one , slice the thick stem in two .
has_sense(green_onion-3,green_onion-3-sense)
is_a(green_onion-3-sense,green_onion.n.01)
has_sense(be-4,be-4-sense)
is_a(be-4-sense,be.v.01)
has_sense(thick-6,thick-6-sense)
is_a(thick-6-sense,thick.a.01)
has_sense(one-7,one-7-sense)
is_a(one-7-sense,one.n.02)
has_sense(slice-9,slice-9-sense)
is_a(slice-9-sense,slice.v.03)
has_sense(thick-11,thick-11-sense)
is_a(thick-11-sense,thick.a.01)
has_sense(stem-12,stem-12-sense)
is_a(stem-12-sense,stalk.n.02)
action_role(stem-12,Item)
mark(one-7, If-1)
det(green_onion-3, the-2)
nsubj(one-7, green_onion-3)
cop(one-7, be-4)
det(one-7, a-5)
amod(one-7, thick-6)
advcl(slice-9, one-7)
root(ROOT-0, slice-9)
det(stem-12, the-10)
amod(stem-12, thick-11)
dobj(slice-9, stem-12)
prep_in(slice-9, two-14)
has_pos(If-1,IN)
has_pos(the-2,DT)
has_pos(green_onion-3,NN)
has_pos(be-4,VB)
has_pos(a-5,DT)
has_pos(thick-6,JJ)
has_pos(one-7,NN)
has_pos(slice-9,VB)
has_pos(the-10,DT)
has_pos(thick-11,JJ)
has_pos(stem-12,NN)
has_pos(two-14,CD)
has_sense(the-2, null)
has_sense(If-1, null)
has_sense(a-5, null)
has_sense(two-14, null)
has_sense(the-10, null)
---
// slice eggs on top of the rice .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(eggs-2,eggs-2-sense)
is_a(eggs-2-sense,egg.n.02)
action_role(eggs-2,Item)
has_sense(top-4,top-4-sense)
is_a(top-4-sense,top.n.02)
action_role(top-4,Place)
has_sense(rice-7,rice-7-sense)
is_a(rice-7-sense,rice.n.01)
nn(eggs-2, slice-1)
root(ROOT-0, eggs-2)
prep_on(eggs-2, top-4)
det(rice-7, the-6)
prep_of(eggs-2, rice-7)
has_pos(slice-1,NN)
has_pos(eggs-2,NNS)
has_pos(top-4,NN)
has_pos(the-6,DT)
has_pos(rice-7,NN)
has_sense(the-6, null)
---
// place each slice onto the pan .
has_sense(place-1,place-1-sense)
is_a(place-1-sense,put.v.01)
has_sense(slice-3,slice-3-sense)
is_a(slice-3-sense,piece.n.08)
has_sense(pan-6,pan-6-sense)
is_a(pan-6-sense,pan.n.01)
root(ROOT-0, place-1)
det(slice-3, each-2)
dobj(place-1, slice-3)
det(pan-6, the-5)
prep_onto(place-1, pan-6)
has_pos(place-1,VB)
has_pos(each-2,DT)
has_pos(slice-3,NN)
has_pos(the-5,DT)
has_pos(pan-6,NN)
has_sense(each-2, null)
has_sense(the-5, null)
---
// slice your tomato very thinly and spread evenly over one slice of bread .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(tomato-3,tomato-3-sense)
is_a(tomato-3-sense,tomato.n.01)
action_role(tomato-3,Item)
has_sense(very-4,very-4-sense)
is_a(very-4-sense,very.r.01)
has_sense(thinly-5,thinly-5-sense)
is_a(thinly-5-sense,thinly.r.03)
action_role(thinly-5,Manner)
has_sense(spread-7,spread-7-sense)
is_a(spread-7-sense,spread.v.09)
has_sense(evenly-8,evenly-8-sense)
is_a(evenly-8-sense,evenly.r.01)
has_sense(slice-11,slice-11-sense)
is_a(slice-11-sense,piece.n.08)
has_sense(bread-13,bread-13-sense)
is_a(bread-13-sense,bread.n.01)
root(ROOT-0, slice-1)
poss(tomato-3, your-2)
nsubj(thinly-5, tomato-3)
advmod(thinly-5, very-4)
xcomp(slice-1, thinly-5)
conj_and(slice-1, spread-7)
advmod(spread-7, evenly-8)
num(slice-11, one-10)
prep_over(spread-7, slice-11)
prep_of(slice-11, bread-13)
has_pos(slice-1,VBP)
has_pos(your-2,PRP$)
has_pos(tomato-3,NN)
has_pos(very-4,RB)
has_pos(thinly-5,RB)
has_pos(spread-7,VBD)
has_pos(evenly-8,RB)
has_pos(one-10,CD)
has_pos(slice-11,NN)
has_pos(bread-13,NN)
has_sense(your-2, null)
has_sense(one-10, null)
---
// add a slice of butter to the pan .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(slice-3,slice-3-sense)
is_a(slice-3-sense,piece.n.08)
has_sense(butter-5,butter-5-sense)
is_a(butter-5-sense,butter.n.01)
action_role(butter-5,Item)
has_sense(pan-8,pan-8-sense)
is_a(pan-8-sense,pan.n.01)
root(ROOT-0, add-1)
det(slice-3, a-2)
dobj(add-1, slice-3)
prep_of(slice-3, butter-5)
det(pan-8, the-7)
prep_to(add-1, pan-8)
has_pos(add-1,VB)
has_pos(a-2,DT)
has_pos(slice-3,NN)
has_pos(butter-5,NN)
has_pos(the-7,DT)
has_pos(pan-8,NN)
has_sense(the-7, null)
has_sense(a-2, null)
---
// cut a slice of butter over the mix .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.n.17)
has_sense(slice-3,slice-3-sense)
is_a(slice-3-sense,piece.n.08)
has_sense(butter-5,butter-5-sense)
is_a(butter-5-sense,butter.n.01)
action_role(butter-5,Item)
has_sense(mix-8,mix-8-sense)
is_a(mix-8-sense,mix.n.01)
root(ROOT-0, cut-1)
det(slice-3, a-2)
dobj(cut-1, slice-3)
prep_of(slice-3, butter-5)
det(mix-8, the-7)
prep_over(butter-5, mix-8)
has_pos(cut-1,VB)
has_pos(a-2,DT)
has_pos(slice-3,NN)
has_pos(butter-5,NN)
has_pos(the-7,DT)
has_pos(mix-8,NN)
has_sense(the-7, null)
has_sense(a-2, null)
---
// lay a slice of corned_beef on the top .
has_sense(lay-1,lay-1-sense)
is_a(lay-1-sense,put.v.01)
has_sense(slice-3,slice-3-sense)
is_a(slice-3-sense,piece.n.08)
has_sense(corned_beef-5,corned_beef-5-sense)
is_a(corned_beef-5-sense,bully_beef.n.01)
action_role(corned_beef-5,Item)
has_sense(top-8,top-8-sense)
is_a(top-8-sense,top.n.02)
root(ROOT-0, lay-1)
det(slice-3, a-2)
dobj(lay-1, slice-3)
prep_of(slice-3, corned_beef-5)
det(top-8, the-7)
prep_on(corned_beef-5, top-8)
has_pos(lay-1,VB)
has_pos(a-2,DT)
has_pos(slice-3,NN)
has_pos(corned_beef-5,NN)
has_pos(the-7,DT)
has_pos(top-8,NN)
has_sense(the-7, null)
has_sense(a-2, null)
---
// Finely slice the remaining flesh .
has_sense(Finely-1,Finely-1-sense)
is_a(Finely-1-sense,finely.r.01)
action_role(Finely-1,Manner)
has_sense(slice-2,slice-2-sense)
is_a(slice-2-sense,slice.v.03)
has_sense(flesh-5,flesh-5-sense)
is_a(flesh-5-sense,flesh.n.01)
action_role(flesh-5,Item)
nsubj(slice-2, Finely-1)
root(ROOT-0, slice-2)
det(flesh-5, the-3)
amod(flesh-5, remaining-4)
dobj(slice-2, flesh-5)
has_pos(Finely-1,NNP)
has_pos(slice-2,VBP)
has_pos(the-3,DT)
has_pos(remaining-4,VBG)
has_pos(flesh-5,NN)
has_sense(remaining-4, null)
has_sense(the-3, null)
---
// Stand the melon on end , and carefully slice down through the center .
has_sense(melon-3,melon-3-sense)
is_a(melon-3-sense,melon.n.01)
has_sense(end-5,end-5-sense)
is_a(end-5-sense,end.n.01)
has_sense(carefully-8,carefully-8-sense)
is_a(carefully-8-sense,carefully.r.01)
has_sense(slice-9,slice-9-sense)
is_a(slice-9-sense,slit.v.01)
has_sense(center-13,center-13-sense)
is_a(center-13-sense,center.n.01)
action_role(center-13,Item)
root(ROOT-0, Stand-1)
det(melon-3, the-2)
dobj(Stand-1, melon-3)
prep_on(Stand-1, end-5)
cc(Stand-1, and-7)
advmod(Stand-1, carefully-8)
ccomp(Stand-1, slice-9)
prt(slice-9, down-10)
det(center-13, the-12)
prep_through(slice-9, center-13)
has_pos(Stand-1,VB)
has_pos(the-2,DT)
has_pos(melon-3,NN)
has_pos(end-5,NN)
has_pos(and-7,CC)
has_pos(carefully-8,RB)
has_pos(slice-9,VBP)
has_pos(down-10,RP)
has_pos(the-12,DT)
has_pos(center-13,NN)
has_sense(Stand-1, null)
has_sense(the-2, null)
has_sense(down-10, null)
has_sense(the-12, null)
has_sense(and-7, null)
---
// Brush the bottom of a slice of bread with olive_oil .
has_sense(bottom-3,bottom-3-sense)
is_a(bottom-3-sense,bottom.n.02)
has_sense(slice-6,slice-6-sense)
is_a(slice-6-sense,piece.n.08)
has_sense(bread-8,bread-8-sense)
is_a(bread-8-sense,bread.n.01)
action_role(bread-8,Item)
has_sense(olive_oil-10,olive_oil-10-sense)
is_a(olive_oil-10-sense,olive_oil.n.01)
root(ROOT-0, Brush-1)
det(bottom-3, the-2)
dep(Brush-1, bottom-3)
det(slice-6, a-5)
prep_of(bottom-3, slice-6)
prep_of(slice-6, bread-8)
prep_with(bread-8, olive_oil-10)
has_pos(Brush-1,NNP)
has_pos(the-2,DT)
has_pos(bottom-3,NN)
has_pos(a-5,DT)
has_pos(slice-6,NN)
has_pos(bread-8,NN)
has_pos(olive_oil-10,NN)
has_sense(Brush-1, null)
has_sense(the-2, null)
has_sense(a-5, null)
---
// slice the olive and onion finely .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(olive-3,olive-3-sense)
is_a(olive-3-sense,olive.n.01)
action_role(olive-3,Item)
has_sense(onion-5,onion-5-sense)
is_a(onion-5-sense,onion.n.01)
action_role(onion-5,Item)
has_sense(finely-6,finely-6-sense)
is_a(finely-6-sense,finely.r.01)
action_role(finely-6,Manner)
root(ROOT-0, slice-1)
det(olive-3, the-2)
dobj(slice-1, olive-3)
conj_and(olive-3, onion-5)
advmod(slice-1, finely-6)
has_pos(slice-1,VBP)
has_pos(the-2,DT)
has_pos(olive-3,NN)
has_pos(onion-5,NN)
has_pos(finely-6,RB)
has_sense(the-2, null)
---
// slice the mushroom .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(mushroom-3,mushroom-3-sense)
is_a(mushroom-3-sense,mushroom.n.05)
action_role(mushroom-3,Item)
root(ROOT-0, slice-1)
det(mushroom-3, the-2)
dep(slice-1, mushroom-3)
has_pos(slice-1,NN)
has_pos(the-2,DT)
has_pos(mushroom-3,NN)
has_sense(the-2, null)
---
// slice a flank_steak into two equal piece .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(flank_steak-3,flank_steak-3-sense)
is_a(flank_steak-3-sense,flank_steak.n.01)
action_role(flank_steak-3,Item)
has_sense(equal-6,equal-6-sense)
is_a(equal-6-sense,equal.a.01)
has_sense(piece-7,piece-7-sense)
is_a(piece-7-sense,piece.n.01)
action_role(piece-7,Pieces)
root(ROOT-0, slice-1)
det(flank_steak-3, a-2)
dobj(slice-1, flank_steak-3)
num(piece-7, two-5)
amod(piece-7, equal-6)
prep_into(slice-1, piece-7)
has_pos(slice-1,VBP)
has_pos(a-2,DT)
has_pos(flank_steak-3,NN)
has_pos(two-5,CD)
has_pos(equal-6,JJ)
has_pos(piece-7,NN)
has_sense(a-2, null)
has_sense(two-5, null)
---
// peel the onion and slice them .
has_sense(peel-1,peel-1-sense)
is_a(peel-1-sense,skin.v.04)
has_sense(onion-3,onion-3-sense)
is_a(onion-3-sense,onion.n.01)
action_role(onion-3,Item)
has_sense(slice-5,slice-5-sense)
is_a(slice-5-sense,slice.v.03)
root(ROOT-0, peel-1)
det(onion-3, the-2)
dobj(peel-1, onion-3)
conj_and(peel-1, slice-5)
dobj(slice-5, them-6)
has_pos(peel-1,VB)
has_pos(the-2,DT)
has_pos(onion-3,NN)
has_pos(slice-5,VBP)
has_pos(them-6,PRP)
has_sense(them-6, null)
has_sense(the-2, null)
---
// turn the pointed end to your left and slice cross ways .
has_sense(turn-1,turn-1-sense)
is_a(turn-1-sense,turn.n.02)
has_sense(pointed-3,pointed-3-sense)
is_a(pointed-3-sense,pointed.a.01)
has_sense(end-4,end-4-sense)
is_a(end-4-sense,end.n.01)
has_sense(left-7,left-7-sense)
is_a(left-7-sense,left.n.01)
has_sense(slice-9,slice-9-sense)
is_a(slice-9-sense,slice.v.03)
root(ROOT-0, turn-1)
det(end-4, the-2)
amod(end-4, pointed-3)
dobj(turn-1, end-4)
poss(left-7, your-6)
prep_to(turn-1, left-7)
nn(ways-11, slice-9)
nn(ways-11, cross-10)
conj_and(left-7, ways-11)
has_pos(turn-1,VB)
has_pos(the-2,DT)
has_pos(pointed-3,JJ)
has_pos(end-4,NN)
has_pos(your-6,PRP$)
has_pos(left-7,NN)
has_pos(slice-9,NN)
has_pos(cross-10,NN)
has_pos(ways-11,NNS)
has_sense(your-6, null)
has_sense(the-2, null)
has_sense(ways-11, null)
has_sense(cross-10, null)
---
// slice the banana_skin lengthwise and then peel off the entire skin .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slit.v.01)
has_sense(banana_skin-3,banana_skin-3-sense)
is_a(banana_skin-3-sense,banana_peel.n.01)
action_role(banana_skin-3,Item)
has_sense(lengthwise-4,lengthwise-4-sense)
is_a(lengthwise-4-sense,lengthwise.a.01)
action_role(lengthwise-4,Manner)
has_sense(then-6,then-6-sense)
is_a(then-6-sense,then.r.01)
has_sense(peel-7,peel-7-sense)
is_a(peel-7-sense,skin.v.04)
has_sense(entire-10,entire-10-sense)
is_a(entire-10-sense,entire.s.01)
has_sense(skin-11,skin-11-sense)
is_a(skin-11-sense,peel.n.02)
root(ROOT-0, slice-1)
det(lengthwise-4, the-2)
nn(lengthwise-4, banana_skin-3)
dobj(slice-1, lengthwise-4)
advmod(peel-7, then-6)
conj_and(slice-1, peel-7)
prt(peel-7, off-8)
det(skin-11, the-9)
amod(skin-11, entire-10)
dobj(peel-7, skin-11)
has_pos(slice-1,VBG)
has_pos(the-2,DT)
has_pos(banana_skin-3,NN)
has_pos(lengthwise-4,NN)
has_pos(then-6,RB)
has_pos(peel-7,VB)
has_pos(off-8,RP)
has_pos(the-9,DT)
has_pos(entire-10,JJ)
has_pos(skin-11,NN)
has_sense(the-2, null)
has_sense(the-9, null)
has_sense(off-8, null)
---
// slice banana into thin strip and place on plate .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(banana-2,banana-2-sense)
is_a(banana-2-sense,banana.n.02)
action_role(banana-2,Manner)
has_sense(thin-4,thin-4-sense)
is_a(thin-4-sense,thin.a.01)
has_sense(strip-5,strip-5-sense)
is_a(strip-5-sense,strip.n.01)
action_role(strip-5,Pieces)
has_sense(place-7,place-7-sense)
is_a(place-7-sense,put.v.01)
has_sense(plate-9,plate-9-sense)
is_a(plate-9-sense,plate.n.04)
nn(banana-2, slice-1)
root(ROOT-0, banana-2)
amod(strip-5, thin-4)
prep_into(banana-2, strip-5)
conj_and(strip-5, place-7)
prep_on(banana-2, plate-9)
has_pos(slice-1,NN)
has_pos(banana-2,NN)
has_pos(thin-4,JJ)
has_pos(strip-5,NN)
has_pos(place-7,NN)
has_pos(plate-9,NN)
---
// slice it straight into the blender .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(straight-3,straight-3-sense)
is_a(straight-3-sense,directly.r.01)
has_sense(blender-6,blender-6-sense)
is_a(blender-6-sense,blender.n.01)
action_role(blender-6,Place)
root(ROOT-0, slice-1)
dobj(slice-1, it-2)
advmod(slice-1, straight-3)
det(blender-6, the-5)
prep_into(slice-1, blender-6)
has_pos(slice-1,VBP)
has_pos(it-2,PRP)
has_pos(straight-3,RB)
has_pos(the-5,DT)
has_pos(blender-6,NN)
has_sense(the-5, null)
has_sense(it-2, null)
---
// slice up one lemon and place it inside the cavity .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(lemon-4,lemon-4-sense)
is_a(lemon-4-sense,lemon.n.01)
action_role(lemon-4,Item)
has_sense(place-6,place-6-sense)
is_a(place-6-sense,put.v.01)
root(ROOT-0, slice-1)
prt(slice-1, up-2)
num(lemon-4, one-3)
dobj(slice-1, lemon-4)
conj_and(slice-1, place-6)
dobj(place-6, it-7)
det(cavity-10, the-9)
prep_inside(place-6, cavity-10)
has_pos(slice-1,VB)
has_pos(up-2,RP)
has_pos(one-3,CD)
has_pos(lemon-4,NNS)
has_pos(place-6,VB)
has_pos(it-7,PRP)
has_pos(the-9,DT)
has_pos(cavity-10,NN)
has_sense(one-3, null)
has_sense(the-9, null)
has_sense(it-7, null)
has_sense(cavity-10, null)
has_sense(up-2, null)
---
// Carefully slice the cabbage into shred .
has_sense(Carefully-1,Carefully-1-sense)
is_a(Carefully-1-sense,carefully.r.01)
action_role(Carefully-1,Manner)
has_sense(slice-2,slice-2-sense)
is_a(slice-2-sense,slice.v.03)
has_sense(cabbage-4,cabbage-4-sense)
is_a(cabbage-4-sense,cabbage.n.01)
action_role(cabbage-4,Item)
has_sense(shred-6,shred-6-sense)
is_a(shred-6-sense,shred.n.01)
action_role(shred-6,Pieces)
nsubj(slice-2, Carefully-1)
root(ROOT-0, slice-2)
det(cabbage-4, the-3)
dobj(slice-2, cabbage-4)
prep_into(slice-2, shred-6)
has_pos(Carefully-1,NNP)
has_pos(slice-2,VBP)
has_pos(the-3,DT)
has_pos(cabbage-4,NN)
has_pos(shred-6,NN)
has_sense(the-3, null)
---
// slice your tomato very thinly .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(tomato-3,tomato-3-sense)
is_a(tomato-3-sense,tomato.n.01)
action_role(tomato-3,Item)
has_sense(very-4,very-4-sense)
is_a(very-4-sense,very.r.01)
has_sense(thinly-5,thinly-5-sense)
is_a(thinly-5-sense,thinly.r.03)
action_role(thinly-5,Manner)
root(ROOT-0, slice-1)
poss(tomato-3, your-2)
nsubj(thinly-5, tomato-3)
advmod(thinly-5, very-4)
xcomp(slice-1, thinly-5)
has_pos(slice-1,VBP)
has_pos(your-2,PRP$)
has_pos(tomato-3,NN)
has_pos(very-4,RB)
has_pos(thinly-5,RB)
has_sense(your-2, null)
---
// slice the olive and spring_onion finely .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(olive-3,olive-3-sense)
is_a(olive-3-sense,olive.n.01)
action_role(olive-3,Item)
has_sense(spring_onion-5,spring_onion-5-sense)
is_a(spring_onion-5-sense,green_onion.n.01)
action_role(spring_onion-5,Item)
has_sense(finely-6,finely-6-sense)
is_a(finely-6-sense,finely.r.01)
action_role(finely-6,Manner)
root(ROOT-0, slice-1)
det(olive-3, the-2)
dobj(slice-1, olive-3)
conj_and(olive-3, spring_onion-5)
advmod(slice-1, finely-6)
has_pos(slice-1,VBP)
has_pos(the-2,DT)
has_pos(olive-3,NN)
has_pos(spring_onion-5,NN)
has_pos(finely-6,RB)
has_sense(the-2, null)
---
// slice the onion in half length ways .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(onion-3,onion-3-sense)
is_a(onion-3-sense,onion.n.01)
action_role(onion-3,Item)
has_sense(half-5,half-5-sense)
is_a(half-5-sense,half.s.01)
has_sense(length-6,length-6-sense)
is_a(length-6-sense,length.n.01)
action_role(length-6,Manner)
root(ROOT-0, slice-1)
det(onion-3, the-2)
dep(slice-1, onion-3)
amod(ways-7, half-5)
nn(ways-7, length-6)
prep_in(onion-3, ways-7)
has_pos(slice-1,NN)
has_pos(the-2,DT)
has_pos(onion-3,NN)
has_pos(half-5,JJ)
has_pos(length-6,NN)
has_pos(ways-7,NNS)
has_sense(ways-7, null)
has_sense(the-2, null)
---
// wash the zucchini and slice them down the middle .
has_sense(wash-1,wash-1-sense)
is_a(wash-1-sense,wash.v.03)
has_sense(zucchini-3,zucchini-3-sense)
is_a(zucchini-3-sense,zucchini.n.01)
action_role(zucchini-3,Item)
has_sense(slice-5,slice-5-sense)
is_a(slice-5-sense,slit.v.01)
has_sense(middle-9,middle-9-sense)
is_a(middle-9-sense,center.n.01)
root(ROOT-0, wash-1)
det(zucchini-3, the-2)
dobj(wash-1, zucchini-3)
conj_and(wash-1, slice-5)
dobj(slice-5, them-6)
advmod(slice-5, down-7)
det(middle-9, the-8)
pobj(down-7, middle-9)
has_pos(wash-1,VB)
has_pos(the-2,DT)
has_pos(zucchini-3,NN)
has_pos(slice-5,VBP)
has_pos(them-6,PRP)
has_pos(down-7,RB)
has_pos(the-8,DT)
has_pos(middle-9,NN)
has_sense(down-7, null)
has_sense(the-2, null)
has_sense(them-6, null)
has_sense(the-8, null)
---
// slice down from the top to the rind in even slice .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slice.v.03)
has_sense(top-5,top-5-sense)
is_a(top-5-sense,top.n.01)
has_sense(rind-8,rind-8-sense)
is_a(rind-8-sense,rind.n.01)
has_sense(even-10,even-10-sense)
is_a(even-10-sense,even.s.02)
has_sense(slice-11,slice-11-sense)
is_a(slice-11-sense,piece.n.08)
action_role(slice-11,Pieces)
root(ROOT-0, slice-1)
advmod(slice-1, down-2)
det(top-5, the-4)
prep_from(down-2, top-5)
det(slice-11, the-7)
amod(slice-11, rind-8)
prep(rind-8, in-9)
pcomp(in-9, even-10)
prep_to(slice-1, slice-11)
has_pos(slice-1,VBP)
has_pos(down-2,RB)
has_pos(the-4,DT)
has_pos(top-5,NN)
has_pos(the-7,DT)
has_pos(rind-8,JJ)
has_pos(in-9,IN)
has_pos(even-10,RB)
has_pos(slice-11,NN)
has_sense(the-7, null)
has_sense(the-4, null)
has_sense(down-2, null)
has_sense(in-9, null)
---
// add sliced potato into cooking_utensil .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(sliced-2,sliced-2-sense)
is_a(sliced-2-sense,chopped.s.01)
has_sense(potato-3,potato-3-sense)
is_a(potato-3-sense,potato.n.01)
action_role(potato-3,Item)
has_sense(cooking_utensil-5,cooking_utensil-5-sense)
is_a(cooking_utensil-5-sense,cooking_utensil.n.01)
action_role(cooking_utensil-5,Place)
root(ROOT-0, add-1)
amod(potato-3, sliced-2)
dobj(add-1, potato-3)
prep_into(add-1, cooking_utensil-5)
has_pos(add-1,VB)
has_pos(sliced-2,JJ)
has_pos(potato-3,NN)
has_pos(cooking_utensil-5,NN)
---
// finely slice the bacon and grate the parmesan .
has_sense(finely-1,finely-1-sense)
is_a(finely-1-sense,finely.r.01)
action_role(finely-1,Manner)
has_sense(slice-2,slice-2-sense)
is_a(slice-2-sense,slice.v.03)
has_sense(bacon-4,bacon-4-sense)
is_a(bacon-4-sense,bacon.n.01)
action_role(bacon-4,Item)
has_sense(parmesan-8,parmesan-8-sense)
is_a(parmesan-8-sense,parmesan.n.01)
nsubj(slice-2, finely-1)
root(ROOT-0, slice-2)
det(bacon-4, the-3)
dobj(slice-2, bacon-4)
conj_and(slice-2, grate-6)
det(parmesan-8, the-7)
dobj(grate-6, parmesan-8)
has_pos(finely-1,NNP)
has_pos(slice-2,VBP)
has_pos(the-3,DT)
has_pos(bacon-4,NN)
has_pos(grate-6,VBP)
has_pos(the-7,DT)
has_pos(parmesan-8,NN)
has_sense(the-7, null)
has_sense(the-3, null)
has_sense(grate-6, null)
---
// slice it half with a fruit knife .
has_sense(slice-1,slice-1-sense)
is_a(slice-1-sense,slit.v.01)
has_sense(fruit-6,fruit-6-sense)
is_a(fruit-6-sense,fruit.n.01)
has_sense(knife-7,knife-7-sense)
is_a(knife-7-sense,knife.n.01)
action_role(knife-7,Instrument)
root(ROOT-0, slice-1)
nsubj(half-3, it-2)
xcomp(slice-1, half-3)
det(knife-7, a-5)
nn(knife-7, fruit-6)
prep_with(half-3, knife-7)
has_pos(slice-1,VBP)
has_pos(it-2,PRP)
has_pos(half-3,RB)
has_pos(a-5,DT)
has_pos(fruit-6,NN)
has_pos(knife-7,NN)
has_sense(half-3, null)
has_sense(a-5, null)
has_sense(it-2, null)
---
// Thinly slice remaining lemon .
has_sense(Thinly-1,Thinly-1-sense)
is_a(Thinly-1-sense,thinly.r.03)
action_role(Thinly-1,Manner)
has_sense(slice-2,slice-2-sense)
is_a(slice-2-sense,slice.v.03)
has_sense(lemon-4,lemon-4-sense)
is_a(lemon-4-sense,lemon.n.01)
action_role(lemon-4,Item)
nsubj(slice-2, Thinly-1)
root(ROOT-0, slice-2)
amod(lemon-4, remaining-3)
dobj(slice-2, lemon-4)
has_pos(Thinly-1,NNP)
has_pos(slice-2,VBP)
has_pos(remaining-3,VBG)
has_pos(lemon-4,NNS)
has_sense(remaining-3, null)
---
// place the two eggs on one slice of bread .
has_sense(place-1,place-1-sense)
is_a(place-1-sense,put.v.01)
has_sense(eggs-4,eggs-4-sense)
is_a(eggs-4-sense,egg.n.02)
has_sense(slice-7,slice-7-sense)
is_a(slice-7-sense,piece.n.08)
has_sense(bread-9,bread-9-sense)
is_a(bread-9-sense,bread.n.01)
action_role(bread-9,Item)
root(ROOT-0, place-1)
det(eggs-4, the-2)
num(eggs-4, two-3)
dobj(place-1, eggs-4)
num(slice-7, one-6)
prep_on(eggs-4, slice-7)
prep_of(slice-7, bread-9)
has_pos(place-1,VB)
has_pos(the-2,DT)
has_pos(two-3,CD)
has_pos(eggs-4,NNS)
has_pos(one-6,CD)
has_pos(slice-7,NN)
has_pos(bread-9,NN)
has_sense(two-3, null)
has_sense(the-2, null)
has_sense(one-6, null)