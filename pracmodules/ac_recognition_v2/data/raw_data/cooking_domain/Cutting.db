/* **************************************************************************** 
 * WIKIHOW.COM -- NATURAL-LANGUAGE INSTRUCTIONS
 * 
 * (C) 2011-2013 by Daniel Nyga (nyga@cs.uni-bremen.edu)
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 // cut the steak into portion-size piece .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.v.01)
has_sense(steak-3,steak-3-sense)
is_a(steak-3-sense,steak.n.01)
action_role(steak-3,Item)
has_sense(piece-6,piece-6-sense)
is_a(piece-6-sense,piece.n.01)
action_role(piece-6,Pieces)
root(ROOT-0, cut-1)
det(steak-3, the-2)
dobj(cut-1, steak-3)
amod(piece-6, portion-size-5)
prep_into(cut-1, piece-6)
has_pos(cut-1,VB)
has_pos(the-2,DT)
has_pos(steak-3,NN)
has_pos(portion-size-5,JJ)
has_pos(piece-6,NN)
has_sense(the-2, null)
has_sense(portion-size-5, null)
---
// Cut the roll out dough into as many 1 '' wide strips as it will yield .
has_sense(Cut-1,Cut-1-sense)
is_a(Cut-1-sense,cut.v.01)
has_sense(roll-3,roll-3-sense)
is_a(roll-3-sense,roll_out.v.01)
has_sense(dough-5,dough-5-sense)
is_a(dough-5-sense,dough.n.01)
action_role(dough-5,Item)
has_sense(many-8,many-8-sense)
is_a(many-8-sense,many.a.01)
has_sense(wide-11,wide-11-sense)
is_a(wide-11-sense,wide.a.01)
has_sense(yield-16,yield-16-sense)
is_a(yield-16-sense,render.v.04)
nsubj(dough-5, Cut-1)
det(roll-3, the-2)
npadvmod(out-4, roll-3)
advmod(dough-5, out-4)
root(ROOT-0, dough-5)
prep(dough-5, into-6)
pcomp(into-6, as-7)
amod(1-9, many-8)
pobj(as-7, 1-9)
amod(strips-12, wide-11)
dobj(dough-5, strips-12)
mark(yield-16, as-13)
nsubj(yield-16, it-14)
aux(yield-16, will-15)
dep(strips-12, yield-16)
has_pos(Cut-1,NNP)
has_pos(the-2,DT)
has_pos(roll-3,NN)
has_pos(out-4,IN)
has_pos(dough-5,VBD)
has_pos(into-6,IN)
has_pos(as-7,IN)
has_pos(many-8,JJ)
has_pos(1-9,CD)
has_pos(wide-11,JJ)
has_pos(strips-12,NNS)
has_pos(as-13,IN)
has_pos(it-14,PRP)
has_pos(will-15,MD)
has_pos(yield-16,VB)
has_sense(1-9, null)
has_sense(it-14, null)
has_sense(as-7, null)
has_sense(the-2, null)
has_sense(will-15, null)
has_sense(as-13, null)
has_sense(out-4, null)
has_sense(strips-12, null)
has_sense(into-6, null)
---
// make another cut all the way again , like a wedge .
has_sense(make-1,make-1-sense)
is_a(make-1-sense,make.v.03)
has_sense(way-6,way-6-sense)
is_a(way-6-sense,manner.n.01)
has_sense(again-7,again-7-sense)
is_a(again-7-sense,again.r.01)
has_sense(wedge-11,wedge-11-sense)
is_a(wedge-11-sense,wedge.n.01)
action_role(wedge-11,Pieces)
root(ROOT-0, make-1)
nsubj(cut-3, another-2)
ccomp(make-1, cut-3)
predet(way-6, all-4)
det(way-6, the-5)
dobj(cut-3, way-6)
advmod(cut-3, again-7)
det(wedge-11, a-10)
prep_like(cut-3, wedge-11)
has_pos(make-1,VB)
has_pos(another-2,DT)
has_pos(cut-3,VB)
has_pos(all-4,PDT)
has_pos(the-5,DT)
has_pos(way-6,NN)
has_pos(again-7,RB)
has_pos(a-10,DT)
has_pos(wedge-11,NN)
has_sense(another-2, null)
has_sense(the-5, null)
has_sense(a-10, null)
has_sense(cut-3, null)
has_sense(all-4, null)
---
// When an onion be halve , it be much easy to cut into thin slice .
has_sense(onion-3,onion-3-sense)
is_a(onion-3-sense,onion.n.03)
action_role(onion-3,Item)
has_sense(be-4,be-4-sense)
is_a(be-4-sense,be.v.05)
has_sense(halve-5,halve-5-sense)
is_a(halve-5-sense,halve.v.01)
has_sense(be-8,be-8-sense)
is_a(be-8-sense,be.v.01)
has_sense(much-9,much-9-sense)
is_a(much-9-sense,much.r.01)
has_sense(easy-10,easy-10-sense)
is_a(easy-10-sense,easy.a.01)
has_sense(cut-12,cut-12-sense)
is_a(cut-12-sense,cut.v.25)
has_sense(slice-15,slice-15-sense)
is_a(slice-15-sense,piece.n.08)
action_role(slice-15,Pieces)
advmod(halve-5, When-1)
det(onion-3, an-2)
nsubjpass(halve-5, onion-3)
auxpass(halve-5, be-4)
advcl(easy-10, halve-5)
nsubj(easy-10, it-7)
cop(easy-10, be-8)
advmod(easy-10, much-9)
root(ROOT-0, easy-10)
aux(cut-12, to-11)
xcomp(easy-10, cut-12)
amod(slice-15, thin-14)
prep_into(cut-12, slice-15)
has_pos(When-1,WRB)
has_pos(an-2,DT)
has_pos(onion-3,NN)
has_pos(be-4,VB)
has_pos(halve-5,VBN)
has_pos(it-7,PRP)
has_pos(be-8,VB)
has_pos(much-9,RB)
has_pos(easy-10,JJ)
has_pos(to-11,TO)
has_pos(cut-12,VB)
has_pos(thin-14,JJ)
has_pos(slice-15,NN)
has_sense(When-1, null)
has_sense(an-2, null)
has_sense(thin-14, null)
has_sense(it-7, null)
has_sense(to-11, null)
---
// cool for 10 minutes , then cut into slice and serve while still warm .
has_sense(cool-1,cool-1-sense)
is_a(cool-1-sense,cool.v.01)
has_sense(then-6,then-6-sense)
is_a(then-6-sense,then.r.01)
has_sense(cut-7,cut-7-sense)
is_a(cut-7-sense,cut.v.01)
has_sense(slice-9,slice-9-sense)
is_a(slice-9-sense,piece.n.08)
action_role(slice-9,Pieces)
has_sense(serve-11,serve-11-sense)
is_a(serve-11-sense,serve.v.05)
has_sense(still-13,still-13-sense)
is_a(still-13-sense,still.r.01)
has_sense(warm-14,warm-14-sense)
is_a(warm-14-sense,warm.a.01)
root(ROOT-0, cool-1)
num(minutes-4, 10-3)
prep_for(cool-1, minutes-4)
advmod(cut-7, then-6)
partmod(minutes-4, cut-7)
prep_into(cut-7, slice-9)
conj_and(cool-1, serve-11)
mark(warm-14, while-12)
advmod(warm-14, still-13)
advcl(serve-11, warm-14)
has_pos(cool-1,VB)
has_pos(10-3,CD)
has_pos(minutes-4,NNS)
has_pos(then-6,RB)
has_pos(cut-7,VBN)
has_pos(slice-9,NN)
has_pos(serve-11,VB)
has_pos(while-12,IN)
has_pos(still-13,RB)
has_pos(warm-14,JJ)
has_sense(while-12, null)
has_sense(minutes-4, null)
has_sense(10-3, null)
---
// do n't cut to get a long stringy piece of meat .
has_sense(do-1,do-1-sense)
is_a(do-1-sense,perform.v.01)
has_sense(cut-3,cut-3-sense)
is_a(cut-3-sense,cut.v.01)
has_sense(get-5,get-5-sense)
is_a(get-5-sense,get.v.01)
has_sense(long-7,long-7-sense)
is_a(long-7-sense,long.a.02)
has_sense(piece-9,piece-9-sense)
is_a(piece-9-sense,piece.n.08)
has_sense(meat-11,meat-11-sense)
is_a(meat-11-sense,meat.n.01)
aux(cut-3, do-1)
neg(cut-3, n't-2)
root(ROOT-0, cut-3)
aux(get-5, to-4)
xcomp(cut-3, get-5)
det(piece-9, a-6)
amod(piece-9, long-7)
nn(piece-9, stringy-8)
dobj(get-5, piece-9)
prep_of(piece-9, meat-11)
has_pos(do-1,VB)
has_pos(n't-2,RB)
has_pos(cut-3,VB)
has_pos(to-4,TO)
has_pos(get-5,VB)
has_pos(a-6,DT)
has_pos(long-7,JJ)
has_pos(stringy-8,NN)
has_pos(piece-9,NN)
has_pos(meat-11,NN)
has_sense(stringy-8, null)
has_sense(n't-2, null)
has_sense(to-4, null)
has_sense(a-6, null)
---
// take out the dough and cut into three equal slice .
has_sense(take-1,take-1-sense)
is_a(take-1-sense,take.v.04)
has_sense(dough-4,dough-4-sense)
is_a(dough-4-sense,dough.n.01)
action_role(dough-4,Item)
has_sense(cut-6,cut-6-sense)
is_a(cut-6-sense,cut.v.01)
has_sense(equal-9,equal-9-sense)
is_a(equal-9-sense,equal.a.01)
has_sense(slice-10,slice-10-sense)
is_a(slice-10-sense,piece.n.08)
action_role(slice-10,Pieces)
root(ROOT-0, take-1)
prt(take-1, out-2)
det(dough-4, the-3)
dobj(take-1, dough-4)
conj_and(take-1, cut-6)
num(slice-10, three-8)
amod(slice-10, equal-9)
prep_into(cut-6, slice-10)
has_pos(take-1,VB)
has_pos(out-2,RP)
has_pos(the-3,DT)
has_pos(dough-4,NN)
has_pos(cut-6,VB)
has_pos(three-8,CD)
has_pos(equal-9,JJ)
has_pos(slice-10,NN)
has_sense(three-8, null)
has_sense(the-3, null)
has_sense(out-2, null)
---
// Cut the squash in half .
has_sense(squash-3,squash-3-sense)
is_a(squash-3-sense,squash.n.02)
action_role(squash-3,Item)
has_sense(half-5,half-5-sense)
is_a(half-5-sense,one-half.n.01)
action_role(half-5,Pieces)
root(ROOT-0, Cut-1)
det(squash-3, the-2)
dep(Cut-1, squash-3)
prep_in(squash-3, half-5)
has_pos(Cut-1,NNP)
has_pos(the-2,DT)
has_pos(squash-3,NN)
has_pos(half-5,NN)
has_sense(Cut-1, null)
has_sense(the-2, null)
---
// cut slits in the bag .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.n.16)
has_sense(bag-5,bag-5-sense)
is_a(bag-5-sense,bag.n.01)
root(ROOT-0, cut-1)
dobj(cut-1, slits-2)
det(bag-5, the-4)
prep_in(cut-1, bag-5)
has_pos(cut-1,VB)
has_pos(slits-2,NNS)
has_pos(the-4,DT)
has_pos(bag-5,NN)
has_sense(the-4, null)
has_sense(slits-2, null)
---
// The type of cut depend on how you want to use the pineapple .
has_sense(type-2,type-2-sense)
is_a(type-2-sense,type.n.01)
has_sense(cut-4,cut-4-sense)
is_a(cut-4-sense,cut.n.17)
has_sense(depend-5,depend-5-sense)
is_a(depend-5-sense,depend.v.01)
has_sense(want-9,want-9-sense)
is_a(want-9-sense,desire.v.01)
has_sense(use-11,use-11-sense)
is_a(use-11-sense,use.v.01)
has_sense(pineapple-13,pineapple-13-sense)
is_a(pineapple-13-sense,pineapple.n.02)
action_role(pineapple-13,Item)
det(type-2, The-1)
nsubj(depend-5, type-2)
prep_of(type-2, cut-4)
root(ROOT-0, depend-5)
advmod(want-9, how-7)
nsubj(want-9, you-8)
prepc_on(depend-5, want-9)
aux(use-11, to-10)
xcomp(want-9, use-11)
det(pineapple-13, the-12)
dobj(use-11, pineapple-13)
has_pos(The-1,DT)
has_pos(type-2,NN)
has_pos(cut-4,NN)
has_pos(depend-5,VBP)
has_pos(how-7,WRB)
has_pos(you-8,PRP)
has_pos(want-9,VBP)
has_pos(to-10,TO)
has_pos(use-11,VB)
has_pos(the-12,DT)
has_pos(pineapple-13,NN)
has_sense(how-7, null)
has_sense(The-1, null)
has_sense(you-8, null)
has_sense(to-10, null)
has_sense(the-12, null)
---
// Its easy to cut such fruit into wedge .
has_sense(easy-2,easy-2-sense)
is_a(easy-2-sense,easy.a.01)
has_sense(cut-4,cut-4-sense)
is_a(cut-4-sense,cut.v.01)
has_sense(such-5,such-5-sense)
is_a(such-5-sense,such.s.01)
has_sense(fruit-6,fruit-6-sense)
is_a(fruit-6-sense,fruit.n.01)
action_role(fruit-6,Item)
has_sense(wedge-8,wedge-8-sense)
is_a(wedge-8-sense,wedge.n.01)
action_role(wedge-8,Pieces)
poss(easy-2, Its-1)
nsubj(cut-4, easy-2)
aux(cut-4, to-3)
root(ROOT-0, cut-4)
amod(fruit-6, such-5)
dobj(cut-4, fruit-6)
prep_into(cut-4, wedge-8)
has_pos(Its-1,PRP$)
has_pos(easy-2,JJ)
has_pos(to-3,TO)
has_pos(cut-4,VB)
has_pos(such-5,JJ)
has_pos(fruit-6,NN)
has_pos(wedge-8,NN)
has_sense(Its-1, null)
has_sense(to-3, null)
---
// When the potato be cook , cut_off the top with a sharp knife .
has_sense(potato-3,potato-3-sense)
is_a(potato-3-sense,potato.n.01)
has_sense(be-4,be-4-sense)
is_a(be-4-sense,be.v.01)
has_sense(cook-5,cook-5-sense)
is_a(cook-5-sense,cook.v.03)
has_sense(cut_off-7,cut_off-7-sense)
is_a(cut_off-7-sense,cut_off.v.03)
has_sense(top-9,top-9-sense)
is_a(top-9-sense,top.n.01)
has_sense(sharp-12,sharp-12-sense)
is_a(sharp-12-sense,sharp.a.09)
has_sense(knife-13,knife-13-sense)
is_a(knife-13-sense,knife.n.01)
action_role(knife-13,Instrument)
advmod(cook-5, When-1)
det(potato-3, the-2)
nsubj(cook-5, potato-3)
cop(cook-5, be-4)
advcl(cut_off-7, cook-5)
root(ROOT-0, cut_off-7)
det(top-9, the-8)
dobj(cut_off-7, top-9)
det(knife-13, a-11)
amod(knife-13, sharp-12)
prep_with(cut_off-7, knife-13)
has_pos(When-1,WRB)
has_pos(the-2,DT)
has_pos(potato-3,NN)
has_pos(be-4,VB)
has_pos(cook-5,NN)
has_pos(cut_off-7,VB)
has_pos(the-8,DT)
has_pos(top-9,NN)
has_pos(a-11,DT)
has_pos(sharp-12,JJ)
has_pos(knife-13,NN)
has_sense(a-11, null)
has_sense(the-2, null)
has_sense(When-1, null)
has_sense(the-8, null)
---
// Cut in butter with pastry blender -LRB- or 2 knife -RRB- until crumb form .
has_sense(Cut-1,Cut-1-sense)
is_a(Cut-1-sense,cut.v.01)
has_sense(butter-3,butter-3-sense)
is_a(butter-3-sense,butter.n.01)
has_sense(pastry-5,pastry-5-sense)
is_a(pastry-5-sense,pastry.n.01)
has_sense(blender-6,blender-6-sense)
is_a(blender-6-sense,blender.n.01)
has_sense(knife-10,knife-10-sense)
is_a(knife-10-sense,knife.n.01)
has_sense(crumb-13,crumb-13-sense)
is_a(crumb-13-sense,crumb.n.03)
nsubj(knife-10, Cut-1)
prep_in(Cut-1, butter-3)
nn(blender-6, pastry-5)
prep_with(butter-3, blender-6)
cc(2-9, or-8)
num(knife-10, 2-9)
root(ROOT-0, knife-10)
amod(form-14, crumb-13)
prep_until(knife-10, form-14)
has_pos(Cut-1,NNP)
has_pos(butter-3,NN)
has_pos(pastry-5,NN)
has_pos(blender-6,NN)
has_pos(or-8,CC)
has_pos(2-9,CD)
has_pos(knife-10,NNS)
has_pos(crumb-13,JJ)
has_pos(form-14,NN)
has_sense(form-14, null)
has_sense(2-9, null)
has_sense(or-8, null)
---
// cut_up meat of choice .
has_sense(cut_up-1,cut_up-1-sense)
is_a(cut_up-1-sense,carve.v.03)
has_sense(meat-2,meat-2-sense)
is_a(meat-2-sense,meat.n.01)
action_role(meat-2,Item)
has_sense(choice-4,choice-4-sense)
is_a(choice-4-sense,choice.n.01)
nn(meat-2, cut_up-1)
root(ROOT-0, meat-2)
prep_of(meat-2, choice-4)
has_pos(cut_up-1,NN)
has_pos(meat-2,NN)
has_pos(choice-4,NN)
---
// take your blender and cut_up the banana .
has_sense(take-1,take-1-sense)
is_a(take-1-sense,take.v.04)
has_sense(blender-3,blender-3-sense)
is_a(blender-3-sense,blender.n.01)
has_sense(cut_up-5,cut_up-5-sense)
is_a(cut_up-5-sense,carve.v.03)
has_sense(banana-7,banana-7-sense)
is_a(banana-7-sense,banana.n.02)
action_role(banana-7,Item)
root(ROOT-0, take-1)
poss(blender-3, your-2)
dobj(take-1, blender-3)
conj_and(take-1, cut_up-5)
det(banana-7, the-6)
dobj(cut_up-5, banana-7)
has_pos(take-1,VB)
has_pos(your-2,PRP$)
has_pos(blender-3,NN)
has_pos(cut_up-5,VB)
has_pos(the-6,DT)
has_pos(banana-7,NN)
has_sense(the-6, null)
has_sense(your-2, null)
---
// cut the cake into two layer .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.v.01)
has_sense(cake-3,cake-3-sense)
is_a(cake-3-sense,cake.n.03)
action_role(cake-3,Item)
has_sense(layer-6,layer-6-sense)
is_a(layer-6-sense,layer.n.02)
action_role(layer-6,Pieces)
root(ROOT-0, cut-1)
det(cake-3, the-2)
dobj(cut-1, cake-3)
num(layer-6, two-5)
prep_into(cut-1, layer-6)
has_pos(cut-1,VB)
has_pos(the-2,DT)
has_pos(cake-3,NN)
has_pos(two-5,CD)
has_pos(layer-6,NN)
has_sense(two-5, null)
has_sense(the-2, null)
---
// hull the strawberries and cut into slice .
has_sense(hull-1,hull-1-sense)
is_a(hull-1-sense,hull.v.01)
has_sense(strawberries-3,strawberries-3-sense)
is_a(strawberries-3-sense,strawberry.n.01)
action_role(strawberries-3,Item)
has_sense(cut-5,cut-5-sense)
is_a(cut-5-sense,cut.v.01)
has_sense(slice-7,slice-7-sense)
is_a(slice-7-sense,piece.n.08)
action_role(slice-7,Pieces)
root(ROOT-0, hull-1)
det(strawberries-3, the-2)
dobj(hull-1, strawberries-3)
conj_and(hull-1, cut-5)
prep_into(cut-5, slice-7)
has_pos(hull-1,VB)
has_pos(the-2,DT)
has_pos(strawberries-3,NNS)
has_pos(cut-5,VB)
has_pos(slice-7,NN)
has_sense(the-2, null)
---
// Cut toward the bone , but not into it .
has_sense(bone-4,bone-4-sense)
is_a(bone-4-sense,bone.n.01)
has_sense(not-7,not-7-sense)
is_a(not-7-sense,not.r.01)
root(ROOT-0, Cut-1)
prep(Cut-1, toward-2)
det(bone-4, the-3)
pobj(toward-2, bone-4)
conj_but(toward-2, not-7)
dep(toward-2, into-8)
pobj(into-8, it-9)
has_pos(Cut-1,NNP)
has_pos(toward-2,IN)
has_pos(the-3,DT)
has_pos(bone-4,NN)
has_pos(not-7,RB)
has_pos(into-8,IN)
has_pos(it-9,PRP)
has_sense(the-3, null)
has_sense(into-8, null)
has_sense(Cut-1, null)
has_sense(toward-2, null)
has_sense(it-9, null)
---
// cut the circumference at the middle .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.n.17)
has_sense(circumference-3,circumference-3-sense)
is_a(circumference-3-sense,circumference.n.01)
has_sense(middle-6,middle-6-sense)
is_a(middle-6-sense,center.n.01)
root(ROOT-0, cut-1)
det(circumference-3, the-2)
dobj(cut-1, circumference-3)
det(middle-6, the-5)
prep_at(cut-1, middle-6)
has_pos(cut-1,VB)
has_pos(the-2,DT)
has_pos(circumference-3,NN)
has_pos(the-5,DT)
has_pos(middle-6,NN)
has_sense(the-5, null)
has_sense(the-2, null)
---
// cut_up the peach into small pieces .
has_sense(cut_up-1,cut_up-1-sense)
is_a(cut_up-1-sense,carve.v.03)
has_sense(peach-3,peach-3-sense)
is_a(peach-3-sense,peach.n.03)
action_role(peach-3,Item)
has_sense(small-5,small-5-sense)
is_a(small-5-sense,small.a.01)
has_sense(pieces-6,pieces-6-sense)
is_a(pieces-6-sense,piece.n.08)
action_role(pieces-6,Pieces)
root(ROOT-0, cut_up-1)
det(peach-3, the-2)
dobj(cut_up-1, peach-3)
amod(pieces-6, small-5)
prep_into(cut_up-1, pieces-6)
has_pos(cut_up-1,VB)
has_pos(the-2,DT)
has_pos(peach-3,NN)
has_pos(small-5,JJ)
has_pos(pieces-6,NNS)
has_sense(the-2, null)
---
// To cut into item on your plate , pick up and hold your knife in your right_hand .
has_sense(cut-2,cut-2-sense)
is_a(cut-2-sense,cut.v.01)
has_sense(item-4,item-4-sense)
is_a(item-4-sense,detail.n.02)
has_sense(plate-7,plate-7-sense)
is_a(plate-7-sense,plate.n.04)
has_sense(hold-12,hold-12-sense)
is_a(hold-12-sense,hold.v.02)
has_sense(knife-14,knife-14-sense)
is_a(knife-14-sense,knife.n.01)
action_role(knife-14,Instrument)
has_sense(right_hand-17,right_hand-17-sense)
is_a(right_hand-17-sense,right.n.05)
aux(cut-2, To-1)
root(ROOT-0, cut-2)
prep_into(cut-2, item-4)
poss(plate-7, your-6)
prep_on(item-4, plate-7)
conj_and(cut-2, pick-9)
prt(pick-9, up-10)
conj_and(cut-2, hold-12)
poss(knife-14, your-13)
dobj(hold-12, knife-14)
poss(right_hand-17, your-16)
prep_in(hold-12, right_hand-17)
has_pos(To-1,TO)
has_pos(cut-2,VB)
has_pos(item-4,NN)
has_pos(your-6,PRP$)
has_pos(plate-7,NN)
has_pos(pick-9,VB)
has_pos(up-10,RP)
has_pos(hold-12,VB)
has_pos(your-13,PRP$)
has_pos(knife-14,NN)
has_pos(your-16,PRP$)
has_pos(right_hand-17,NN)
has_sense(your-6, null)
has_sense(pick-9, null)
has_sense(up-10, null)
has_sense(To-1, null)
has_sense(your-13, null)
has_sense(your-16, null)
---
// cut each half into a half .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.v.01)
has_sense(half-3,half-3-sense)
is_a(half-3-sense,one-half.n.01)
has_sense(half-6,half-6-sense)
is_a(half-6-sense,one-half.n.01)
action_role(half-6,Pieces)
root(ROOT-0, cut-1)
det(half-3, each-2)
dobj(cut-1, half-3)
det(half-6, a-5)
prep_into(cut-1, half-6)
has_pos(cut-1,VB)
has_pos(each-2,DT)
has_pos(half-3,NN)
has_pos(a-5,DT)
has_pos(half-6,NN)
has_sense(each-2, null)
has_sense(a-5, null)
---
// Core two peppers and cut them into strip .
has_sense(cut-5,cut-5-sense)
is_a(cut-5-sense,cut.v.01)
has_sense(strip-8,strip-8-sense)
is_a(strip-8-sense,strip.n.01)
action_role(strip-8,Pieces)
nsubj(peppers-3, Core-1)
num(Core-1, two-2)
root(ROOT-0, peppers-3)
conj_and(peppers-3, cut-5)
dobj(cut-5, them-6)
prep_into(cut-5, strip-8)
has_pos(Core-1,NNP)
has_pos(two-2,CD)
has_pos(peppers-3,VBZ)
has_pos(cut-5,VBD)
has_pos(them-6,PRP)
has_pos(strip-8,NN)
has_sense(two-2, null)
has_sense(peppers-3, null)
has_sense(them-6, null)
has_sense(Core-1, null)
---
// cut_away the core and any worm-eaten parts .
has_sense(cut_away-1,cut_away-1-sense)
is_a(cut_away-1-sense,cut_away.v.02)
has_sense(core-3,core-3-sense)
is_a(core-3-sense,core.n.02)
action_role(core-3,Item)
has_sense(worm-eaten-6,worm-eaten-6-sense)
is_a(worm-eaten-6-sense,vermiculate.s.01)
has_sense(parts-7,parts-7-sense)
is_a(parts-7-sense,part.n.01)
action_role(parts-7,Item)
root(ROOT-0, cut_away-1)
det(core-3, the-2)
dobj(cut_away-1, core-3)
det(parts-7, any-5)
amod(parts-7, worm-eaten-6)
conj_and(core-3, parts-7)
has_pos(cut_away-1,VB)
has_pos(the-2,DT)
has_pos(core-3,NN)
has_pos(any-5,DT)
has_pos(worm-eaten-6,JJ)
has_pos(parts-7,NNS)
has_sense(any-5, null)
has_sense(the-2, null)
---
// make the cut on the inner side of the curve -LRB- inside the U -RRB- .
has_sense(make-1,make-1-sense)
is_a(make-1-sense,make.v.01)
has_sense(cut-3,cut-3-sense)
is_a(cut-3-sense,cut.n.16)
has_sense(curve-10,curve-10-sense)
is_a(curve-10-sense,bend.n.03)
root(ROOT-0, make-1)
det(cut-3, the-2)
dobj(make-1, cut-3)
det(side-7, the-5)
amod(side-7, inner-6)
prep_on(make-1, side-7)
det(curve-10, the-9)
prep_of(side-7, curve-10)
dep(curve-10, inside-12)
det(U-14, the-13)
pobj(inside-12, U-14)
has_pos(make-1,VB)
has_pos(the-2,DT)
has_pos(cut-3,NN)
has_pos(the-5,DT)
has_pos(inner-6,JJ)
has_pos(side-7,NN)
has_pos(the-9,DT)
has_pos(curve-10,NN)
has_pos(inside-12,IN)
has_pos(the-13,DT)
has_pos(U-14,NNP)
has_sense(the-5, null)
has_sense(side-7, null)
has_sense(the-2, null)
has_sense(inner-6, null)
has_sense(the-13, null)
has_sense(the-9, null)
has_sense(U-14, null)
has_sense(inside-12, null)
---
// While it be cook , peel and cut the vegetable into large chunk .
has_sense(be-3,be-3-sense)
is_a(be-3-sense,be.v.01)
has_sense(cook-4,cook-4-sense)
is_a(cook-4-sense,cook.v.03)
has_sense(peel-6,peel-6-sense)
is_a(peel-6-sense,skin.v.04)
has_sense(cut-8,cut-8-sense)
is_a(cut-8-sense,cut.v.01)
has_sense(vegetable-10,vegetable-10-sense)
is_a(vegetable-10-sense,vegetable.n.01)
action_role(vegetable-10,Item)
has_sense(large-12,large-12-sense)
is_a(large-12-sense,large.a.01)
has_sense(chunk-13,chunk-13-sense)
is_a(chunk-13-sense,ball.n.08)
action_role(chunk-13,Pieces)
mark(cook-4, While-1)
nsubj(cook-4, it-2)
cop(cook-4, be-3)
advcl(peel-6, cook-4)
root(ROOT-0, peel-6)
conj_and(peel-6, cut-8)
det(vegetable-10, the-9)
dobj(peel-6, vegetable-10)
amod(chunk-13, large-12)
prep_into(peel-6, chunk-13)
has_pos(While-1,IN)
has_pos(it-2,PRP)
has_pos(be-3,VB)
has_pos(cook-4,NN)
has_pos(peel-6,VB)
has_pos(cut-8,VB)
has_pos(the-9,DT)
has_pos(vegetable-10,NN)
has_pos(large-12,JJ)
has_pos(chunk-13,NN)
has_sense(the-9, null)
has_sense(While-1, null)
has_sense(it-2, null)
---
// wash the fish and cut into piece of vary size nuggets .
has_sense(wash-1,wash-1-sense)
is_a(wash-1-sense,wash.v.03)
has_sense(fish-3,fish-3-sense)
is_a(fish-3-sense,fish.n.02)
action_role(fish-3,Item)
has_sense(cut-5,cut-5-sense)
is_a(cut-5-sense,cut.v.01)
has_sense(piece-7,piece-7-sense)
is_a(piece-7-sense,piece.n.08)
action_role(piece-7,Pieces)
has_sense(vary-9,vary-9-sense)
is_a(vary-9-sense,change.v.03)
has_sense(size-10,size-10-sense)
is_a(size-10-sense,size.n.01)
root(ROOT-0, wash-1)
det(fish-3, the-2)
dobj(wash-1, fish-3)
conj_and(wash-1, cut-5)
prep_into(cut-5, piece-7)
amod(nuggets-11, vary-9)
nn(nuggets-11, size-10)
prep_of(piece-7, nuggets-11)
has_pos(wash-1,VB)
has_pos(the-2,DT)
has_pos(fish-3,NN)
has_pos(cut-5,VB)
has_pos(piece-7,NN)
has_pos(vary-9,JJ)
has_pos(size-10,NN)
has_pos(nuggets-11,NNS)
has_sense(nuggets-11, null)
has_sense(the-2, null)
---
// cut the good apple piece into thin slice .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.v.01)
has_sense(good-3,good-3-sense)
is_a(good-3-sense,good.a.01)
has_sense(apple-4,apple-4-sense)
is_a(apple-4-sense,apple.n.01)
action_role(apple-4,Item)
has_sense(piece-5,piece-5-sense)
is_a(piece-5-sense,piece.n.01)
has_sense(thin-7,thin-7-sense)
is_a(thin-7-sense,thin.a.01)
has_sense(slice-8,slice-8-sense)
is_a(slice-8-sense,piece.n.08)
action_role(slice-8,Pieces)
root(ROOT-0, cut-1)
det(piece-5, the-2)
amod(piece-5, good-3)
nn(piece-5, apple-4)
dobj(cut-1, piece-5)
amod(slice-8, thin-7)
prep_into(cut-1, slice-8)
has_pos(cut-1,VB)
has_pos(the-2,DT)
has_pos(good-3,JJ)
has_pos(apple-4,NN)
has_pos(piece-5,NN)
has_pos(thin-7,JJ)
has_pos(slice-8,NN)
has_sense(the-2, null)
---
// wash and cut the broccoli into small sized piece with long stem .
has_sense(wash-1,wash-1-sense)
is_a(wash-1-sense,wash.v.03)
has_sense(cut-3,cut-3-sense)
is_a(cut-3-sense,cut.v.01)
has_sense(broccoli-5,broccoli-5-sense)
is_a(broccoli-5-sense,broccoli.n.01)
action_role(broccoli-5,Item)
has_sense(small-7,small-7-sense)
is_a(small-7-sense,small.a.01)
has_sense(sized-8,sized-8-sense)
is_a(sized-8-sense,sized.a.01)
has_sense(piece-9,piece-9-sense)
is_a(piece-9-sense,piece.n.08)
action_role(piece-9,Pieces)
has_sense(long-11,long-11-sense)
is_a(long-11-sense,long.a.02)
has_sense(stem-12,stem-12-sense)
is_a(stem-12-sense,stalk.n.02)
root(ROOT-0, wash-1)
conj_and(wash-1, cut-3)
det(broccoli-5, the-4)
dobj(wash-1, broccoli-5)
amod(piece-9, small-7)
amod(piece-9, sized-8)
prep_into(wash-1, piece-9)
amod(stem-12, long-11)
prep_with(piece-9, stem-12)
has_pos(wash-1,VB)
has_pos(cut-3,VB)
has_pos(the-4,DT)
has_pos(broccoli-5,NN)
has_pos(small-7,JJ)
has_pos(sized-8,JJ)
has_pos(piece-9,NN)
has_pos(long-11,JJ)
has_pos(stem-12,NN)
has_sense(the-4, null)
---
// If you have them , cut_up two hard-boiled_egg and add them to your bowl .
has_sense(have-3,have-3-sense)
is_a(have-3-sense,have.v.01)
has_sense(cut_up-6,cut_up-6-sense)
is_a(cut_up-6-sense,carve.v.03)
has_sense(hard-boiled_egg-8,hard-boiled_egg-8-sense)
is_a(hard-boiled_egg-8-sense,hard-boiled_egg.n.01)
action_role(hard-boiled_egg-8,Item)
has_sense(add-10,add-10-sense)
is_a(add-10-sense,add.v.01)
has_sense(bowl-14,bowl-14-sense)
is_a(bowl-14-sense,bowl.n.01)
mark(have-3, If-1)
nsubj(have-3, you-2)
advcl(cut_up-6, have-3)
dobj(have-3, them-4)
root(ROOT-0, cut_up-6)
num(hard-boiled_egg-8, two-7)
dobj(cut_up-6, hard-boiled_egg-8)
conj_and(cut_up-6, add-10)
dobj(add-10, them-11)
poss(bowl-14, your-13)
prep_to(add-10, bowl-14)
has_pos(If-1,IN)
has_pos(you-2,PRP)
has_pos(have-3,VBP)
has_pos(them-4,PRP)
has_pos(cut_up-6,VB)
has_pos(two-7,CD)
has_pos(hard-boiled_egg-8,NN)
has_pos(add-10,VB)
has_pos(them-11,PRP)
has_pos(your-13,PRP$)
has_pos(bowl-14,NN)
has_sense(you-2, null)
has_sense(two-7, null)
has_sense(them-4, null)
has_sense(them-11, null)
has_sense(If-1, null)
has_sense(your-13, null)
---
// cut_up some onion and pepper .
has_sense(cut_up-1,cut_up-1-sense)
is_a(cut_up-1-sense,carve.v.03)
has_sense(onion-3,onion-3-sense)
is_a(onion-3-sense,onion.n.01)
action_role(onion-3,Item)
has_sense(pepper-5,pepper-5-sense)
is_a(pepper-5-sense,pepper.n.04)
action_role(pepper-5,Item)
root(ROOT-0, cut_up-1)
det(onion-3, some-2)
dobj(cut_up-1, onion-3)
conj_and(onion-3, pepper-5)
has_pos(cut_up-1,VB)
has_pos(some-2,DT)
has_pos(onion-3,NN)
has_pos(pepper-5,NN)
has_sense(some-2, null)
---
// Cut each passion_fruit in half .
has_sense(passion_fruit-3,passion_fruit-3-sense)
is_a(passion_fruit-3-sense,passion_fruit.n.01)
action_role(passion_fruit-3,Item)
has_sense(half-5,half-5-sense)
is_a(half-5-sense,one-half.n.01)
action_role(half-5,Pieces)
nsubj(passion_fruit-3, Cut-1)
dep(passion_fruit-3, each-2)
root(ROOT-0, passion_fruit-3)
prep_in(passion_fruit-3, half-5)
has_pos(Cut-1,NNP)
has_pos(each-2,DT)
has_pos(passion_fruit-3,VBP)
has_pos(half-5,NN)
has_sense(each-2, null)
has_sense(Cut-1, null)
---
// Cut each quarter in half .
has_sense(quarter-3,quarter-3-sense)
is_a(quarter-3-sense,one-fourth.n.01)
has_sense(half-5,half-5-sense)
is_a(half-5-sense,one-half.n.01)
action_role(half-5,Pieces)
root(ROOT-0, Cut-1)
det(quarter-3, each-2)
dep(Cut-1, quarter-3)
prep_in(quarter-3, half-5)
has_pos(Cut-1,NNP)
has_pos(each-2,DT)
has_pos(quarter-3,NN)
has_pos(half-5,NN)
has_sense(each-2, null)
has_sense(Cut-1, null)
---
// Get bowls and cut the vegetable really small .
has_sense(cut-4,cut-4-sense)
is_a(cut-4-sense,cut.v.01)
has_sense(vegetable-6,vegetable-6-sense)
is_a(vegetable-6-sense,vegetable.n.01)
action_role(vegetable-6,Item)
has_sense(really-7,really-7-sense)
is_a(really-7-sense,very.r.01)
has_sense(small-8,small-8-sense)
is_a(small-8-sense,small.a.01)
nsubj(bowls-2, Get-1)
root(ROOT-0, bowls-2)
conj_and(bowls-2, cut-4)
det(vegetable-6, the-5)
nsubj(small-8, vegetable-6)
advmod(small-8, really-7)
xcomp(cut-4, small-8)
has_pos(Get-1,NNP)
has_pos(bowls-2,VBZ)
has_pos(cut-4,VBD)
has_pos(the-5,DT)
has_pos(vegetable-6,NN)
has_pos(really-7,RB)
has_pos(small-8,JJ)
has_sense(bowls-2, null)
has_sense(the-5, null)
has_sense(Get-1, null)
---
// place the two half `` cut side down '' on the cutting_board .
has_sense(place-1,place-1-sense)
is_a(place-1-sense,put.v.01)
has_sense(half-4,half-4-sense)
is_a(half-4-sense,one-half.n.01)
has_sense(side-7,side-7-sense)
is_a(side-7-sense,side.n.04)
has_sense(cutting_board-12,cutting_board-12-sense)
is_a(cutting_board-12-sense,chopping_board.n.01)
action_role(cutting_board-12,Place)
root(ROOT-0, place-1)
det(half-4, the-2)
num(half-4, two-3)
dobj(place-1, half-4)
dep(place-1, cut-6)
dobj(cut-6, side-7)
prt(cut-6, down-8)
det(cutting_board-12, the-11)
prep_on(cut-6, cutting_board-12)
has_pos(place-1,VB)
has_pos(the-2,DT)
has_pos(two-3,CD)
has_pos(half-4,NN)
has_pos(cut-6,VB)
has_pos(side-7,NN)
has_pos(down-8,RP)
has_pos(the-11,DT)
has_pos(cutting_board-12,NN)
has_sense(two-3, null)
has_sense(the-2, null)
has_sense(down-8, null)
has_sense(cut-6, null)
has_sense(the-11, null)
---
// Peel garlic , cut each clove into fourth , and place inside container .
has_sense(garlic-2,garlic-2-sense)
is_a(garlic-2-sense,garlic.n.01)
has_sense(cut-4,cut-4-sense)
is_a(cut-4-sense,cut.v.01)
has_sense(clove-6,clove-6-sense)
is_a(clove-6-sense,clove.n.03)
action_role(clove-6,Item)
has_sense(fourth-8,fourth-8-sense)
is_a(fourth-8-sense,one-fourth.n.01)
action_role(fourth-8,Pieces)
has_sense(place-11,place-11-sense)
is_a(place-11-sense,put.v.01)
has_sense(container-13,container-13-sense)
is_a(container-13-sense,container.n.01)
root(ROOT-0, Peel-1)
acomp(Peel-1, garlic-2)
conj_and(Peel-1, cut-4)
det(clove-6, each-5)
dobj(cut-4, clove-6)
prep_into(cut-4, fourth-8)
conj_and(Peel-1, place-11)
prep_inside(place-11, container-13)
has_pos(Peel-1,VB)
has_pos(garlic-2,JJ)
has_pos(cut-4,VB)
has_pos(each-5,DT)
has_pos(clove-6,NN)
has_pos(fourth-8,JJ)
has_pos(place-11,VB)
has_pos(container-13,NN)
has_sense(each-5, null)
has_sense(Peel-1, null)
---
// A good suggestion be to cut the bacon_strip into third .
has_sense(good-2,good-2-sense)
is_a(good-2-sense,good.a.01)
has_sense(suggestion-3,suggestion-3-sense)
is_a(suggestion-3-sense,suggestion.n.01)
has_sense(be-4,be-4-sense)
is_a(be-4-sense,be.v.01)
has_sense(cut-6,cut-6-sense)
is_a(cut-6-sense,cut.v.01)
has_sense(bacon_strip-8,bacon_strip-8-sense)
is_a(bacon_strip-8-sense,bacon_strip.n.01)
action_role(bacon_strip-8,Item)
has_sense(third-10,third-10-sense)
is_a(third-10-sense,one-third.n.01)
action_role(third-10,Pieces)
det(suggestion-3, A-1)
amod(suggestion-3, good-2)
nsubj(be-4, suggestion-3)
root(ROOT-0, be-4)
aux(cut-6, to-5)
xcomp(be-4, cut-6)
det(bacon_strip-8, the-7)
dobj(cut-6, bacon_strip-8)
prep_into(cut-6, third-10)
has_pos(A-1,DT)
has_pos(good-2,JJ)
has_pos(suggestion-3,NN)
has_pos(be-4,VB)
has_pos(to-5,TO)
has_pos(cut-6,VB)
has_pos(the-7,DT)
has_pos(bacon_strip-8,NN)
has_pos(third-10,JJ)
has_sense(A-1, null)
has_sense(the-7, null)
has_sense(to-5, null)
---
// cut the apple into inch-sized chunk .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.v.01)
has_sense(apple-3,apple-3-sense)
is_a(apple-3-sense,apple.n.01)
action_role(apple-3,Item)
has_sense(chunk-6,chunk-6-sense)
is_a(chunk-6-sense,ball.n.08)
action_role(chunk-6,Pieces)
root(ROOT-0, cut-1)
det(apple-3, the-2)
dobj(cut-1, apple-3)
amod(chunk-6, inch-sized-5)
prep_into(cut-1, chunk-6)
has_pos(cut-1,VB)
has_pos(the-2,DT)
has_pos(apple-3,NN)
has_pos(inch-sized-5,JJ)
has_pos(chunk-6,NN)
has_sense(inch-sized-5, null)
has_sense(the-2, null)
---
// Peel the banana stem back so the skin break where the cut be made .
has_sense(banana-3,banana-3-sense)
is_a(banana-3-sense,banana.n.02)
action_role(banana-3,Item)
has_sense(skin-8,skin-8-sense)
is_a(skin-8-sense,peel.n.02)
has_sense(break-9,break-9-sense)
is_a(break-9-sense,break.v.02)
has_sense(be-13,be-13-sense)
is_a(be-13-sense,be.v.05)
nsubj(stem-4, Peel-1)
det(banana-3, the-2)
dep(Peel-1, banana-3)
root(ROOT-0, stem-4)
prt(stem-4, back-5)
mark(break-9, so-6)
det(skin-8, the-7)
nsubj(break-9, skin-8)
advcl(stem-4, break-9)
advmod(made-14, where-10)
det(cut-12, the-11)
nsubjpass(made-14, cut-12)
auxpass(made-14, be-13)
advcl(break-9, made-14)
has_pos(Peel-1,NNP)
has_pos(the-2,DT)
has_pos(banana-3,NN)
has_pos(stem-4,VBP)
has_pos(back-5,RP)
has_pos(so-6,IN)
has_pos(the-7,DT)
has_pos(skin-8,NN)
has_pos(break-9,VBP)
has_pos(where-10,WRB)
has_pos(the-11,DT)
has_pos(cut-12,NN)
has_pos(be-13,VB)
has_pos(made-14,VBN)
has_sense(the-7, null)
has_sense(the-2, null)
has_sense(where-10, null)
has_sense(cut-12, null)
has_sense(back-5, null)
has_sense(Peel-1, null)
has_sense(stem-4, null)
has_sense(made-14, null)
has_sense(the-11, null)
has_sense(so-6, null)
---
// cut sandwich in half .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.n.17)
has_sense(sandwich-2,sandwich-2-sense)
is_a(sandwich-2-sense,sandwich.n.01)
action_role(sandwich-2,Item)
has_sense(half-4,half-4-sense)
is_a(half-4-sense,one-half.n.01)
action_role(half-4,Pieces)
root(ROOT-0, cut-1)
dobj(cut-1, sandwich-2)
prep_in(cut-1, half-4)
has_pos(cut-1,VB)
has_pos(sandwich-2,NN)
has_pos(half-4,NN)
---
// select a tender cut of beef such as fillet mignon or top sirloin_steak .
has_sense(select-1,select-1-sense)
is_a(select-1-sense,choose.v.01)
has_sense(cut-4,cut-4-sense)
is_a(cut-4-sense,cut.n.06)
has_sense(beef-6,beef-6-sense)
is_a(beef-6-sense,beef.n.02)
action_role(beef-6,Item)
has_sense(fillet-9,fillet-9-sense)
is_a(fillet-9-sense,fillet.n.01)
action_role(fillet-9,Item)
has_sense(sirloin_steak-13,sirloin_steak-13-sense)
is_a(sirloin_steak-13-sense,sirloin_steak.n.01)
action_role(sirloin_steak-13,Item)
root(ROOT-0, select-1)
det(cut-4, a-2)
nn(cut-4, tender-3)
dobj(select-1, cut-4)
prep_of(cut-4, beef-6)
amod(mignon-10, fillet-9)
prep_such_as(beef-6, mignon-10)
amod(sirloin_steak-13, top-12)
conj_or(mignon-10, sirloin_steak-13)
has_pos(select-1,VB)
has_pos(a-2,DT)
has_pos(tender-3,NN)
has_pos(cut-4,NN)
has_pos(beef-6,NN)
has_pos(fillet-9,JJ)
has_pos(mignon-10,NN)
has_pos(top-12,JJ)
has_pos(sirloin_steak-13,NN)
has_sense(top-12, null)
has_sense(mignon-10, null)
has_sense(a-2, null)
has_sense(tender-3, null)
---
// Cut the onion near running water or a cloud of steam .
has_sense(onion-3,onion-3-sense)
is_a(onion-3-sense,onion.n.03)
action_role(onion-3,Item)
has_sense(running-5,running-5-sense)
is_a(running-5-sense,running.a.01)
has_sense(water-6,water-6-sense)
is_a(water-6-sense,water.n.06)
action_role(water-6,Place)
has_sense(cloud-9,cloud-9-sense)
is_a(cloud-9-sense,cloud.n.01)
has_sense(steam-11,steam-11-sense)
is_a(steam-11-sense,steam.n.01)
action_role(steam-11,Place)
root(ROOT-0, Cut-1)
det(onion-3, the-2)
dep(Cut-1, onion-3)
amod(water-6, running-5)
prep_near(onion-3, water-6)
det(cloud-9, a-8)
conj_or(onion-3, cloud-9)
prep_of(cloud-9, steam-11)
has_pos(Cut-1,NNP)
has_pos(the-2,DT)
has_pos(onion-3,NN)
has_pos(running-5,JJ)
has_pos(water-6,NN)
has_pos(a-8,DT)
has_pos(cloud-9,NN)
has_pos(steam-11,NN)
has_sense(the-2, null)
has_sense(a-8, null)
has_sense(Cut-1, null)
---
// cut the bagel of your choice into two halve with a bread_knife .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.v.01)
has_sense(bagel-3,bagel-3-sense)
is_a(bagel-3-sense,bagel.n.01)
action_role(bagel-3,Item)
has_sense(choice-6,choice-6-sense)
is_a(choice-6-sense,choice.n.01)
has_sense(halve-9,halve-9-sense)
is_a(halve-9-sense,halve.v.01)
action_role(halve-9,Pieces)
has_sense(bread_knife-12,bread_knife-12-sense)
is_a(bread_knife-12-sense,bread_knife.n.01)
action_role(bread_knife-12,Instrument)
root(ROOT-0, cut-1)
det(bagel-3, the-2)
dobj(cut-1, bagel-3)
poss(choice-6, your-5)
prep_of(bagel-3, choice-6)
num(halve-9, two-8)
prep_into(cut-1, halve-9)
det(bread_knife-12, a-11)
prep_with(halve-9, bread_knife-12)
has_pos(cut-1,VB)
has_pos(the-2,DT)
has_pos(bagel-3,NN)
has_pos(your-5,PRP$)
has_pos(choice-6,NN)
has_pos(two-8,CD)
has_pos(halve-9,NNS)
has_pos(a-11,DT)
has_pos(bread_knife-12,NN)
has_sense(your-5, null)
has_sense(the-2, null)
has_sense(two-8, null)
has_sense(a-11, null)
---
// cut the watermelon into inch size chunk .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.v.01)
has_sense(watermelon-3,watermelon-3-sense)
is_a(watermelon-3-sense,watermelon.n.02)
action_role(watermelon-3,Item)
has_sense(inch-5,inch-5-sense)
is_a(inch-5-sense,inch.n.01)
has_sense(size-6,size-6-sense)
is_a(size-6-sense,size.v.03)
has_sense(chunk-7,chunk-7-sense)
is_a(chunk-7-sense,ball.n.08)
action_role(chunk-7,Pieces)
root(ROOT-0, cut-1)
det(watermelon-3, the-2)
dobj(cut-1, watermelon-3)
nn(chunk-7, inch-5)
nn(chunk-7, size-6)
prep_into(cut-1, chunk-7)
has_pos(cut-1,VB)
has_pos(the-2,DT)
has_pos(watermelon-3,NN)
has_pos(inch-5,NN)
has_pos(size-6,NN)
has_pos(chunk-7,NN)
has_sense(the-2, null)
---
// Cut an onion in half vertically .
has_sense(onion-3,onion-3-sense)
is_a(onion-3-sense,onion.n.01)
action_role(onion-3,Item)
has_sense(half-5,half-5-sense)
is_a(half-5-sense,one-half.n.01)
action_role(half-5,Pieces)
has_sense(vertically-6,vertically-6-sense)
is_a(vertically-6-sense,vertically.r.01)
action_role(vertically-6,Manner)
root(ROOT-0, Cut-1)
det(onion-3, an-2)
dep(Cut-1, onion-3)
nn(vertically-6, half-5)
prep_in(onion-3, vertically-6)
has_pos(Cut-1,NNP)
has_pos(an-2,DT)
has_pos(onion-3,NN)
has_pos(half-5,NN)
has_pos(vertically-6,NNS)
has_sense(an-2, null)
has_sense(Cut-1, null)
---
// You may wish to cut them into smaller piece .
has_sense(wish-3,wish-3-sense)
is_a(wish-3-sense,wish.v.02)
has_sense(cut-5,cut-5-sense)
is_a(cut-5-sense,cut.v.01)
has_sense(smaller-8,smaller-8-sense)
is_a(smaller-8-sense,smaller.s.01)
has_sense(piece-9,piece-9-sense)
is_a(piece-9-sense,piece.n.08)
action_role(piece-9,Pieces)
nsubj(wish-3, You-1)
aux(wish-3, may-2)
root(ROOT-0, wish-3)
aux(cut-5, to-4)
xcomp(wish-3, cut-5)
dobj(cut-5, them-6)
amod(piece-9, smaller-8)
prep_into(cut-5, piece-9)
has_pos(You-1,PRP)
has_pos(may-2,MD)
has_pos(wish-3,VB)
has_pos(to-4,TO)
has_pos(cut-5,VB)
has_pos(them-6,PRP)
has_pos(smaller-8,JJR)
has_pos(piece-9,NN)
has_sense(You-1, null)
has_sense(to-4, null)
has_sense(them-6, null)
has_sense(may-2, null)
---
// select your prefer cut of duck meat .
has_sense(select-1,select-1-sense)
is_a(select-1-sense,choose.v.01)
has_sense(prefer-3,prefer-3-sense)
is_a(prefer-3-sense,prefer.v.01)
has_sense(cut-4,cut-4-sense)
is_a(cut-4-sense,cut.n.06)
has_sense(duck-6,duck-6-sense)
is_a(duck-6-sense,duck.n.03)
action_role(duck-6,Item)
has_sense(meat-7,meat-7-sense)
is_a(meat-7-sense,meat.n.01)
action_role(meat-7,Item)
root(ROOT-0, select-1)
poss(cut-4, your-2)
amod(cut-4, prefer-3)
dobj(select-1, cut-4)
nn(meat-7, duck-6)
prep_of(cut-4, meat-7)
has_pos(select-1,VB)
has_pos(your-2,PRP$)
has_pos(prefer-3,JJ)
has_pos(cut-4,NN)
has_pos(duck-6,NN)
has_pos(meat-7,NN)
has_sense(your-2, null)
---
// then cut wedge and remove sections of meat from around the bone .
has_sense(then-1,then-1-sense)
is_a(then-1-sense,then.r.01)
has_sense(cut-2,cut-2-sense)
is_a(cut-2-sense,cut.v.01)
has_sense(wedge-3,wedge-3-sense)
is_a(wedge-3-sense,wedge.n.01)
action_role(wedge-3,Item)
has_sense(remove-5,remove-5-sense)
is_a(remove-5-sense,remove.v.01)
has_sense(meat-8,meat-8-sense)
is_a(meat-8-sense,meat.n.01)
has_sense(bone-12,bone-12-sense)
is_a(bone-12-sense,bone.n.01)
advmod(cut-2, then-1)
root(ROOT-0, cut-2)
dobj(cut-2, wedge-3)
conj_and(cut-2, remove-5)
dobj(remove-5, sections-6)
prep_of(sections-6, meat-8)
prep(remove-5, from-9)
pcomp(from-9, around-10)
det(bone-12, the-11)
pobj(around-10, bone-12)
has_pos(then-1,RB)
has_pos(cut-2,VB)
has_pos(wedge-3,NN)
has_pos(remove-5,VB)
has_pos(sections-6,NNS)
has_pos(meat-8,NN)
has_pos(from-9,IN)
has_pos(around-10,IN)
has_pos(the-11,DT)
has_pos(bone-12,NN)
has_sense(around-10, null)
has_sense(sections-6, null)
has_sense(from-9, null)
has_sense(the-11, null)
---
// Cut with the knife , in the same way .
has_sense(knife-4,knife-4-sense)
is_a(knife-4-sense,knife.n.01)
action_role(knife-4,Instrument)
has_sense(same-8,same-8-sense)
is_a(same-8-sense,same.a.02)
has_sense(way-9,way-9-sense)
is_a(way-9-sense,manner.n.01)
root(ROOT-0, Cut-1)
det(knife-4, the-3)
prep_with(Cut-1, knife-4)
det(way-9, the-7)
amod(way-9, same-8)
prep_in(Cut-1, way-9)
has_pos(Cut-1,NNP)
has_pos(the-3,DT)
has_pos(knife-4,NN)
has_pos(the-7,DT)
has_pos(same-8,JJ)
has_pos(way-9,NN)
has_sense(the-7, null)
has_sense(the-3, null)
has_sense(Cut-1, null)
---
// peel and cut_up fruit or vegetable .
has_sense(peel-1,peel-1-sense)
is_a(peel-1-sense,skin.v.04)
has_sense(cut_up-3,cut_up-3-sense)
is_a(cut_up-3-sense,carve.v.03)
has_sense(fruit-4,fruit-4-sense)
is_a(fruit-4-sense,fruit.n.01)
action_role(fruit-4,Item)
has_sense(vegetable-6,vegetable-6-sense)
is_a(vegetable-6-sense,vegetable.n.01)
action_role(vegetable-6,Item)
root(ROOT-0, peel-1)
conj_and(peel-1, cut_up-3)
dobj(peel-1, fruit-4)
conj_or(fruit-4, vegetable-6)
has_pos(peel-1,VB)
has_pos(cut_up-3,VB)
has_pos(fruit-4,NN)
has_pos(vegetable-6,NN)
---
// cut each quarter into third .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.v.01)
has_sense(quarter-3,quarter-3-sense)
is_a(quarter-3-sense,one-fourth.n.01)
action_role(quarter-3,Item)
has_sense(third-5,third-5-sense)
is_a(third-5-sense,one-third.n.01)
action_role(third-5,Pieces)
root(ROOT-0, cut-1)
det(quarter-3, each-2)
dobj(cut-1, quarter-3)
prep_into(cut-1, third-5)
has_pos(cut-1,VB)
has_pos(each-2,DT)
has_pos(quarter-3,NN)
has_pos(third-5,JJ)
has_sense(each-2, null)
---
// simply cut a hole into the top of the cake .
has_sense(simply-1,simply-1-sense)
is_a(simply-1-sense,plainly.r.02)
has_sense(cut-2,cut-2-sense)
is_a(cut-2-sense,cut.v.01)
has_sense(hole-4,hole-4-sense)
is_a(hole-4-sense,hole.n.02)
action_role(hole-4,Item)
has_sense(top-7,top-7-sense)
is_a(top-7-sense,top.n.01)
has_sense(cake-10,cake-10-sense)
is_a(cake-10-sense,cake.n.03)
action_role(cake-10,Place)
advmod(cut-2, simply-1)
root(ROOT-0, cut-2)
det(hole-4, a-3)
dobj(cut-2, hole-4)
det(top-7, the-6)
prep_into(cut-2, top-7)
det(cake-10, the-9)
prep_of(top-7, cake-10)
has_pos(simply-1,RB)
has_pos(cut-2,VB)
has_pos(a-3,DT)
has_pos(hole-4,NN)
has_pos(the-6,DT)
has_pos(top-7,NN)
has_pos(the-9,DT)
has_pos(cake-10,NN)
has_sense(the-6, null)
has_sense(the-9, null)
has_sense(a-3, null)
---
// Now you have the entire chicken cut into piece .
has_sense(entire-5,entire-5-sense)
is_a(entire-5-sense,entire.s.01)
has_sense(chicken-6,chicken-6-sense)
is_a(chicken-6-sense,chicken.n.01)
action_role(chicken-6,Item)
has_sense(cut-7,cut-7-sense)
is_a(cut-7-sense,cut.v.01)
has_sense(piece-9,piece-9-sense)
is_a(piece-9-sense,piece.n.01)
action_role(piece-9,Pieces)
advmod(have-3, Now-1)
nsubj(have-3, you-2)
root(ROOT-0, have-3)
det(chicken-6, the-4)
amod(chicken-6, entire-5)
dobj(have-3, chicken-6)
partmod(chicken-6, cut-7)
prep_into(cut-7, piece-9)
has_pos(Now-1,RB)
has_pos(you-2,PRP)
has_pos(have-3,VBP)
has_pos(the-4,DT)
has_pos(entire-5,JJ)
has_pos(chicken-6,NN)
has_pos(cut-7,VBN)
has_pos(piece-9,NN)
has_sense(the-4, null)
has_sense(have-3, null)
has_sense(you-2, null)
has_sense(Now-1, null)
---
// wash and cut each potato into quarters or smaller pieces .
has_sense(wash-1,wash-1-sense)
is_a(wash-1-sense,wash.v.03)
has_sense(cut-3,cut-3-sense)
is_a(cut-3-sense,cut.v.01)
has_sense(potato-5,potato-5-sense)
is_a(potato-5-sense,potato.n.01)
action_role(potato-5,Item)
has_sense(quarters-7,quarters-7-sense)
is_a(quarters-7-sense,one-fourth.n.01)
action_role(quarters-7,Pieces)
has_sense(smaller-9,smaller-9-sense)
is_a(smaller-9-sense,smaller.s.01)
has_sense(pieces-10,pieces-10-sense)
is_a(pieces-10-sense,piece.n.08)
action_role(pieces-10,Pieces)
root(ROOT-0, wash-1)
conj_and(wash-1, cut-3)
det(potato-5, each-4)
dobj(wash-1, potato-5)
prep_into(wash-1, quarters-7)
amod(pieces-10, smaller-9)
conj_or(quarters-7, pieces-10)
has_pos(wash-1,VB)
has_pos(cut-3,VB)
has_pos(each-4,DT)
has_pos(potato-5,NN)
has_pos(quarters-7,NNS)
has_pos(smaller-9,JJR)
has_pos(pieces-10,NNS)
has_sense(each-4, null)
---
// Cut the onion under water .
has_sense(onion-3,onion-3-sense)
is_a(onion-3-sense,onion.n.03)
action_role(onion-3,Item)
has_sense(water-5,water-5-sense)
is_a(water-5-sense,water.n.06)
action_role(water-5,Place)
root(ROOT-0, Cut-1)
det(onion-3, the-2)
dep(Cut-1, onion-3)
prep_under(onion-3, water-5)
has_pos(Cut-1,NNP)
has_pos(the-2,DT)
has_pos(onion-3,NN)
has_pos(water-5,NN)
has_sense(Cut-1, null)
has_sense(the-2, null)
---
// You can grill the chicken cut_up , or as a whole chicken breast .
has_sense(grill-3,grill-3-sense)
is_a(grill-3-sense,grill.v.01)
has_sense(chicken-5,chicken-5-sense)
is_a(chicken-5-sense,chicken.n.01)
action_role(chicken-5,Item)
has_sense(cut_up-6,cut_up-6-sense)
is_a(cut_up-6-sense,carve.v.03)
has_sense(whole-11,whole-11-sense)
is_a(whole-11-sense,whole.a.01)
nsubj(grill-3, You-1)
aux(grill-3, can-2)
root(ROOT-0, grill-3)
det(cut_up-6, the-4)
nn(cut_up-6, chicken-5)
dobj(grill-3, cut_up-6)
dep(as-9, or-8)
dep(grill-3, as-9)
det(breast-13, a-10)
amod(breast-13, whole-11)
nn(breast-13, chicken-12)
pobj(as-9, breast-13)
has_pos(You-1,PRP)
has_pos(can-2,MD)
has_pos(grill-3,VB)
has_pos(the-4,DT)
has_pos(chicken-5,NN)
has_pos(cut_up-6,NN)
has_pos(or-8,CC)
has_pos(as-9,IN)
has_pos(a-10,DT)
has_pos(whole-11,JJ)
has_pos(chicken-12,NN)
has_pos(breast-13,NN)
has_sense(the-4, null)
has_sense(a-10, null)
has_sense(You-1, null)
has_sense(as-9, null)
has_sense(or-8, null)
has_sense(can-2, null)
has_sense(breast-13, null)
has_sense(chicken-12, null)
---
// If you have an under-ripe banana , use your thumbnail to make a tiny cut in the surface of the skin where the stem meet the banana .
has_sense(have-3,have-3-sense)
is_a(have-3-sense,have.v.01)
has_sense(banana-6,banana-6-sense)
is_a(banana-6-sense,banana.n.02)
action_role(banana-6,Item)
has_sense(use-8,use-8-sense)
is_a(use-8-sense,use.v.01)
has_sense(thumbnail-10,thumbnail-10-sense)
is_a(thumbnail-10-sense,thumbnail.n.01)
action_role(thumbnail-10,Instrument)
has_sense(make-12,make-12-sense)
is_a(make-12-sense,make.v.03)
has_sense(tiny-14,tiny-14-sense)
is_a(tiny-14-sense,bantam.s.01)
has_sense(cut-15,cut-15-sense)
is_a(cut-15-sense,cut.n.16)
has_sense(surface-18,surface-18-sense)
is_a(surface-18-sense,surface.n.01)
has_sense(skin-21,skin-21-sense)
is_a(skin-21-sense,peel.n.02)
action_role(skin-21,Place)
has_sense(stem-24,stem-24-sense)
is_a(stem-24-sense,stalk.n.02)
has_sense(meet-25,meet-25-sense)
is_a(meet-25-sense,touch.v.05)
has_sense(banana-27,banana-27-sense)
is_a(banana-27-sense,banana.n.02)
mark(have-3, If-1)
nsubj(have-3, you-2)
advcl(use-8, have-3)
det(banana-6, an-4)
amod(banana-6, under-ripe-5)
dobj(have-3, banana-6)
root(ROOT-0, use-8)
poss(thumbnail-10, your-9)
dobj(use-8, thumbnail-10)
aux(make-12, to-11)
infmod(thumbnail-10, make-12)
det(cut-15, a-13)
amod(cut-15, tiny-14)
dobj(make-12, cut-15)
det(surface-18, the-17)
prep_in(make-12, surface-18)
det(skin-21, the-20)
prep_of(surface-18, skin-21)
advmod(meet-25, where-22)
det(stem-24, the-23)
nsubj(meet-25, stem-24)
advcl(make-12, meet-25)
det(banana-27, the-26)
dobj(meet-25, banana-27)
has_pos(If-1,IN)
has_pos(you-2,PRP)
has_pos(have-3,VBP)
has_pos(an-4,DT)
has_pos(under-ripe-5,JJ)
has_pos(banana-6,NN)
has_pos(use-8,VB)
has_pos(your-9,PRP$)
has_pos(thumbnail-10,NN)
has_pos(to-11,TO)
has_pos(make-12,VB)
has_pos(a-13,DT)
has_pos(tiny-14,JJ)
has_pos(cut-15,NN)
has_pos(the-17,DT)
has_pos(surface-18,NN)
has_pos(the-20,DT)
has_pos(skin-21,NN)
has_pos(where-22,WRB)
has_pos(the-23,DT)
has_pos(stem-24,NN)
has_pos(meet-25,VBP)
has_pos(the-26,DT)
has_pos(banana-27,NN)
has_sense(under-ripe-5, null)
has_sense(you-2, null)
has_sense(a-13, null)
has_sense(your-9, null)
has_sense(an-4, null)
has_sense(the-26, null)
has_sense(to-11, null)
has_sense(the-23, null)
has_sense(the-20, null)
has_sense(the-17, null)
has_sense(where-22, null)
has_sense(If-1, null)
---
// place the half of the bagel correctly into the toaster with the cut sides face out .
has_sense(place-1,place-1-sense)
is_a(place-1-sense,put.v.01)
has_sense(half-3,half-3-sense)
is_a(half-3-sense,one-half.n.01)
has_sense(bagel-6,bagel-6-sense)
is_a(bagel-6-sense,bagel.n.01)
has_sense(correctly-7,correctly-7-sense)
is_a(correctly-7-sense,correctly.r.01)
has_sense(toaster-10,toaster-10-sense)
is_a(toaster-10-sense,toaster.n.02)
has_sense(face-15,face-15-sense)
is_a(face-15-sense,front.v.01)
csubj(face-15, place-1)
det(half-3, the-2)
dobj(place-1, half-3)
det(bagel-6, the-5)
prep_of(half-3, bagel-6)
advmod(place-1, correctly-7)
det(toaster-10, the-9)
prep_into(place-1, toaster-10)
det(sides-14, the-12)
nn(sides-14, cut-13)
prep_with(toaster-10, sides-14)
root(ROOT-0, face-15)
prt(face-15, out-16)
has_pos(place-1,VB)
has_pos(the-2,DT)
has_pos(half-3,NN)
has_pos(the-5,DT)
has_pos(bagel-6,NN)
has_pos(correctly-7,RB)
has_pos(the-9,DT)
has_pos(toaster-10,NN)
has_pos(the-12,DT)
has_pos(cut-13,NN)
has_pos(sides-14,NNS)
has_pos(face-15,VBP)
has_pos(out-16,RP)
has_sense(the-5, null)
has_sense(the-2, null)
has_sense(sides-14, null)
has_sense(the-9, null)
has_sense(cut-13, null)
has_sense(the-12, null)
has_sense(out-16, null)
---
// cut_off the excess edge with a butter_knife .
has_sense(cut_off-1,cut_off-1-sense)
is_a(cut_off-1-sense,cut_off.v.03)
has_sense(excess-3,excess-3-sense)
is_a(excess-3-sense,excess.s.01)
has_sense(edge-4,edge-4-sense)
is_a(edge-4-sense,edge.n.06)
action_role(edge-4,Item)
has_sense(butter_knife-7,butter_knife-7-sense)
is_a(butter_knife-7-sense,butter_knife.n.01)
action_role(butter_knife-7,Instrument)
root(ROOT-0, cut_off-1)
det(edge-4, the-2)
amod(edge-4, excess-3)
dobj(cut_off-1, edge-4)
det(butter_knife-7, a-6)
prep_with(cut_off-1, butter_knife-7)
has_pos(cut_off-1,VB)
has_pos(the-2,DT)
has_pos(excess-3,JJ)
has_pos(edge-4,NN)
has_pos(a-6,DT)
has_pos(butter_knife-7,NN)
has_sense(the-2, null)
has_sense(a-6, null)
---
// take chicken out of the pot and cut into half inch square .
has_sense(take-1,take-1-sense)
is_a(take-1-sense,take.v.04)
has_sense(chicken-2,chicken-2-sense)
is_a(chicken-2-sense,chicken.n.01)
action_role(chicken-2,Item)
has_sense(pot-6,pot-6-sense)
is_a(pot-6-sense,pot.n.01)
has_sense(cut-8,cut-8-sense)
is_a(cut-8-sense,cut.v.01)
has_sense(half-10,half-10-sense)
is_a(half-10-sense,half.s.01)
has_sense(inch-11,inch-11-sense)
is_a(inch-11-sense,inch.n.01)
has_sense(square-12,square-12-sense)
is_a(square-12-sense,square.n.04)
action_role(square-12,Pieces)
root(ROOT-0, take-1)
dobj(take-1, chicken-2)
det(pot-6, the-5)
prep_out_of(take-1, pot-6)
conj_and(take-1, cut-8)
det(square-12, half-10)
nn(square-12, inch-11)
prep_into(cut-8, square-12)
has_pos(take-1,VB)
has_pos(chicken-2,NN)
has_pos(the-5,DT)
has_pos(pot-6,NN)
has_pos(cut-8,VB)
has_pos(half-10,DT)
has_pos(inch-11,NN)
has_pos(square-12,NN)
has_sense(the-5, null)
---
// If you cut across , the sinew be short and more tender .
has_sense(cut-3,cut-3-sense)
is_a(cut-3-sense,cut.v.01)
has_sense(sinew-7,sinew-7-sense)
is_a(sinew-7-sense,tendon.n.01)
has_sense(be-8,be-8-sense)
is_a(be-8-sense,be.v.01)
has_sense(short-9,short-9-sense)
is_a(short-9-sense,short.a.02)
has_sense(more-11,more-11-sense)
is_a(more-11-sense,more.a.01)
mark(cut-3, If-1)
nsubj(cut-3, you-2)
advcl(short-9, cut-3)
prt(cut-3, across-4)
det(sinew-7, the-6)
nsubj(short-9, sinew-7)
cop(short-9, be-8)
root(ROOT-0, short-9)
conj_and(short-9, more-11)
attr(short-9, tender-12)
has_pos(If-1,IN)
has_pos(you-2,PRP)
has_pos(cut-3,VBD)
has_pos(across-4,RP)
has_pos(the-6,DT)
has_pos(sinew-7,NN)
has_pos(be-8,VB)
has_pos(short-9,JJ)
has_pos(more-11,JJR)
has_pos(tender-12,NN)
has_sense(the-6, null)
has_sense(you-2, null)
has_sense(across-4, null)
has_sense(tender-12, null)
has_sense(If-1, null)
---
// wash the chicken_breasts and cut them into 1 to 2 inch piece .
has_sense(wash-1,wash-1-sense)
is_a(wash-1-sense,wash.v.03)
has_sense(chicken_breasts-3,chicken_breasts-3-sense)
is_a(chicken_breasts-3-sense,pigeon_breast.n.01)
has_sense(cut-5,cut-5-sense)
is_a(cut-5-sense,cut.v.01)
has_sense(inch-11,inch-11-sense)
is_a(inch-11-sense,inch.n.01)
has_sense(piece-12,piece-12-sense)
is_a(piece-12-sense,piece.n.01)
action_role(piece-12,Pieces)
root(ROOT-0, wash-1)
det(chicken_breasts-3, the-2)
dobj(wash-1, chicken_breasts-3)
conj_and(wash-1, cut-5)
dobj(cut-5, them-6)
number(2-10, 1-8)
dep(2-10, to-9)
num(piece-12, 2-10)
nn(piece-12, inch-11)
prep_into(cut-5, piece-12)
has_pos(wash-1,VB)
has_pos(the-2,DT)
has_pos(chicken_breasts-3,NNS)
has_pos(cut-5,VB)
has_pos(them-6,PRP)
has_pos(1-8,CD)
has_pos(to-9,TO)
has_pos(2-10,CD)
has_pos(inch-11,NN)
has_pos(piece-12,NN)
has_sense(1-8, null)
has_sense(the-2, null)
has_sense(to-9, null)
has_sense(them-6, null)
has_sense(2-10, null)
---
// cut the mango into three piece .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.v.01)
has_sense(mango-3,mango-3-sense)
is_a(mango-3-sense,mango.n.02)
action_role(mango-3,Item)
has_sense(piece-6,piece-6-sense)
is_a(piece-6-sense,piece.n.01)
action_role(piece-6,Pieces)
root(ROOT-0, cut-1)
det(mango-3, the-2)
dobj(cut-1, mango-3)
num(piece-6, three-5)
prep_into(cut-1, piece-6)
has_pos(cut-1,VB)
has_pos(the-2,DT)
has_pos(mango-3,NN)
has_pos(three-5,CD)
has_pos(piece-6,NN)
has_sense(three-5, null)
has_sense(the-2, null)
---
// closely as possible to the backbone .
has_sense(closely-1,closely-1-sense)
is_a(closely-1-sense,closely.r.01)
has_sense(as-2,as-2-sense)
is_a(as-2-sense,equally.r.01)
has_sense(possible-3,possible-3-sense)
is_a(possible-3-sense,possible.a.01)
has_sense(backbone-6,backbone-6-sense)
is_a(backbone-6-sense,spinal_column.n.01)
advmod(possible-3, closely-1)
advmod(possible-3, as-2)
root(ROOT-0, possible-3)
det(backbone-6, the-5)
prep_to(possible-3, backbone-6)
has_pos(closely-1,RB)
has_pos(as-2,RB)
has_pos(possible-3,JJ)
has_pos(the-5,DT)
has_pos(backbone-6,NN)
has_sense(the-5, null)
---
// use the blade to cut through the foil under the rim of the bottle 's neck .
has_sense(use-1,use-1-sense)
is_a(use-1-sense,use.v.01)
has_sense(blade-3,blade-3-sense)
is_a(blade-3-sense,blade.n.09)
action_role(blade-3,Instrument)
has_sense(cut-5,cut-5-sense)
is_a(cut-5-sense,cut.v.01)
has_sense(foil-8,foil-8-sense)
is_a(foil-8-sense,foil.n.01)
action_role(foil-8,Item)
has_sense(rim-11,rim-11-sense)
is_a(rim-11-sense,brim.n.01)
action_role(rim-11,Place)
has_sense(bottle-14,bottle-14-sense)
is_a(bottle-14-sense,bottle.n.01)
has_sense(neck-16,neck-16-sense)
is_a(neck-16-sense,neck.n.04)
root(ROOT-0, use-1)
det(blade-3, the-2)
dobj(use-1, blade-3)
aux(cut-5, to-4)
infmod(blade-3, cut-5)
det(foil-8, the-7)
prep_through(cut-5, foil-8)
det(rim-11, the-10)
prep_under(cut-5, rim-11)
det(bottle-14, the-13)
poss(neck-16, bottle-14)
prep_of(rim-11, neck-16)
has_pos(use-1,VB)
has_pos(the-2,DT)
has_pos(blade-3,NN)
has_pos(to-4,TO)
has_pos(cut-5,VB)
has_pos(the-7,DT)
has_pos(foil-8,NN)
has_pos(the-10,DT)
has_pos(rim-11,NN)
has_pos(the-13,DT)
has_pos(bottle-14,NN)
has_pos(neck-16,NN)
has_sense(the-7, null)
has_sense(the-2, null)
has_sense(to-4, null)
has_sense(the-13, null)
has_sense(the-10, null)
---
// You should wash the kiwi_fruit before you cut it and eat the flesh .
has_sense(wash-3,wash-3-sense)
is_a(wash-3-sense,wash.v.03)
has_sense(kiwi_fruit-5,kiwi_fruit-5-sense)
is_a(kiwi_fruit-5-sense,kiwi.n.03)
action_role(kiwi_fruit-5,Item)
has_sense(cut-8,cut-8-sense)
is_a(cut-8-sense,cut.v.01)
has_sense(eat-11,eat-11-sense)
is_a(eat-11-sense,eat.v.01)
has_sense(flesh-13,flesh-13-sense)
is_a(flesh-13-sense,pulp.n.02)
nsubj(wash-3, You-1)
aux(wash-3, should-2)
root(ROOT-0, wash-3)
det(kiwi_fruit-5, the-4)
dobj(wash-3, kiwi_fruit-5)
mark(cut-8, before-6)
nsubj(cut-8, you-7)
advcl(wash-3, cut-8)
dobj(cut-8, it-9)
conj_and(wash-3, eat-11)
det(flesh-13, the-12)
dobj(eat-11, flesh-13)
has_pos(You-1,PRP)
has_pos(should-2,MD)
has_pos(wash-3,VB)
has_pos(the-4,DT)
has_pos(kiwi_fruit-5,NN)
has_pos(before-6,IN)
has_pos(you-7,PRP)
has_pos(cut-8,VBD)
has_pos(it-9,PRP)
has_pos(eat-11,VB)
has_pos(the-12,DT)
has_pos(flesh-13,NN)
has_sense(you-7, null)
has_sense(the-4, null)
has_sense(You-1, null)
has_sense(before-6, null)
has_sense(the-12, null)
has_sense(should-2, null)
has_sense(it-9, null)
---
// cut_off both stems with a swift clean knife cut .
has_sense(cut_off-1,cut_off-1-sense)
is_a(cut_off-1-sense,cut_off.v.03)
has_sense(stems-3,stems-3-sense)
is_a(stems-3-sense,stalk.n.02)
action_role(stems-3,Item)
has_sense(swift-6,swift-6-sense)
is_a(swift-6-sense,fleet.s.01)
has_sense(clean-7,clean-7-sense)
is_a(clean-7-sense,clean.s.17)
has_sense(knife-8,knife-8-sense)
is_a(knife-8-sense,knife.n.01)
action_role(knife-8,Instrument)
nsubj(stems-3, cut_off-1)
dep(stems-3, both-2)
root(ROOT-0, stems-3)
det(cut-9, a-5)
amod(cut-9, swift-6)
amod(cut-9, clean-7)
nn(cut-9, knife-8)
prep_with(stems-3, cut-9)
has_pos(cut_off-1,NN)
has_pos(both-2,DT)
has_pos(stems-3,VBZ)
has_pos(a-5,DT)
has_pos(swift-6,JJ)
has_pos(clean-7,JJ)
has_pos(knife-8,NN)
has_pos(cut-9,NN)
has_sense(both-2, null)
has_sense(cut-9, null)
has_sense(a-5, null)
---
// cut_off the overhanging edges .
has_sense(cut_off-1,cut_off-1-sense)
is_a(cut_off-1-sense,cut_off.v.03)
has_sense(edges-4,edges-4-sense)
is_a(edges-4-sense,edge.n.06)
action_role(edges-4,Item)
root(ROOT-0, cut_off-1)
det(edges-4, the-2)
amod(edges-4, overhanging-3)
dobj(cut_off-1, edges-4)
has_pos(cut_off-1,VB)
has_pos(the-2,DT)
has_pos(overhanging-3,JJ)
has_pos(edges-4,NNS)
has_sense(the-2, null)
has_sense(overhanging-3, null)
---
// cut_down down the middle .
has_sense(cut_down-1,cut_down-1-sense)
is_a(cut_down-1-sense,cut.v.01)
has_sense(middle-4,middle-4-sense)
is_a(middle-4-sense,center.n.01)
action_role(middle-4,Manner)
root(ROOT-0, cut_down-1)
prt(cut_down-1, down-2)
det(middle-4, the-3)
dobj(cut_down-1, middle-4)
has_pos(cut_down-1,VB)
has_pos(down-2,RP)
has_pos(the-3,DT)
has_pos(middle-4,NN)
has_sense(the-3, null)
has_sense(down-2, null)
---
// Cut through remaining skin .
has_sense(skin-4,skin-4-sense)
is_a(skin-4-sense,peel.n.02)
action_role(skin-4,Item)
root(ROOT-0, Cut-1)
amod(skin-4, remaining-3)
prep_through(Cut-1, skin-4)
has_pos(Cut-1,NNP)
has_pos(remaining-3,VBG)
has_pos(skin-4,NN)
has_sense(Cut-1, null)
has_sense(remaining-3, null)
---
// take a fork and cut the cake into 4 piece .
has_sense(take-1,take-1-sense)
is_a(take-1-sense,take.v.04)
has_sense(fork-3,fork-3-sense)
is_a(fork-3-sense,fork.n.01)
has_sense(cut-5,cut-5-sense)
is_a(cut-5-sense,cut.v.01)
has_sense(cake-7,cake-7-sense)
is_a(cake-7-sense,cake.n.03)
action_role(cake-7,Instrument)
has_sense(piece-10,piece-10-sense)
is_a(piece-10-sense,piece.n.01)
action_role(piece-10,Pieces)
root(ROOT-0, take-1)
det(fork-3, a-2)
dobj(take-1, fork-3)
conj_and(take-1, cut-5)
det(cake-7, the-6)
dobj(cut-5, cake-7)
num(piece-10, 4-9)
prep_into(cut-5, piece-10)
has_pos(take-1,VB)
has_pos(a-2,DT)
has_pos(fork-3,NN)
has_pos(cut-5,VB)
has_pos(the-6,DT)
has_pos(cake-7,NN)
has_pos(4-9,CD)
has_pos(piece-10,NN)
has_sense(the-6, null)
has_sense(4-9, null)
has_sense(a-2, null)
---
// cut the paunch into cube .
has_sense(cut-1,cut-1-sense)
is_a(cut-1-sense,cut.v.01)
has_sense(paunch-3,paunch-3-sense)
is_a(paunch-3-sense,belly.n.02)
action_role(paunch-3,Item)
has_sense(cube-5,cube-5-sense)
is_a(cube-5-sense,block.n.03)
action_role(cube-5,Pieces)
root(ROOT-0, cut-1)
det(paunch-3, the-2)
dobj(cut-1, paunch-3)
prep_into(cut-1, cube-5)
has_pos(cut-1,VB)
has_pos(the-2,DT)
has_pos(paunch-3,NN)
has_pos(cube-5,NN)
has_sense(the-2, null)
---
// cut_off the unusable portions at the top and bottom of each half .
has_sense(cut_off-1,cut_off-1-sense)
is_a(cut_off-1-sense,cut_off.v.03)
has_sense(unusable-3,unusable-3-sense)
is_a(unusable-3-sense,unserviceable.s.02)
has_sense(portions-4,portions-4-sense)
is_a(portions-4-sense,part.n.01)
action_role(portions-4,Item)
has_sense(top-7,top-7-sense)
is_a(top-7-sense,top.n.01)
has_sense(bottom-9,bottom-9-sense)
is_a(bottom-9-sense,bottom.n.01)
has_sense(half-12,half-12-sense)
is_a(half-12-sense,one-half.n.01)
root(ROOT-0, cut_off-1)
det(portions-4, the-2)
amod(portions-4, unusable-3)
dobj(cut_off-1, portions-4)
det(top-7, the-6)
prep_at(cut_off-1, top-7)
conj_and(top-7, bottom-9)
det(half-12, each-11)
prep_of(top-7, half-12)
has_pos(cut_off-1,VB)
has_pos(the-2,DT)
has_pos(unusable-3,JJ)
has_pos(portions-4,NNS)
has_pos(the-6,DT)
has_pos(top-7,NN)
has_pos(bottom-9,NN)
has_pos(each-11,DT)
has_pos(half-12,NN)
has_sense(the-6, null)
has_sense(the-2, null)
has_sense(each-11, null)
---
// If the can_opener be electronic , the can will rotate and start to cut open .
has_sense(can_opener-3,can_opener-3-sense)
is_a(can_opener-3-sense,can_opener.n.01)
has_sense(be-4,be-4-sense)
is_a(be-4-sense,be.v.01)
has_sense(electronic-5,electronic-5-sense)
is_a(electronic-5-sense,electronic.a.01)
has_sense(can-8,can-8-sense)
is_a(can-8-sense,can.n.01)
has_sense(rotate-10,rotate-10-sense)
is_a(rotate-10-sense,revolve.v.01)
has_sense(cut-14,cut-14-sense)
is_a(cut-14-sense,cut.v.04)
has_sense(open-15,open-15-sense)
is_a(open-15-sense,open.s.13)
mark(electronic-5, If-1)
det(can_opener-3, the-2)
nsubj(electronic-5, can_opener-3)
cop(electronic-5, be-4)
advcl(rotate-10, electronic-5)
det(can-8, the-7)
nsubj(rotate-10, can-8)
aux(rotate-10, will-9)
root(ROOT-0, rotate-10)
conj_and(rotate-10, start-12)
aux(cut-14, to-13)
xcomp(start-12, cut-14)
acomp(cut-14, open-15)
has_pos(If-1,IN)
has_pos(the-2,DT)
has_pos(can_opener-3,NN)
has_pos(be-4,VB)
has_pos(electronic-5,JJ)
has_pos(the-7,DT)
has_pos(can-8,NN)
has_pos(will-9,MD)
has_pos(rotate-10,VB)
has_pos(start-12,VB)
has_pos(to-13,TO)
has_pos(cut-14,VB)
has_pos(open-15,JJ)
has_sense(the-7, null)
has_sense(the-2, null)
has_sense(will-9, null)
has_sense(to-13, null)
has_sense(If-1, null)
has_sense(start-12, null)
---
// Cut the plum in half .
has_sense(plum-3,plum-3-sense)
is_a(plum-3-sense,plum.n.02)
action_role(plum-3,Item)
has_sense(half-5,half-5-sense)
is_a(half-5-sense,one-half.n.01)
action_role(half-5,Pieces)
root(ROOT-0, Cut-1)
det(plum-3, the-2)
dep(Cut-1, plum-3)
prep_in(plum-3, half-5)
has_pos(Cut-1,NNP)
has_pos(the-2,DT)
has_pos(plum-3,NN)
has_pos(half-5,NN)
has_sense(Cut-1, null)
has_sense(the-2, null)