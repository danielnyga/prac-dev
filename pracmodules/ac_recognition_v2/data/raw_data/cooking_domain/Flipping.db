/* **************************************************************************** 
 * WIKIHOW.COM -- NATURAL-LANGUAGE INSTRUCTIONS
 * 
 * (C) 2011-2013 by Daniel Nyga (nyga@cs.uni-bremen.edu)
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
// take the steak out of the oven and flip it over .
has_sense(take-1,take-1-sense)
is_a(take-1-sense,take.v.04)
has_sense(steak-3,steak-3-sense)
is_a(steak-3-sense,steak.n.01)
has_sense(oven-7,oven-7-sense)
is_a(oven-7-sense,oven.n.01)
has_sense(flip-9,flip-9-sense)
is_a(flip-9-sense,flip.v.08)
root(ROOT-0, take-1)
det(steak-3, the-2)
dobj(take-1, steak-3)
det(oven-7, the-6)
prep_out_of(take-1, oven-7)
conj_and(take-1, flip-9)
dobj(flip-9, it-10)
prt(flip-9, over-11)
has_pos(take-1,VB)
has_pos(the-2,DT)
has_pos(steak-3,NN)
has_pos(the-6,DT)
has_pos(oven-7,NN)
has_pos(flip-9,VB)
has_pos(it-10,PRP)
has_pos(over-11,RP)
has_sense(the-6, null)
has_sense(the-2, null)
has_sense(it-10, null)
has_sense(over-11, null)
---
// do not flip until the side edge be dry and proceed to the other side as followed .
has_sense(do-1,do-1-sense)
is_a(do-1-sense,perform.v.01)
has_sense(not-2,not-2-sense)
is_a(not-2-sense,not.r.01)
has_sense(flip-3,flip-3-sense)
is_a(flip-3-sense,flip.v.08)
has_sense(side-6,side-6-sense)
is_a(side-6-sense,side.n.04)
has_sense(edge-7,edge-7-sense)
is_a(edge-7-sense,edge.n.06)
has_sense(be-8,be-8-sense)
is_a(be-8-sense,be.v.01)
has_sense(dry-9,dry-9-sense)
is_a(dry-9-sense,dry.a.01)
has_sense(other-14,other-14-sense)
is_a(other-14-sense,other.a.01)
aux(flip-3, do-1)
neg(flip-3, not-2)
root(ROOT-0, flip-3)
mark(dry-9, until-4)
det(edge-7, the-5)
nn(edge-7, side-6)
nsubj(dry-9, edge-7)
cop(dry-9, be-8)
advcl(flip-3, dry-9)
conj_and(dry-9, proceed-11)
det(side-15, the-13)
amod(side-15, other-14)
prep_to(proceed-11, side-15)
mark(followed-17, as-16)
advcl(proceed-11, followed-17)
has_pos(do-1,VB)
has_pos(not-2,RB)
has_pos(flip-3,VB)
has_pos(until-4,IN)
has_pos(the-5,DT)
has_pos(side-6,NN)
has_pos(edge-7,NN)
has_pos(be-8,VB)
has_pos(dry-9,JJ)
has_pos(proceed-11,VB)
has_pos(the-13,DT)
has_pos(other-14,JJ)
has_pos(side-15,NN)
has_pos(as-16,IN)
has_pos(followed-17,VBD)
has_sense(the-5, null)
has_sense(as-16, null)
has_sense(the-13, null)
has_sense(proceed-11, null)
has_sense(followed-17, null)
has_sense(side-15, null)
has_sense(until-4, null)
---
// Once the chicken have get browned , flip it so it can cook on the other side .
has_sense(chicken-3,chicken-3-sense)
is_a(chicken-3-sense,chicken.n.01)
has_sense(have-4,have-4-sense)
is_a(have-4-sense,have.v.01)
has_sense(get-5,get-5-sense)
is_a(get-5-sense,become.v.01)
has_sense(flip-8,flip-8-sense)
is_a(flip-8-sense,flip.v.08)
has_sense(cook-13,cook-13-sense)
is_a(cook-13-sense,cook.v.03)
has_sense(other-16,other-16-sense)
is_a(other-16-sense,other.a.01)
has_sense(side-17,side-17-sense)
is_a(side-17-sense,side.n.04)
mark(browned-6, Once-1)
det(chicken-3, the-2)
nsubj(browned-6, chicken-3)
aux(browned-6, have-4)
dep(browned-6, get-5)
advcl(flip-8, browned-6)
root(ROOT-0, flip-8)
dobj(flip-8, it-9)
mark(cook-13, so-10)
nsubj(cook-13, it-11)
aux(cook-13, can-12)
advcl(flip-8, cook-13)
det(side-17, the-15)
amod(side-17, other-16)
prep_on(cook-13, side-17)
has_pos(Once-1,IN)
has_pos(the-2,DT)
has_pos(chicken-3,NN)
has_pos(have-4,VBP)
has_pos(get-5,VBP)
has_pos(browned-6,JJ)
has_pos(flip-8,VB)
has_pos(it-9,PRP)
has_pos(so-10,IN)
has_pos(it-11,PRP)
has_pos(can-12,MD)
has_pos(cook-13,VB)
has_pos(the-15,DT)
has_pos(other-16,JJ)
has_pos(side-17,NN)
has_sense(can-12, null)
has_sense(so-10, null)
has_sense(Once-1, null)
has_sense(the-2, null)
has_sense(it-11, null)
has_sense(the-15, null)
has_sense(browned-6, null)
has_sense(it-9, null)
---
// put a plate on top of the cake pan and flip it over .
has_sense(put-1,put-1-sense)
is_a(put-1-sense,put.v.01)
has_sense(plate-3,plate-3-sense)
is_a(plate-3-sense,plate.n.04)
has_sense(top-5,top-5-sense)
is_a(top-5-sense,top.n.02)
has_sense(cake-8,cake-8-sense)
is_a(cake-8-sense,cake.n.03)
has_sense(pan-9,pan-9-sense)
is_a(pan-9-sense,pan.n.01)
has_sense(flip-11,flip-11-sense)
is_a(flip-11-sense,flip.v.08)
root(ROOT-0, put-1)
det(plate-3, a-2)
dobj(put-1, plate-3)
det(pan-9, the-7)
nn(pan-9, cake-8)
prep_on_top_of(put-1, pan-9)
conj_and(put-1, flip-11)
dobj(flip-11, it-12)
prt(flip-11, over-13)
has_pos(put-1,VB)
has_pos(a-2,DT)
has_pos(plate-3,NN)
has_pos(the-7,DT)
has_pos(cake-8,NN)
has_pos(pan-9,NN)
has_pos(flip-11,VB)
has_pos(it-12,PRP)
has_pos(over-13,RP)
has_sense(the-7, null)
has_sense(it-12, null)
has_sense(over-13, null)
has_sense(a-2, null)
---
// flip the burger over use a spatula after 5 minutes .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(burger-3,burger-3-sense)
is_a(burger-3-sense,hamburger.n.01)
has_sense(use-5,use-5-sense)
is_a(use-5-sense,use.v.01)
has_sense(spatula-7,spatula-7-sense)
is_a(spatula-7-sense,spatula.n.01)
root(ROOT-0, flip-1)
det(burger-3, the-2)
dobj(flip-1, burger-3)
advmod(flip-1, over-4)
dep(flip-1, use-5)
det(spatula-7, a-6)
dobj(use-5, spatula-7)
num(minutes-10, 5-9)
prep_after(use-5, minutes-10)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(burger-3,NN)
has_pos(over-4,RB)
has_pos(use-5,VB)
has_pos(a-6,DT)
has_pos(spatula-7,NN)
has_pos(5-9,CD)
has_pos(minutes-10,NNS)
has_sense(the-2, null)
has_sense(over-4, null)
has_sense(5-9, null)
has_sense(minutes-10, null)
has_sense(a-6, null)
---
// immediately flip the crepe out of the pan and onto a plate .
has_sense(immediately-1,immediately-1-sense)
is_a(immediately-1-sense,immediately.r.01)
has_sense(flip-2,flip-2-sense)
is_a(flip-2-sense,flip.v.08)
has_sense(crepe-4,crepe-4-sense)
is_a(crepe-4-sense,crape.n.01)
has_sense(pan-8,pan-8-sense)
is_a(pan-8-sense,pan.n.01)
has_sense(plate-12,plate-12-sense)
is_a(plate-12-sense,plate.n.04)
advmod(flip-2, immediately-1)
root(ROOT-0, flip-2)
det(crepe-4, the-3)
npadvmod(flip-2, crepe-4)
det(pan-8, the-7)
prep_out_of(flip-2, pan-8)
conj_and(flip-2, onto-10)
det(plate-12, a-11)
pobj(onto-10, plate-12)
has_pos(immediately-1,RB)
has_pos(flip-2,VB)
has_pos(the-3,DT)
has_pos(crepe-4,NN)
has_pos(the-7,DT)
has_pos(pan-8,NN)
has_pos(onto-10,IN)
has_pos(a-11,DT)
has_pos(plate-12,NN)
has_sense(the-7, null)
has_sense(the-3, null)
has_sense(onto-10, null)
has_sense(a-11, null)
---
// carefully , with your spatula and pot holder flip the sandwich over .
has_sense(carefully-1,carefully-1-sense)
is_a(carefully-1-sense,carefully.r.01)
has_sense(spatula-5,spatula-5-sense)
is_a(spatula-5-sense,spatula.n.02)
has_sense(holder-8,holder-8-sense)
is_a(holder-8-sense,holder.n.01)
has_sense(flip-9,flip-9-sense)
is_a(flip-9-sense,flip.v.08)
has_sense(sandwich-11,sandwich-11-sense)
is_a(sandwich-11-sense,sandwich.n.01)
root(ROOT-0, carefully-1)
dep(carefully-1, with-3)
poss(spatula-5, your-4)
pobj(with-3, spatula-5)
nn(holder-8, pot-7)
conj_and(spatula-5, holder-8)
partmod(spatula-5, flip-9)
det(sandwich-11, the-10)
dobj(flip-9, sandwich-11)
prt(flip-9, over-12)
has_pos(carefully-1,RB)
has_pos(with-3,IN)
has_pos(your-4,PRP$)
has_pos(spatula-5,NN)
has_pos(pot-7,NN)
has_pos(holder-8,NN)
has_pos(flip-9,VBG)
has_pos(the-10,DT)
has_pos(sandwich-11,NN)
has_pos(over-12,RP)
has_sense(your-4, null)
has_sense(pot-7, null)
has_sense(over-12, null)
has_sense(with-3, null)
has_sense(the-10, null)
---
// Make sure no corn flip out .
has_sense(sure-2,sure-2-sense)
is_a(sure-2-sense,certain.a.02)
has_sense(corn-4,corn-4-sense)
is_a(corn-4-sense,corn.n.02)
has_sense(flip-5,flip-5-sense)
is_a(flip-5-sense,flip.v.07)
root(ROOT-0, Make-1)
acomp(Make-1, sure-2)
det(corn-4, no-3)
nsubj(flip-5, corn-4)
dep(sure-2, flip-5)
prt(flip-5, out-6)
has_pos(Make-1,VB)
has_pos(sure-2,JJ)
has_pos(no-3,DT)
has_pos(corn-4,NN)
has_pos(flip-5,VB)
has_pos(out-6,RP)
has_sense(out-6, null)
has_sense(no-3, null)
has_sense(Make-1, null)
---
// take the pan out of the oven and , use tongs , flip each wing over .
has_sense(take-1,take-1-sense)
is_a(take-1-sense,take.v.04)
has_sense(pan-3,pan-3-sense)
is_a(pan-3-sense,pan.n.01)
has_sense(oven-7,oven-7-sense)
is_a(oven-7-sense,oven.n.01)
has_sense(use-10,use-10-sense)
is_a(use-10-sense,use.v.01)
has_sense(tongs-11,tongs-11-sense)
is_a(tongs-11-sense,tongs.n.01)
has_sense(flip-13,flip-13-sense)
is_a(flip-13-sense,flip.v.08)
has_sense(wing-15,wing-15-sense)
is_a(wing-15-sense,wing.n.09)
root(ROOT-0, take-1)
det(pan-3, the-2)
dobj(take-1, pan-3)
det(oven-7, the-6)
prep_out_of(take-1, oven-7)
nn(tongs-11, use-10)
dep(take-1, tongs-11)
conj_and(take-1, flip-13)
det(wing-15, each-14)
dobj(flip-13, wing-15)
prt(flip-13, over-16)
has_pos(take-1,VB)
has_pos(the-2,DT)
has_pos(pan-3,NN)
has_pos(the-6,DT)
has_pos(oven-7,NN)
has_pos(use-10,NN)
has_pos(tongs-11,NNS)
has_pos(flip-13,VB)
has_pos(each-14,DT)
has_pos(wing-15,NN)
has_pos(over-16,RP)
has_sense(the-6, null)
has_sense(the-2, null)
has_sense(each-14, null)
has_sense(over-16, null)
---
// flip it over and let it cook on the other side .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(let-5,let-5-sense)
is_a(let-5-sense,let.v.01)
has_sense(cook-7,cook-7-sense)
is_a(cook-7-sense,cook.v.03)
has_sense(other-10,other-10-sense)
is_a(other-10-sense,other.a.01)
root(ROOT-0, flip-1)
dobj(flip-1, it-2)
prt(flip-1, over-3)
conj_and(flip-1, let-5)
nsubj(cook-7, it-6)
ccomp(let-5, cook-7)
det(side-11, the-9)
amod(side-11, other-10)
prep_on(cook-7, side-11)
has_pos(flip-1,VB)
has_pos(it-2,PRP)
has_pos(over-3,RP)
has_pos(let-5,VB)
has_pos(it-6,PRP)
has_pos(cook-7,VB)
has_pos(the-9,DT)
has_pos(other-10,JJ)
has_pos(side-11,NN)
has_sense(over-3, null)
has_sense(the-9, null)
has_sense(it-6, null)
has_sense(it-2, null)
has_sense(side-11, null)
---
// flip the chicken piece and fry for another 2 minutes .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(chicken-3,chicken-3-sense)
is_a(chicken-3-sense,chicken.n.01)
has_sense(piece-4,piece-4-sense)
is_a(piece-4-sense,piece.n.08)
root(ROOT-0, flip-1)
det(piece-4, the-2)
nn(piece-4, chicken-3)
dobj(flip-1, piece-4)
conj_and(piece-4, fry-6)
det(minutes-10, another-8)
num(minutes-10, 2-9)
prep_for(piece-4, minutes-10)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(chicken-3,NN)
has_pos(piece-4,NN)
has_pos(fry-6,NN)
has_pos(another-8,DT)
has_pos(2-9,CD)
has_pos(minutes-10,NNS)
has_sense(fry-6, null)
has_sense(2-9, null)
has_sense(the-2, null)
has_sense(another-8, null)
has_sense(minutes-10, null)
---
// When bacon beings to curl , flip each piece with a fork .
has_sense(bacon-2,bacon-2-sense)
is_a(bacon-2-sense,bacon.n.01)
has_sense(curl-5,curl-5-sense)
is_a(curl-5-sense,curl.v.01)
has_sense(flip-7,flip-7-sense)
is_a(flip-7-sense,flip.v.08)
has_sense(fork-12,fork-12-sense)
is_a(fork-12-sense,fork.n.01)
advmod(curl-5, When-1)
nn(beings-3, bacon-2)
nsubj(curl-5, beings-3)
aux(curl-5, to-4)
dep(flip-7, curl-5)
root(ROOT-0, flip-7)
det(piece-9, each-8)
dobj(flip-7, piece-9)
det(fork-12, a-11)
prep_with(flip-7, fork-12)
has_pos(When-1,WRB)
has_pos(bacon-2,NN)
has_pos(beings-3,NNS)
has_pos(to-4,TO)
has_pos(curl-5,VB)
has_pos(flip-7,VB)
has_pos(each-8,DT)
has_pos(piece-9,NN)
has_pos(a-11,DT)
has_pos(fork-12,NN)
has_sense(each-8, null)
has_sense(a-11, null)
has_sense(When-1, null)
has_sense(to-4, null)
has_sense(beings-3, null)
has_sense(piece-9, null)
---
// flip the patties over once in-between cooking time to sear each side .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(in-between-6,in-between-6-sense)
is_a(in-between-6-sense,in-between.s.01)
has_sense(time-8,time-8-sense)
is_a(time-8-sense,time.n.02)
has_sense(sear-10,sear-10-sense)
is_a(sear-10-sense,char.v.02)
has_sense(side-12,side-12-sense)
is_a(side-12-sense,side.n.04)
root(ROOT-0, flip-1)
det(patties-3, the-2)
dobj(flip-1, patties-3)
prt(flip-1, over-4)
mark(sear-10, once-5)
amod(time-8, in-between-6)
nn(time-8, cooking-7)
nsubj(sear-10, time-8)
aux(sear-10, to-9)
advcl(flip-1, sear-10)
det(side-12, each-11)
dobj(sear-10, side-12)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(patties-3,NNS)
has_pos(over-4,RP)
has_pos(once-5,IN)
has_pos(in-between-6,JJ)
has_pos(cooking-7,NN)
has_pos(time-8,NN)
has_pos(to-9,TO)
has_pos(sear-10,VB)
has_pos(each-11,DT)
has_pos(side-12,NN)
has_sense(to-9, null)
has_sense(cooking-7, null)
has_sense(once-5, null)
has_sense(over-4, null)
has_sense(each-11, null)
has_sense(patties-3, null)
has_sense(the-2, null)
---
// do not try to flip food with a skillet that be too heavy .
has_sense(do-1,do-1-sense)
is_a(do-1-sense,perform.v.01)
has_sense(not-2,not-2-sense)
is_a(not-2-sense,not.r.01)
has_sense(try-3,try-3-sense)
is_a(try-3-sense,try.v.01)
has_sense(flip-5,flip-5-sense)
is_a(flip-5-sense,flip.v.08)
has_sense(food-6,food-6-sense)
is_a(food-6-sense,food.n.02)
has_sense(skillet-9,skillet-9-sense)
is_a(skillet-9-sense,frying_pan.n.01)
has_sense(be-11,be-11-sense)
is_a(be-11-sense,be.v.01)
has_sense(too-12,too-12-sense)
is_a(too-12-sense,excessively.r.01)
has_sense(heavy-13,heavy-13-sense)
is_a(heavy-13-sense,heavy.a.01)
aux(try-3, do-1)
neg(try-3, not-2)
root(ROOT-0, try-3)
aux(flip-5, to-4)
xcomp(try-3, flip-5)
dobj(flip-5, food-6)
det(skillet-9, a-8)
prep_with(flip-5, skillet-9)
nsubj(heavy-13, that-10)
cop(heavy-13, be-11)
advmod(heavy-13, too-12)
rcmod(skillet-9, heavy-13)
has_pos(do-1,VB)
has_pos(not-2,RB)
has_pos(try-3,VB)
has_pos(to-4,TO)
has_pos(flip-5,VB)
has_pos(food-6,NN)
has_pos(a-8,DT)
has_pos(skillet-9,NN)
has_pos(that-10,WDT)
has_pos(be-11,VB)
has_pos(too-12,RB)
has_pos(heavy-13,JJ)
has_sense(that-10, null)
has_sense(a-8, null)
has_sense(to-4, null)
---
// take the omelet and flip the side of the omelet .
has_sense(take-1,take-1-sense)
is_a(take-1-sense,take.v.04)
has_sense(omelet-3,omelet-3-sense)
is_a(omelet-3-sense,omelet.n.01)
has_sense(flip-5,flip-5-sense)
is_a(flip-5-sense,flip.v.08)
has_sense(side-7,side-7-sense)
is_a(side-7-sense,side.n.01)
has_sense(omelet-10,omelet-10-sense)
is_a(omelet-10-sense,omelet.n.01)
root(ROOT-0, take-1)
det(omelet-3, the-2)
dobj(take-1, omelet-3)
conj_and(take-1, flip-5)
det(side-7, the-6)
dobj(flip-5, side-7)
det(omelet-10, the-9)
prep_of(side-7, omelet-10)
has_pos(take-1,VB)
has_pos(the-2,DT)
has_pos(omelet-3,NN)
has_pos(flip-5,VB)
has_pos(the-6,DT)
has_pos(side-7,NN)
has_pos(the-9,DT)
has_pos(omelet-10,NN)
has_sense(the-6, null)
has_sense(the-2, null)
has_sense(the-9, null)
---
// dispose of the left over butter grounds out of the pan , so the next flip will be fresh .
has_sense(dispose-1,dispose-1-sense)
is_a(dispose-1-sense,discard.v.01)
has_sense(butter-6,butter-6-sense)
is_a(butter-6-sense,butter.n.01)
has_sense(grounds-7,grounds-7-sense)
is_a(grounds-7-sense,grounds.n.05)
has_sense(out-8,out-8-sense)
is_a(out-8-sense,out.r.02)
has_sense(pan-11,pan-11-sense)
is_a(pan-11-sense,pan.n.01)
has_sense(next-15,next-15-sense)
is_a(next-15-sense,following.s.02)
has_sense(flip-16,flip-16-sense)
is_a(flip-16-sense,flip.n.03)
has_sense(be-18,be-18-sense)
is_a(be-18-sense,be.v.01)
root(ROOT-0, dispose-1)
det(left-4, the-3)
prep_of(dispose-1, left-4)
nn(grounds-7, butter-6)
prep_over(left-4, grounds-7)
det(pan-11, the-10)
prep_out_of(grounds-7, pan-11)
dep(dispose-1, so-13)
det(flip-16, the-14)
amod(flip-16, next-15)
nsubj(fresh-19, flip-16)
aux(fresh-19, will-17)
cop(fresh-19, be-18)
ccomp(dispose-1, fresh-19)
has_pos(dispose-1,VB)
has_pos(the-3,DT)
has_pos(left-4,NN)
has_pos(butter-6,NN)
has_pos(grounds-7,NNS)
has_pos(the-10,DT)
has_pos(pan-11,NN)
has_pos(so-13,IN)
has_pos(the-14,DT)
has_pos(next-15,JJ)
has_pos(flip-16,NN)
has_pos(will-17,MD)
has_pos(be-18,VB)
has_pos(fresh-19,JJ)
has_sense(so-13, null)
has_sense(the-3, null)
has_sense(left-4, null)
has_sense(fresh-19, null)
has_sense(will-17, null)
has_sense(the-14, null)
has_sense(the-10, null)
---
// flip the omelet to cook the other side .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(omelet-3,omelet-3-sense)
is_a(omelet-3-sense,omelet.n.01)
has_sense(cook-5,cook-5-sense)
is_a(cook-5-sense,cook.v.03)
has_sense(other-7,other-7-sense)
is_a(other-7-sense,other.a.01)
has_sense(side-8,side-8-sense)
is_a(side-8-sense,side.n.05)
root(ROOT-0, flip-1)
det(omelet-3, the-2)
dobj(flip-1, omelet-3)
aux(cook-5, to-4)
infmod(omelet-3, cook-5)
det(side-8, the-6)
amod(side-8, other-7)
dobj(cook-5, side-8)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(omelet-3,NN)
has_pos(to-4,TO)
has_pos(cook-5,VB)
has_pos(the-6,DT)
has_pos(other-7,JJ)
has_pos(side-8,NN)
has_sense(the-6, null)
has_sense(to-4, null)
has_sense(the-2, null)
---
// While hold the end of the burrito roll or flip the burrito over .
has_sense(hold-2,hold-2-sense)
is_a(hold-2-sense,keep.v.01)
has_sense(end-4,end-4-sense)
is_a(end-4-sense,end.n.01)
has_sense(burrito-7,burrito-7-sense)
is_a(burrito-7-sense,burrito.n.01)
has_sense(roll-8,roll-8-sense)
is_a(roll-8-sense,roll.v.01)
has_sense(flip-10,flip-10-sense)
is_a(flip-10-sense,flip.v.08)
has_sense(burrito-12,burrito-12-sense)
is_a(burrito-12-sense,burrito.n.01)
mark(hold-2, While-1)
csubj(roll-8, hold-2)
det(end-4, the-3)
dobj(hold-2, end-4)
det(burrito-7, the-6)
prep_of(end-4, burrito-7)
root(ROOT-0, roll-8)
conj_or(roll-8, flip-10)
det(burrito-12, the-11)
dobj(flip-10, burrito-12)
prt(flip-10, over-13)
has_pos(While-1,IN)
has_pos(hold-2,VBP)
has_pos(the-3,DT)
has_pos(end-4,NN)
has_pos(the-6,DT)
has_pos(burrito-7,NN)
has_pos(roll-8,VB)
has_pos(flip-10,VB)
has_pos(the-11,DT)
has_pos(burrito-12,NN)
has_pos(over-13,RP)
has_sense(the-6, null)
has_sense(the-3, null)
has_sense(While-1, null)
has_sense(over-13, null)
has_sense(the-11, null)
---
// flip the vegetable carefully when the bottom side be to your desire doneness .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(vegetable-3,vegetable-3-sense)
is_a(vegetable-3-sense,vegetable.n.01)
has_sense(carefully-4,carefully-4-sense)
is_a(carefully-4-sense,carefully.r.01)
has_sense(bottom-7,bottom-7-sense)
is_a(bottom-7-sense,bottom.a.01)
has_sense(side-8,side-8-sense)
is_a(side-8-sense,side.n.04)
has_sense(be-9,be-9-sense)
is_a(be-9-sense,be.v.01)
has_sense(desire-12,desire-12-sense)
is_a(desire-12-sense,desire.v.01)
root(ROOT-0, flip-1)
det(vegetable-3, the-2)
dobj(flip-1, vegetable-3)
advmod(flip-1, carefully-4)
advmod(be-9, when-5)
det(side-8, the-6)
amod(side-8, bottom-7)
nsubj(be-9, side-8)
advcl(flip-1, be-9)
poss(doneness-13, your-11)
nn(doneness-13, desire-12)
prep_to(be-9, doneness-13)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(vegetable-3,NN)
has_pos(carefully-4,RB)
has_pos(when-5,WRB)
has_pos(the-6,DT)
has_pos(bottom-7,JJ)
has_pos(side-8,NN)
has_pos(be-9,VBP)
has_pos(your-11,PRP$)
has_pos(desire-12,NN)
has_pos(doneness-13,NNS)
has_sense(the-6, null)
has_sense(the-2, null)
has_sense(when-5, null)
has_sense(doneness-13, null)
has_sense(your-11, null)
---
// If it be go brown flip the omelette to cook the other side .
has_sense(be-3,be-3-sense)
is_a(be-3-sense,be.v.01)
has_sense(go-4,go-4-sense)
is_a(go-4-sense,become.v.01)
has_sense(brown-5,brown-5-sense)
is_a(brown-5-sense,brown.s.01)
has_sense(flip-6,flip-6-sense)
is_a(flip-6-sense,flip.v.08)
has_sense(omelette-8,omelette-8-sense)
is_a(omelette-8-sense,omelet.n.01)
has_sense(cook-10,cook-10-sense)
is_a(cook-10-sense,cook.v.02)
has_sense(other-12,other-12-sense)
is_a(other-12-sense,other.a.01)
mark(be-3, If-1)
nsubj(be-3, it-2)
csubj(flip-6, be-3)
ccomp(be-3, go-4)
dobj(go-4, brown-5)
root(ROOT-0, flip-6)
det(omelette-8, the-7)
dobj(flip-6, omelette-8)
aux(cook-10, to-9)
infmod(omelette-8, cook-10)
det(side-13, the-11)
amod(side-13, other-12)
dobj(cook-10, side-13)
has_pos(If-1,IN)
has_pos(it-2,PRP)
has_pos(be-3,VB)
has_pos(go-4,VB)
has_pos(brown-5,JJ)
has_pos(flip-6,VB)
has_pos(the-7,DT)
has_pos(omelette-8,NN)
has_pos(to-9,TO)
has_pos(cook-10,VB)
has_pos(the-11,DT)
has_pos(other-12,JJ)
has_pos(side-13,NN)
has_sense(the-7, null)
has_sense(to-9, null)
has_sense(it-2, null)
has_sense(If-1, null)
has_sense(side-13, null)
has_sense(the-11, null)
---
// do not flip the pancake again !
has_sense(do-1,do-1-sense)
is_a(do-1-sense,perform.v.01)
has_sense(not-2,not-2-sense)
is_a(not-2-sense,not.r.01)
has_sense(flip-3,flip-3-sense)
is_a(flip-3-sense,flip.v.08)
has_sense(pancake-5,pancake-5-sense)
is_a(pancake-5-sense,pancake.n.01)
has_sense(again-6,again-6-sense)
is_a(again-6-sense,again.r.01)
aux(flip-3, do-1)
neg(flip-3, not-2)
root(ROOT-0, flip-3)
det(pancake-5, the-4)
dobj(flip-3, pancake-5)
advmod(flip-3, again-6)
has_pos(do-1,VB)
has_pos(not-2,RB)
has_pos(flip-3,VB)
has_pos(the-4,DT)
has_pos(pancake-5,NN)
has_pos(again-6,RB)
has_sense(the-4, null)
---
// After thirty second , flip the egg again .
has_sense(second-3,second-3-sense)
is_a(second-3-sense,second.n.01)
has_sense(flip-5,flip-5-sense)
is_a(flip-5-sense,flip.v.08)
has_sense(egg-7,egg-7-sense)
is_a(egg-7-sense,egg.n.02)
has_sense(again-8,again-8-sense)
is_a(again-8-sense,again.r.01)
num(second-3, thirty-2)
prep_after(flip-5, second-3)
root(ROOT-0, flip-5)
det(egg-7, the-6)
dobj(flip-5, egg-7)
advmod(flip-5, again-8)
has_pos(thirty-2,CD)
has_pos(second-3,NN)
has_pos(flip-5,VB)
has_pos(the-6,DT)
has_pos(egg-7,NN)
has_pos(again-8,RB)
has_sense(the-6, null)
has_sense(thirty-2, null)
---
// Flip steak use tongs or spatula , do not use a fork as you will lose juice .
has_sense(steak-2,steak-2-sense)
is_a(steak-2-sense,steak.n.01)
has_sense(use-3,use-3-sense)
is_a(use-3-sense,use.v.01)
has_sense(tongs-4,tongs-4-sense)
is_a(tongs-4-sense,tongs.n.01)
has_sense(spatula-6,spatula-6-sense)
is_a(spatula-6-sense,spatula.n.02)
has_sense(do-8,do-8-sense)
is_a(do-8-sense,perform.v.01)
has_sense(not-9,not-9-sense)
is_a(not-9-sense,not.r.01)
has_sense(use-10,use-10-sense)
is_a(use-10-sense,use.v.01)
has_sense(fork-12,fork-12-sense)
is_a(fork-12-sense,fork.n.01)
has_sense(lose-16,lose-16-sense)
is_a(lose-16-sense,lose.v.01)
has_sense(juice-17,juice-17-sense)
is_a(juice-17-sense,juice.n.01)
amod(tongs-4, Flip-1)
nn(tongs-4, steak-2)
nn(tongs-4, use-3)
nsubj(use-10, tongs-4)
conj_or(tongs-4, spatula-6)
aux(use-10, do-8)
neg(use-10, not-9)
root(ROOT-0, use-10)
det(fork-12, a-11)
dobj(use-10, fork-12)
mark(lose-16, as-13)
nsubj(lose-16, you-14)
aux(lose-16, will-15)
advcl(use-10, lose-16)
dobj(lose-16, juice-17)
has_pos(Flip-1,JJ)
has_pos(steak-2,NN)
has_pos(use-3,NN)
has_pos(tongs-4,NNS)
has_pos(spatula-6,NN)
has_pos(do-8,VBP)
has_pos(not-9,RB)
has_pos(use-10,VB)
has_pos(a-11,DT)
has_pos(fork-12,NN)
has_pos(as-13,IN)
has_pos(you-14,PRP)
has_pos(will-15,MD)
has_pos(lose-16,VB)
has_pos(juice-17,NN)
has_sense(as-13, null)
has_sense(will-15, null)
has_sense(Flip-1, null)
has_sense(a-11, null)
has_sense(you-14, null)
---
// flip and cook the other side until the sandwich be hot and golden .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(other-5,other-5-sense)
is_a(other-5-sense,other.a.01)
has_sense(side-6,side-6-sense)
is_a(side-6-sense,side.n.04)
has_sense(sandwich-9,sandwich-9-sense)
is_a(sandwich-9-sense,sandwich.n.01)
has_sense(be-10,be-10-sense)
is_a(be-10-sense,be.v.01)
has_sense(hot-11,hot-11-sense)
is_a(hot-11-sense,hot.a.01)
has_sense(golden-13,golden-13-sense)
is_a(golden-13-sense,aureate.s.02)
root(ROOT-0, flip-1)
conj_and(flip-1, cook-3)
det(side-6, the-4)
amod(side-6, other-5)
dobj(cook-3, side-6)
mark(hot-11, until-7)
det(sandwich-9, the-8)
nsubj(hot-11, sandwich-9)
cop(hot-11, be-10)
advcl(cook-3, hot-11)
conj_and(hot-11, golden-13)
has_pos(flip-1,VB)
has_pos(cook-3,VB)
has_pos(the-4,DT)
has_pos(other-5,JJ)
has_pos(side-6,NN)
has_pos(until-7,IN)
has_pos(the-8,DT)
has_pos(sandwich-9,NN)
has_pos(be-10,VB)
has_pos(hot-11,JJ)
has_pos(golden-13,JJ)
has_sense(the-8, null)
has_sense(the-4, null)
has_sense(cook-3, null)
has_sense(until-7, null)
---
// flip the bowl upside-down onto the plate .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(bowl-3,bowl-3-sense)
is_a(bowl-3-sense,bowl.n.01)
has_sense(upside-down-4,upside-down-4-sense)
is_a(upside-down-4-sense,inverted.s.01)
has_sense(plate-7,plate-7-sense)
is_a(plate-7-sense,plate.n.04)
root(ROOT-0, flip-1)
det(upside-down-4, the-2)
nn(upside-down-4, bowl-3)
dobj(flip-1, upside-down-4)
det(plate-7, the-6)
prep_onto(flip-1, plate-7)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(bowl-3,NN)
has_pos(upside-down-4,NN)
has_pos(the-6,DT)
has_pos(plate-7,NN)
has_sense(the-6, null)
has_sense(the-2, null)
---
// flip the cut over and cook the other side to desired doneness .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(cut-3,cut-3-sense)
is_a(cut-3-sense,cut.n.06)
has_sense(cook-6,cook-6-sense)
is_a(cook-6-sense,cook.v.02)
has_sense(other-8,other-8-sense)
is_a(other-8-sense,other.a.01)
root(ROOT-0, flip-1)
det(cut-3, the-2)
dobj(flip-1, cut-3)
prt(flip-1, over-4)
conj_and(flip-1, cook-6)
det(side-9, the-7)
amod(side-9, other-8)
dobj(cook-6, side-9)
amod(doneness-12, desired-11)
prep_to(cook-6, doneness-12)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(cut-3,NN)
has_pos(over-4,RP)
has_pos(cook-6,VB)
has_pos(the-7,DT)
has_pos(other-8,JJ)
has_pos(side-9,NN)
has_pos(desired-11,VBN)
has_pos(doneness-12,NNS)
has_sense(the-7, null)
has_sense(the-2, null)
has_sense(over-4, null)
has_sense(side-9, null)
has_sense(desired-11, null)
has_sense(doneness-12, null)
---
// flip the crepe and cook for a few second more .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(crepe-3,crepe-3-sense)
is_a(crepe-3-sense,crape.n.01)
has_sense(cook-5,cook-5-sense)
is_a(cook-5-sense,cook.v.02)
has_sense(few-8,few-8-sense)
is_a(few-8-sense,few.a.01)
has_sense(second-9,second-9-sense)
is_a(second-9-sense,moment.n.02)
has_sense(more-10,more-10-sense)
is_a(more-10-sense,more.r.02)
root(ROOT-0, flip-1)
det(crepe-3, the-2)
dobj(flip-1, crepe-3)
conj_and(crepe-3, cook-5)
det(more-10, a-7)
amod(more-10, few-8)
dep(more-10, second-9)
prep_for(crepe-3, more-10)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(crepe-3,NN)
has_pos(cook-5,NN)
has_pos(a-7,DT)
has_pos(few-8,JJ)
has_pos(second-9,NN)
has_pos(more-10,JJR)
has_sense(the-2, null)
has_sense(a-7, null)
---
// quickly flip bacon over and continue to bake for 8-10 minutes for desired taste .
has_sense(quickly-1,quickly-1-sense)
is_a(quickly-1-sense,quickly.r.01)
has_sense(flip-2,flip-2-sense)
is_a(flip-2-sense,flip.v.08)
has_sense(bacon-3,bacon-3-sense)
is_a(bacon-3-sense,bacon.n.01)
has_sense(continue-6,continue-6-sense)
is_a(continue-6-sense,continue.v.01)
has_sense(bake-8,bake-8-sense)
is_a(bake-8-sense,bake.v.01)
has_sense(taste-14,taste-14-sense)
is_a(taste-14-sense,taste.n.01)
advmod(flip-2, quickly-1)
root(ROOT-0, flip-2)
dobj(flip-2, bacon-3)
prt(flip-2, over-4)
conj_and(flip-2, continue-6)
aux(bake-8, to-7)
xcomp(continue-6, bake-8)
num(minutes-11, 8-10-10)
prep_for(bake-8, minutes-11)
amod(taste-14, desired-13)
prep_for(minutes-11, taste-14)
has_pos(quickly-1,RB)
has_pos(flip-2,VB)
has_pos(bacon-3,NN)
has_pos(over-4,RP)
has_pos(continue-6,VB)
has_pos(to-7,TO)
has_pos(bake-8,VB)
has_pos(8-10-10,CD)
has_pos(minutes-11,NNS)
has_pos(desired-13,VBN)
has_pos(taste-14,NN)
has_sense(over-4, null)
has_sense(desired-13, null)
has_sense(to-7, null)
has_sense(minutes-11, null)
has_sense(8-10-10, null)
---
// flip when the underside be a soft golden color .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(underside-4,underside-4-sense)
is_a(underside-4-sense,bottom.n.01)
has_sense(be-5,be-5-sense)
is_a(be-5-sense,be.v.01)
has_sense(soft-7,soft-7-sense)
is_a(soft-7-sense,soft.s.19)
has_sense(golden-8,golden-8-sense)
is_a(golden-8-sense,aureate.s.02)
has_sense(color-9,color-9-sense)
is_a(color-9-sense,color.n.01)
root(ROOT-0, flip-1)
advmod(color-9, when-2)
det(underside-4, the-3)
nsubj(color-9, underside-4)
cop(color-9, be-5)
det(color-9, a-6)
amod(color-9, soft-7)
amod(color-9, golden-8)
advcl(flip-1, color-9)
has_pos(flip-1,VB)
has_pos(when-2,WRB)
has_pos(the-3,DT)
has_pos(underside-4,NN)
has_pos(be-5,VB)
has_pos(a-6,DT)
has_pos(soft-7,JJ)
has_pos(golden-8,JJ)
has_pos(color-9,NN)
has_sense(when-2, null)
has_sense(the-3, null)
has_sense(a-6, null)
---
// flip the wings .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
root(ROOT-0, flip-1)
det(wings-3, the-2)
dobj(flip-1, wings-3)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(wings-3,NNS)
has_sense(wings-3, null)
has_sense(the-2, null)
---
// Flip the potato_chip over after a few minutes .
has_sense(potato_chip-3,potato_chip-3-sense)
is_a(potato_chip-3-sense,chip.n.04)
has_sense(few-7,few-7-sense)
is_a(few-7-sense,few.a.01)
root(ROOT-0, Flip-1)
det(potato_chip-3, the-2)
dobj(Flip-1, potato_chip-3)
prep(Flip-1, over-4)
pcomp(over-4, after-5)
det(minutes-8, a-6)
amod(minutes-8, few-7)
pobj(after-5, minutes-8)
has_pos(Flip-1,VB)
has_pos(the-2,DT)
has_pos(potato_chip-3,NN)
has_pos(over-4,IN)
has_pos(after-5,IN)
has_pos(a-6,DT)
has_pos(few-7,JJ)
has_pos(minutes-8,NNS)
has_sense(minutes-8, null)
has_sense(after-5, null)
has_sense(over-4, null)
has_sense(Flip-1, null)
has_sense(the-2, null)
has_sense(a-6, null)
---
// flip the food , only when it be approximately halfway done .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(food-3,food-3-sense)
is_a(food-3-sense,food.n.02)
has_sense(only-5,only-5-sense)
is_a(only-5-sense,merely.r.01)
has_sense(be-8,be-8-sense)
is_a(be-8-sense,be.v.01)
has_sense(approximately-9,approximately-9-sense)
is_a(approximately-9-sense,approximately.r.01)
root(ROOT-0, flip-1)
det(food-3, the-2)
dobj(flip-1, food-3)
advmod(when-6, only-5)
advmod(done-11, when-6)
nsubjpass(done-11, it-7)
auxpass(done-11, be-8)
advmod(halfway-10, approximately-9)
advmod(done-11, halfway-10)
dep(food-3, done-11)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(food-3,NN)
has_pos(only-5,RB)
has_pos(when-6,WRB)
has_pos(it-7,PRP)
has_pos(be-8,VB)
has_pos(approximately-9,RB)
has_pos(halfway-10,RB)
has_pos(done-11,VBN)
has_sense(halfway-10, null)
has_sense(done-11, null)
has_sense(the-2, null)
has_sense(when-6, null)
has_sense(it-7, null)
---
// wait until the pancake be golden brown then flip the pancake .
has_sense(wait-1,wait-1-sense)
is_a(wait-1-sense,wait.v.02)
has_sense(pancake-4,pancake-4-sense)
is_a(pancake-4-sense,pancake.n.01)
has_sense(be-5,be-5-sense)
is_a(be-5-sense,be.v.01)
has_sense(golden-6,golden-6-sense)
is_a(golden-6-sense,aureate.s.02)
has_sense(then-8,then-8-sense)
is_a(then-8-sense,then.r.01)
has_sense(flip-9,flip-9-sense)
is_a(flip-9-sense,flip.v.04)
has_sense(pancake-11,pancake-11-sense)
is_a(pancake-11-sense,pancake.n.01)
csubj(brown-7, wait-1)
mark(golden-6, until-2)
det(pancake-4, the-3)
nsubj(golden-6, pancake-4)
cop(golden-6, be-5)
advcl(wait-1, golden-6)
root(ROOT-0, brown-7)
advmod(brown-7, then-8)
dep(brown-7, flip-9)
det(pancake-11, the-10)
dobj(flip-9, pancake-11)
has_pos(wait-1,VB)
has_pos(until-2,IN)
has_pos(the-3,DT)
has_pos(pancake-4,NN)
has_pos(be-5,VB)
has_pos(golden-6,JJ)
has_pos(brown-7,VBZ)
has_pos(then-8,RB)
has_pos(flip-9,VB)
has_pos(the-10,DT)
has_pos(pancake-11,NN)
has_sense(until-2, null)
has_sense(brown-7, null)
has_sense(the-3, null)
has_sense(the-10, null)
---
// flip the crepe over .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(crepe-3,crepe-3-sense)
is_a(crepe-3-sense,crape.n.01)
root(ROOT-0, flip-1)
det(crepe-3, the-2)
dobj(flip-1, crepe-3)
advmod(flip-1, over-4)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(crepe-3,NN)
has_pos(over-4,RB)
has_sense(the-2, null)
has_sense(over-4, null)
---
// Flip the chop and coat the other side .
has_sense(chop-3,chop-3-sense)
is_a(chop-3-sense,chop.n.02)
has_sense(other-7,other-7-sense)
is_a(other-7-sense,other.a.01)
has_sense(side-8,side-8-sense)
is_a(side-8-sense,side.n.04)
root(ROOT-0, Flip-1)
det(chop-3, the-2)
dep(Flip-1, chop-3)
conj_and(chop-3, coat-5)
det(side-8, the-6)
amod(side-8, other-7)
dep(chop-3, side-8)
has_pos(Flip-1,NN)
has_pos(the-2,DT)
has_pos(chop-3,NN)
has_pos(coat-5,NN)
has_pos(the-6,DT)
has_pos(other-7,JJ)
has_pos(side-8,NN)
has_sense(the-6, null)
has_sense(the-2, null)
has_sense(coat-5, null)
has_sense(Flip-1, null)
---
// flip the pancake around .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(pancake-3,pancake-3-sense)
is_a(pancake-3-sense,pancake.n.01)
has_sense(around-4,around-4-sense)
is_a(around-4-sense,about.r.05)
root(ROOT-0, flip-1)
det(pancake-3, the-2)
dobj(flip-1, pancake-3)
advmod(flip-1, around-4)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(pancake-3,NN)
has_pos(around-4,RB)
has_sense(the-2, null)
---
// Return pan to the stove and flip the omelet .
has_sense(stove-5,stove-5-sense)
is_a(stove-5-sense,stove.n.01)
has_sense(flip-7,flip-7-sense)
is_a(flip-7-sense,flip.v.08)
has_sense(omelet-9,omelet-9-sense)
is_a(omelet-9-sense,omelet.n.01)
nsubj(pan-2, Return-1)
root(ROOT-0, pan-2)
det(stove-5, the-4)
prep_to(pan-2, stove-5)
conj_and(pan-2, flip-7)
det(omelet-9, the-8)
dobj(flip-7, omelet-9)
has_pos(Return-1,NN)
has_pos(pan-2,VB)
has_pos(the-4,DT)
has_pos(stove-5,NN)
has_pos(flip-7,VB)
has_pos(the-8,DT)
has_pos(omelet-9,NN)
has_sense(the-4, null)
has_sense(the-8, null)
has_sense(Return-1, null)
has_sense(pan-2, null)
---
// cook about 4-5 minutes , flip and repeat .
has_sense(cook-1,cook-1-sense)
is_a(cook-1-sense,cook.v.03)
has_sense(flip-6,flip-6-sense)
is_a(flip-6-sense,flip.v.08)
has_sense(repeat-8,repeat-8-sense)
is_a(repeat-8-sense,duplicate.v.01)
root(ROOT-0, cook-1)
num(minutes-4, 4-5-3)
prep_about(cook-1, minutes-4)
conj_and(cook-1, flip-6)
conj_and(cook-1, repeat-8)
has_pos(cook-1,VB)
has_pos(4-5-3,CD)
has_pos(minutes-4,NNS)
has_pos(flip-6,VB)
has_pos(repeat-8,VB)
has_sense(minutes-4, null)
has_sense(4-5-3, null)
---
// cook and flip the chicken every five minutes until done .
has_sense(cook-1,cook-1-sense)
is_a(cook-1-sense,cook.v.03)
has_sense(flip-3,flip-3-sense)
is_a(flip-3-sense,flip.v.08)
has_sense(chicken-5,chicken-5-sense)
is_a(chicken-5-sense,chicken.n.01)
root(ROOT-0, cook-1)
conj_and(cook-1, flip-3)
det(chicken-5, the-4)
dobj(flip-3, chicken-5)
det(minutes-8, every-6)
num(minutes-8, five-7)
tmod(flip-3, minutes-8)
mark(done-10, until-9)
advcl(flip-3, done-10)
has_pos(cook-1,VB)
has_pos(flip-3,VB)
has_pos(the-4,DT)
has_pos(chicken-5,NN)
has_pos(every-6,DT)
has_pos(five-7,CD)
has_pos(minutes-8,NNS)
has_pos(until-9,IN)
has_pos(done-10,VBN)
has_sense(the-4, null)
has_sense(minutes-8, null)
has_sense(five-7, null)
has_sense(every-6, null)
has_sense(until-9, null)
has_sense(done-10, null)
---
// flip it a few times until the pancake be fully cook .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(few-4,few-4-sense)
is_a(few-4-sense,few.a.01)
has_sense(pancake-8,pancake-8-sense)
is_a(pancake-8-sense,pancake.n.01)
has_sense(be-9,be-9-sense)
is_a(be-9-sense,be.v.01)
has_sense(fully-10,fully-10-sense)
is_a(fully-10-sense,fully.r.01)
has_sense(cook-11,cook-11-sense)
is_a(cook-11-sense,cook.v.02)
root(ROOT-0, flip-1)
dobj(flip-1, it-2)
det(times-5, a-3)
amod(times-5, few-4)
dep(cook-11, times-5)
dep(cook-11, until-6)
det(pancake-8, the-7)
nsubj(cook-11, pancake-8)
cop(cook-11, be-9)
advmod(cook-11, fully-10)
dep(flip-1, cook-11)
has_pos(flip-1,VB)
has_pos(it-2,PRP)
has_pos(a-3,DT)
has_pos(few-4,JJ)
has_pos(times-5,NNS)
has_pos(until-6,IN)
has_pos(the-7,DT)
has_pos(pancake-8,NN)
has_pos(be-9,VB)
has_pos(fully-10,RB)
has_pos(cook-11,JJ)
has_sense(the-7, null)
has_sense(times-5, null)
has_sense(it-2, null)
has_sense(a-3, null)
has_sense(until-6, null)
---
// Flip steak use tongs or spatula .
has_sense(steak-2,steak-2-sense)
is_a(steak-2-sense,steak.n.01)
has_sense(use-3,use-3-sense)
is_a(use-3-sense,use.v.01)
has_sense(tongs-4,tongs-4-sense)
is_a(tongs-4-sense,tongs.n.01)
has_sense(spatula-6,spatula-6-sense)
is_a(spatula-6-sense,spatula.n.02)
amod(steak-2, Flip-1)
nsubj(use-3, steak-2)
root(ROOT-0, use-3)
dobj(use-3, tongs-4)
conj_or(tongs-4, spatula-6)
has_pos(Flip-1,JJ)
has_pos(steak-2,NN)
has_pos(use-3,VBP)
has_pos(tongs-4,NNS)
has_pos(spatula-6,NN)
has_sense(Flip-1, null)
---
// Flip pancake once during cook to keep them tender .
has_sense(pancake-2,pancake-2-sense)
is_a(pancake-2-sense,pancake.n.01)
has_sense(once-3,once-3-sense)
is_a(once-3-sense,once.r.01)
has_sense(cook-5,cook-5-sense)
is_a(cook-5-sense,cook.v.02)
has_sense(keep-7,keep-7-sense)
is_a(keep-7-sense,keep.v.01)
nsubj(pancake-2, Flip-1)
root(ROOT-0, pancake-2)
advmod(pancake-2, once-3)
prep_during(once-3, cook-5)
aux(keep-7, to-6)
xcomp(pancake-2, keep-7)
nsubj(tender-9, them-8)
ccomp(keep-7, tender-9)
has_pos(Flip-1,NNP)
has_pos(pancake-2,VBP)
has_pos(once-3,RB)
has_pos(cook-5,NN)
has_pos(to-6,TO)
has_pos(keep-7,VB)
has_pos(them-8,PRP)
has_pos(tender-9,VB)
has_sense(them-8, null)
has_sense(to-6, null)
has_sense(tender-9, null)
has_sense(Flip-1, null)
---
// use tongs to flip the dough onto the other side .
has_sense(use-1,use-1-sense)
is_a(use-1-sense,use.v.01)
has_sense(tongs-2,tongs-2-sense)
is_a(tongs-2-sense,tongs.n.01)
has_sense(flip-4,flip-4-sense)
is_a(flip-4-sense,flip.v.08)
has_sense(dough-6,dough-6-sense)
is_a(dough-6-sense,dough.n.01)
has_sense(other-9,other-9-sense)
is_a(other-9-sense,other.a.01)
has_sense(side-10,side-10-sense)
is_a(side-10-sense,side.n.04)
nsubj(tongs-2, use-1)
root(ROOT-0, tongs-2)
aux(flip-4, to-3)
xcomp(tongs-2, flip-4)
det(dough-6, the-5)
dobj(flip-4, dough-6)
det(side-10, the-8)
amod(side-10, other-9)
prep_onto(flip-4, side-10)
has_pos(use-1,NN)
has_pos(tongs-2,VBZ)
has_pos(to-3,TO)
has_pos(flip-4,VB)
has_pos(the-5,DT)
has_pos(dough-6,NN)
has_pos(the-8,DT)
has_pos(other-9,JJ)
has_pos(side-10,NN)
has_sense(the-5, null)
has_sense(to-3, null)
has_sense(the-8, null)
---
// flip the cake upside down onto a cooling rack .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(cake-3,cake-3-sense)
is_a(cake-3-sense,cake.n.03)
has_sense(upside-4,upside-4-sense)
is_a(upside-4-sense,top.n.02)
has_sense(rack-9,rack-9-sense)
is_a(rack-9-sense,rack.n.01)
root(ROOT-0, flip-1)
det(cake-3, the-2)
dobj(flip-1, cake-3)
advmod(down-5, upside-4)
advmod(flip-1, down-5)
det(rack-9, a-7)
amod(rack-9, cooling-8)
prep_onto(down-5, rack-9)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(cake-3,NN)
has_pos(upside-4,RB)
has_pos(down-5,RB)
has_pos(a-7,DT)
has_pos(cooling-8,VBG)
has_pos(rack-9,NN)
has_sense(down-5, null)
has_sense(the-2, null)
has_sense(cooling-8, null)
has_sense(a-7, null)
---
// remove the cookie with a spatula , and flip it over in your hand .
has_sense(remove-1,remove-1-sense)
is_a(remove-1-sense,remove.v.01)
has_sense(cookie-3,cookie-3-sense)
is_a(cookie-3-sense,cookie.n.01)
has_sense(spatula-6,spatula-6-sense)
is_a(spatula-6-sense,spatula.n.02)
has_sense(flip-9,flip-9-sense)
is_a(flip-9-sense,flip.v.08)
has_sense(hand-14,hand-14-sense)
is_a(hand-14-sense,hand.n.01)
root(ROOT-0, remove-1)
det(cookie-3, the-2)
dobj(remove-1, cookie-3)
det(spatula-6, a-5)
prep_with(remove-1, spatula-6)
conj_and(remove-1, flip-9)
dobj(flip-9, it-10)
prt(flip-9, over-11)
poss(hand-14, your-13)
prep_in(flip-9, hand-14)
has_pos(remove-1,VB)
has_pos(the-2,DT)
has_pos(cookie-3,NN)
has_pos(a-5,DT)
has_pos(spatula-6,NN)
has_pos(flip-9,VB)
has_pos(it-10,PRP)
has_pos(over-11,RP)
has_pos(your-13,PRP$)
has_pos(hand-14,NN)
has_sense(the-2, null)
has_sense(it-10, null)
has_sense(your-13, null)
has_sense(over-11, null)
has_sense(a-5, null)
---
// let the bread cook until brown , then flip the bread over .
has_sense(let-1,let-1-sense)
is_a(let-1-sense,let.v.01)
has_sense(bread-3,bread-3-sense)
is_a(bread-3-sense,bread.n.01)
has_sense(brown-6,brown-6-sense)
is_a(brown-6-sense,brown.s.01)
has_sense(then-8,then-8-sense)
is_a(then-8-sense,then.r.01)
has_sense(flip-9,flip-9-sense)
is_a(flip-9-sense,flip.v.08)
has_sense(bread-11,bread-11-sense)
is_a(bread-11-sense,bread.n.01)
root(ROOT-0, let-1)
det(cook-4, the-2)
nn(cook-4, bread-3)
dobj(let-1, cook-4)
prep_until(let-1, brown-6)
advmod(let-1, then-8)
dep(let-1, flip-9)
det(bread-11, the-10)
dobj(flip-9, bread-11)
prt(flip-9, over-12)
has_pos(let-1,VB)
has_pos(the-2,DT)
has_pos(bread-3,NN)
has_pos(cook-4,NN)
has_pos(brown-6,JJ)
has_pos(then-8,RB)
has_pos(flip-9,VB)
has_pos(the-10,DT)
has_pos(bread-11,NN)
has_pos(over-12,RP)
has_sense(the-2, null)
has_sense(over-12, null)
has_sense(cook-4, null)
has_sense(the-10, null)
---
// flip the omelet and cook it on the other side .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(omelet-3,omelet-3-sense)
is_a(omelet-3-sense,omelet.n.01)
has_sense(cook-5,cook-5-sense)
is_a(cook-5-sense,cook.v.02)
has_sense(other-9,other-9-sense)
is_a(other-9-sense,other.a.01)
has_sense(side-10,side-10-sense)
is_a(side-10-sense,side.n.04)
root(ROOT-0, flip-1)
det(omelet-3, the-2)
dobj(flip-1, omelet-3)
conj_and(flip-1, cook-5)
dobj(cook-5, it-6)
det(side-10, the-8)
amod(side-10, other-9)
prep_on(cook-5, side-10)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(omelet-3,NN)
has_pos(cook-5,VB)
has_pos(it-6,PRP)
has_pos(the-8,DT)
has_pos(other-9,JJ)
has_pos(side-10,NN)
has_sense(the-2, null)
has_sense(the-8, null)
has_sense(it-6, null)
---
// flip the burger .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(burger-3,burger-3-sense)
is_a(burger-3-sense,hamburger.n.01)
root(ROOT-0, flip-1)
det(burger-3, the-2)
dobj(flip-1, burger-3)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(burger-3,NN)
has_sense(the-2, null)
---
// grill each side for about one minute and make sure you flip them carefully .
has_sense(grill-1,grill-1-sense)
is_a(grill-1-sense,grill.v.01)
has_sense(side-3,side-3-sense)
is_a(side-3-sense,side.n.05)
has_sense(about-5,about-5-sense)
is_a(about-5-sense,approximately.r.01)
has_sense(minute-7,minute-7-sense)
is_a(minute-7-sense,minute.n.01)
has_sense(flip-12,flip-12-sense)
is_a(flip-12-sense,flip.v.08)
has_sense(carefully-14,carefully-14-sense)
is_a(carefully-14-sense,carefully.r.01)
root(ROOT-0, grill-1)
det(side-3, each-2)
dobj(grill-1, side-3)
quantmod(one-6, about-5)
num(minute-7, one-6)
prep_for(side-3, minute-7)
conj_and(grill-1, make-9)
acomp(make-9, sure-10)
nsubj(flip-12, you-11)
dep(sure-10, flip-12)
dobj(flip-12, them-13)
advmod(flip-12, carefully-14)
has_pos(grill-1,VB)
has_pos(each-2,DT)
has_pos(side-3,NN)
has_pos(about-5,RB)
has_pos(one-6,CD)
has_pos(minute-7,NN)
has_pos(make-9,VB)
has_pos(sure-10,JJ)
has_pos(you-11,PRP)
has_pos(flip-12,VB)
has_pos(them-13,PRP)
has_pos(carefully-14,RB)
has_sense(each-2, null)
has_sense(make-9, null)
has_sense(them-13, null)
has_sense(one-6, null)
has_sense(sure-10, null)
has_sense(you-11, null)
---
// flip the cake gently .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(cake-3,cake-3-sense)
is_a(cake-3-sense,cake.n.03)
root(ROOT-0, flip-1)
det(cake-3, the-2)
dobj(flip-1, cake-3)
advmod(flip-1, gently-4)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(cake-3,NN)
has_pos(gently-4,RB)
has_sense(gently-4, null)
has_sense(the-2, null)
---
// flip it over each minute .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(minute-5,minute-5-sense)
is_a(minute-5-sense,minute.n.01)
root(ROOT-0, flip-1)
dobj(flip-1, it-2)
det(minute-5, each-4)
prep_over(flip-1, minute-5)
has_pos(flip-1,VB)
has_pos(it-2,PRP)
has_pos(each-4,DT)
has_pos(minute-5,NN)
has_sense(each-4, null)
has_sense(it-2, null)
---
// flip the pudding onto the plate .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(pudding-3,pudding-3-sense)
is_a(pudding-3-sense,pudding.n.01)
has_sense(plate-6,plate-6-sense)
is_a(plate-6-sense,plate.n.04)
root(ROOT-0, flip-1)
det(pudding-3, the-2)
dobj(flip-1, pudding-3)
det(plate-6, the-5)
prep_onto(flip-1, plate-6)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(pudding-3,NN)
has_pos(the-5,DT)
has_pos(plate-6,NN)
has_sense(the-5, null)
has_sense(the-2, null)
---
// add some more rosemary and flip them .
has_sense(add-1,add-1-sense)
is_a(add-1-sense,add.v.01)
has_sense(more-3,more-3-sense)
is_a(more-3-sense,more.a.01)
has_sense(rosemary-4,rosemary-4-sense)
is_a(rosemary-4-sense,rosemary.n.02)
has_sense(flip-6,flip-6-sense)
is_a(flip-6-sense,flip.v.08)
root(ROOT-0, add-1)
det(rosemary-4, some-2)
amod(rosemary-4, more-3)
dobj(add-1, rosemary-4)
conj_and(add-1, flip-6)
dobj(flip-6, them-7)
has_pos(add-1,VB)
has_pos(some-2,DT)
has_pos(more-3,JJR)
has_pos(rosemary-4,NN)
has_pos(flip-6,VB)
has_pos(them-7,PRP)
has_sense(them-7, null)
has_sense(some-2, null)
---
// flip the steak over and repeat steps 1-3 with the other side .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(steak-3,steak-3-sense)
is_a(steak-3-sense,steak.n.01)
has_sense(repeat-6,repeat-6-sense)
is_a(repeat-6-sense,duplicate.v.01)
has_sense(other-11,other-11-sense)
is_a(other-11-sense,other.a.01)
root(ROOT-0, flip-1)
det(steak-3, the-2)
dobj(flip-1, steak-3)
prt(flip-1, over-4)
conj_and(flip-1, repeat-6)
dobj(repeat-6, steps-7)
dobj(flip-1, 1-3-8)
det(side-12, the-10)
amod(side-12, other-11)
prep_with(flip-1, side-12)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(steak-3,NN)
has_pos(over-4,RP)
has_pos(repeat-6,VB)
has_pos(steps-7,NNS)
has_pos(1-3-8,CD)
has_pos(the-10,DT)
has_pos(other-11,JJ)
has_pos(side-12,NN)
has_sense(the-2, null)
has_sense(over-4, null)
has_sense(side-12, null)
has_sense(steps-7, null)
has_sense(the-10, null)
has_sense(1-3-8, null)
---
// flip over the bread , and let the egg cook again on the other side .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(bread-4,bread-4-sense)
is_a(bread-4-sense,bread.n.01)
has_sense(let-7,let-7-sense)
is_a(let-7-sense,let.v.01)
has_sense(egg-9,egg-9-sense)
is_a(egg-9-sense,egg.n.02)
has_sense(again-11,again-11-sense)
is_a(again-11-sense,again.r.01)
has_sense(other-14,other-14-sense)
is_a(other-14-sense,other.a.01)
has_sense(side-15,side-15-sense)
is_a(side-15-sense,side.n.01)
root(ROOT-0, flip-1)
prt(flip-1, over-2)
det(bread-4, the-3)
dobj(flip-1, bread-4)
conj_and(flip-1, let-7)
det(cook-10, the-8)
nn(cook-10, egg-9)
dobj(let-7, cook-10)
advmod(let-7, again-11)
det(side-15, the-13)
amod(side-15, other-14)
prep_on(let-7, side-15)
has_pos(flip-1,VB)
has_pos(over-2,RP)
has_pos(the-3,DT)
has_pos(bread-4,NN)
has_pos(let-7,VB)
has_pos(the-8,DT)
has_pos(egg-9,NN)
has_pos(cook-10,NN)
has_pos(again-11,RB)
has_pos(the-13,DT)
has_pos(other-14,JJ)
has_pos(side-15,NN)
has_sense(over-2, null)
has_sense(the-3, null)
has_sense(the-8, null)
has_sense(cook-10, null)
has_sense(the-13, null)
---
// put bacon in a frying_pan and regularly flip it .
has_sense(put-1,put-1-sense)
is_a(put-1-sense,put.v.01)
has_sense(bacon-2,bacon-2-sense)
is_a(bacon-2-sense,bacon.n.01)
has_sense(frying_pan-5,frying_pan-5-sense)
is_a(frying_pan-5-sense,frying_pan.n.01)
has_sense(regularly-7,regularly-7-sense)
is_a(regularly-7-sense,regularly.r.01)
has_sense(flip-8,flip-8-sense)
is_a(flip-8-sense,flip.v.08)
root(ROOT-0, put-1)
dobj(put-1, bacon-2)
det(frying_pan-5, a-4)
prep_in(put-1, frying_pan-5)
advmod(flip-8, regularly-7)
conj_and(put-1, flip-8)
dobj(flip-8, it-9)
has_pos(put-1,VB)
has_pos(bacon-2,NN)
has_pos(a-4,DT)
has_pos(frying_pan-5,NN)
has_pos(regularly-7,RB)
has_pos(flip-8,VB)
has_pos(it-9,PRP)
has_sense(it-9, null)
has_sense(a-4, null)
---
// flip it over and place the butter in the hole again .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(place-5,place-5-sense)
is_a(place-5-sense,put.v.01)
has_sense(butter-7,butter-7-sense)
is_a(butter-7-sense,butter.n.01)
has_sense(hole-10,hole-10-sense)
is_a(hole-10-sense,hole.n.01)
has_sense(again-11,again-11-sense)
is_a(again-11-sense,again.r.01)
root(ROOT-0, flip-1)
dobj(flip-1, it-2)
prt(flip-1, over-3)
conj_and(flip-1, place-5)
det(butter-7, the-6)
dobj(place-5, butter-7)
det(hole-10, the-9)
prep_in(butter-7, hole-10)
advmod(place-5, again-11)
has_pos(flip-1,VB)
has_pos(it-2,PRP)
has_pos(over-3,RP)
has_pos(place-5,VB)
has_pos(the-6,DT)
has_pos(butter-7,NN)
has_pos(the-9,DT)
has_pos(hole-10,NN)
has_pos(again-11,RB)
has_sense(over-3, null)
has_sense(the-6, null)
has_sense(the-9, null)
has_sense(it-2, null)
---
// flip the steak and repeat .
has_sense(flip-1,flip-1-sense)
is_a(flip-1-sense,flip.v.08)
has_sense(steak-3,steak-3-sense)
is_a(steak-3-sense,steak.n.01)
has_sense(repeat-5,repeat-5-sense)
is_a(repeat-5-sense,duplicate.v.01)
root(ROOT-0, flip-1)
det(steak-3, the-2)
dobj(flip-1, steak-3)
conj_and(flip-1, repeat-5)
has_pos(flip-1,VB)
has_pos(the-2,DT)
has_pos(steak-3,NN)
has_pos(repeat-5,VB)
has_sense(the-2, null)